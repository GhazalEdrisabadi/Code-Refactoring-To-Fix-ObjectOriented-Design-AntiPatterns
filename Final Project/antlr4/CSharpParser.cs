//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class CSharpParser : CSharpParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_DOC_COMMENT=2, EMPTY_DELIMITED_DOC_COMMENT=3, 
		DELIMITED_DOC_COMMENT=4, SINGLE_LINE_COMMENT=5, DELIMITED_COMMENT=6, WHITESPACES=7, 
		SHARP=8, ABSTRACT=9, ADD=10, ALIAS=11, ARGLIST=12, AS=13, ASCENDING=14, 
		ASYNC=15, AWAIT=16, BASE=17, BOOL=18, BREAK=19, BY=20, BYTE=21, CASE=22, 
		CATCH=23, CHAR=24, CHECKED=25, CLASS=26, CONST=27, CONTINUE=28, DECIMAL=29, 
		DEFAULT=30, DELEGATE=31, DESCENDING=32, DO=33, DOUBLE=34, DYNAMIC=35, 
		ELSE=36, ENUM=37, EQUALS=38, EVENT=39, EXPLICIT=40, EXTERN=41, FALSE=42, 
		FINALLY=43, FIXED=44, FLOAT=45, FOR=46, FOREACH=47, FROM=48, GET=49, GOTO=50, 
		GROUP=51, IF=52, IMPLICIT=53, IN=54, INT=55, INTERFACE=56, INTERNAL=57, 
		INTO=58, IS=59, JOIN=60, LET=61, LOCK=62, LONG=63, NAMEOF=64, NAMESPACE=65, 
		NEW=66, NULL_=67, OBJECT=68, ON=69, OPERATOR=70, ORDERBY=71, OUT=72, OVERRIDE=73, 
		PARAMS=74, PARTIAL=75, PRIVATE=76, PROTECTED=77, PUBLIC=78, READONLY=79, 
		REF=80, REMOVE=81, RETURN=82, SBYTE=83, SEALED=84, SELECT=85, SET=86, 
		SHORT=87, SIZEOF=88, STACKALLOC=89, STATIC=90, STRING=91, STRUCT=92, SWITCH=93, 
		THIS=94, THROW=95, TRUE=96, TRY=97, TYPEOF=98, UINT=99, ULONG=100, UNCHECKED=101, 
		UNMANAGED=102, UNSAFE=103, USHORT=104, USING=105, VAR=106, VIRTUAL=107, 
		VOID=108, VOLATILE=109, WHEN=110, WHERE=111, WHILE=112, YIELD=113, IDENTIFIER=114, 
		LITERAL_ACCESS=115, INTEGER_LITERAL=116, HEX_INTEGER_LITERAL=117, BIN_INTEGER_LITERAL=118, 
		REAL_LITERAL=119, CHARACTER_LITERAL=120, REGULAR_STRING=121, VERBATIUM_STRING=122, 
		INTERPOLATED_REGULAR_STRING_START=123, INTERPOLATED_VERBATIUM_STRING_START=124, 
		OPEN_BRACE=125, CLOSE_BRACE=126, OPEN_BRACKET=127, CLOSE_BRACKET=128, 
		OPEN_PARENS=129, CLOSE_PARENS=130, DOT=131, COMMA=132, COLON=133, SEMICOLON=134, 
		PLUS=135, MINUS=136, STAR=137, DIV=138, PERCENT=139, AMP=140, BITWISE_OR=141, 
		CARET=142, BANG=143, TILDE=144, ASSIGNMENT=145, LT=146, GT=147, INTERR=148, 
		DOUBLE_COLON=149, OP_COALESCING=150, OP_INC=151, OP_DEC=152, OP_AND=153, 
		OP_OR=154, OP_PTR=155, OP_EQ=156, OP_NE=157, OP_LE=158, OP_GE=159, OP_ADD_ASSIGNMENT=160, 
		OP_SUB_ASSIGNMENT=161, OP_MULT_ASSIGNMENT=162, OP_DIV_ASSIGNMENT=163, 
		OP_MOD_ASSIGNMENT=164, OP_AND_ASSIGNMENT=165, OP_OR_ASSIGNMENT=166, OP_XOR_ASSIGNMENT=167, 
		OP_LEFT_SHIFT=168, OP_LEFT_SHIFT_ASSIGNMENT=169, OP_COALESCING_ASSIGNMENT=170, 
		OP_RANGE=171, DOUBLE_CURLY_INSIDE=172, OPEN_BRACE_INSIDE=173, REGULAR_CHAR_INSIDE=174, 
		VERBATIUM_DOUBLE_QUOTE_INSIDE=175, DOUBLE_QUOTE_INSIDE=176, REGULAR_STRING_INSIDE=177, 
		VERBATIUM_INSIDE_STRING=178, CLOSE_BRACE_INSIDE=179, FORMAT_STRING=180, 
		DIRECTIVE_WHITESPACES=181, DIGITS=182, DEFINE=183, UNDEF=184, ELIF=185, 
		ENDIF=186, LINE=187, ERROR=188, WARNING=189, REGION=190, ENDREGION=191, 
		PRAGMA=192, NULLABLE=193, DIRECTIVE_HIDDEN=194, CONDITIONAL_SYMBOL=195, 
		DIRECTIVE_NEW_LINE=196, TEXT=197, DOUBLE_CURLY_CLOSE_INSIDE=198;
	public const int
		RULE_compilation_unit = 0, RULE_namespace_or_type_name = 1, RULE_type_ = 2, 
		RULE_base_type = 3, RULE_tuple_type = 4, RULE_tuple_element = 5, RULE_simple_type = 6, 
		RULE_numeric_type = 7, RULE_integral_type = 8, RULE_floating_point_type = 9, 
		RULE_class_type = 10, RULE_type_argument_list = 11, RULE_argument_list = 12, 
		RULE_argument = 13, RULE_expression = 14, RULE_non_assignment_expression = 15, 
		RULE_assignment = 16, RULE_assignment_operator = 17, RULE_conditional_expression = 18, 
		RULE_null_coalescing_expression = 19, RULE_conditional_or_expression = 20, 
		RULE_conditional_and_expression = 21, RULE_inclusive_or_expression = 22, 
		RULE_exclusive_or_expression = 23, RULE_and_expression = 24, RULE_equality_expression = 25, 
		RULE_relational_expression = 26, RULE_shift_expression = 27, RULE_additive_expression = 28, 
		RULE_multiplicative_expression = 29, RULE_switch_expression = 30, RULE_switch_expression_arms = 31, 
		RULE_switch_expression_arm = 32, RULE_range_expression = 33, RULE_unary_expression = 34, 
		RULE_primary_expression = 35, RULE_primary_expression_start = 36, RULE_throwable_expression = 37, 
		RULE_throw_expression = 38, RULE_member_access = 39, RULE_bracket_expression = 40, 
		RULE_indexer_argument = 41, RULE_predefined_type = 42, RULE_expression_list = 43, 
		RULE_object_or_collection_initializer = 44, RULE_object_initializer = 45, 
		RULE_member_initializer_list = 46, RULE_member_initializer = 47, RULE_initializer_value = 48, 
		RULE_collection_initializer = 49, RULE_element_initializer = 50, RULE_anonymous_object_initializer = 51, 
		RULE_member_declarator_list = 52, RULE_member_declarator = 53, RULE_unbound_type_name = 54, 
		RULE_generic_dimension_specifier = 55, RULE_isType = 56, RULE_isTypePatternArms = 57, 
		RULE_isTypePatternArm = 58, RULE_lambda_expression = 59, RULE_anonymous_function_signature = 60, 
		RULE_explicit_anonymous_function_parameter_list = 61, RULE_explicit_anonymous_function_parameter = 62, 
		RULE_implicit_anonymous_function_parameter_list = 63, RULE_anonymous_function_body = 64, 
		RULE_query_expression = 65, RULE_from_clause = 66, RULE_query_body = 67, 
		RULE_query_body_clause = 68, RULE_let_clause = 69, RULE_where_clause = 70, 
		RULE_combined_join_clause = 71, RULE_orderby_clause = 72, RULE_ordering = 73, 
		RULE_select_or_group_clause = 74, RULE_query_continuation = 75, RULE_statement = 76, 
		RULE_declarationStatement = 77, RULE_local_function_declaration = 78, 
		RULE_local_function_header = 79, RULE_local_function_modifiers = 80, RULE_local_function_body = 81, 
		RULE_labeled_Statement = 82, RULE_embedded_statement = 83, RULE_simple_embedded_statement = 84, 
		RULE_block = 85, RULE_local_variable_declaration = 86, RULE_local_variable_type = 87, 
		RULE_local_variable_declarator = 88, RULE_local_variable_initializer = 89, 
		RULE_local_constant_declaration = 90, RULE_if_body = 91, RULE_switch_section = 92, 
		RULE_switch_label = 93, RULE_case_guard = 94, RULE_statement_list = 95, 
		RULE_for_initializer = 96, RULE_for_iterator = 97, RULE_catch_clauses = 98, 
		RULE_specific_catch_clause = 99, RULE_general_catch_clause = 100, RULE_exception_filter = 101, 
		RULE_finally_clause = 102, RULE_resource_acquisition = 103, RULE_namespace_declaration = 104, 
		RULE_qualified_identifier = 105, RULE_namespace_body = 106, RULE_extern_alias_directives = 107, 
		RULE_extern_alias_directive = 108, RULE_using_directives = 109, RULE_using_directive = 110, 
		RULE_namespace_member_declarations = 111, RULE_namespace_member_declaration = 112, 
		RULE_type_declaration = 113, RULE_qualified_alias_member = 114, RULE_type_parameter_list = 115, 
		RULE_type_parameter = 116, RULE_class_base = 117, RULE_interface_type_list = 118, 
		RULE_type_parameter_constraints_clauses = 119, RULE_type_parameter_constraints_clause = 120, 
		RULE_type_parameter_constraints = 121, RULE_primary_constraint = 122, 
		RULE_secondary_constraints = 123, RULE_constructor_constraint = 124, RULE_class_body = 125, 
		RULE_class_member_declarations = 126, RULE_class_member_declaration = 127, 
		RULE_all_member_modifiers = 128, RULE_all_member_modifier = 129, RULE_common_member_declaration = 130, 
		RULE_typed_member_declaration = 131, RULE_constant_declarators = 132, 
		RULE_constant_declarator = 133, RULE_variable_declarators = 134, RULE_variable_declarator = 135, 
		RULE_variable_initializer = 136, RULE_return_type = 137, RULE_member_name = 138, 
		RULE_method_body = 139, RULE_formal_parameter_list = 140, RULE_fixed_parameters = 141, 
		RULE_fixed_parameter = 142, RULE_parameter_modifier = 143, RULE_parameter_array = 144, 
		RULE_accessor_declarations = 145, RULE_get_accessor_declaration = 146, 
		RULE_set_accessor_declaration = 147, RULE_accessor_modifier = 148, RULE_accessor_body = 149, 
		RULE_event_accessor_declarations = 150, RULE_add_accessor_declaration = 151, 
		RULE_remove_accessor_declaration = 152, RULE_overloadable_operator = 153, 
		RULE_conversion_operator_declarator = 154, RULE_constructor_initializer = 155, 
		RULE_body = 156, RULE_struct_interfaces = 157, RULE_struct_body = 158, 
		RULE_struct_member_declaration = 159, RULE_array_type = 160, RULE_rank_specifier = 161, 
		RULE_array_initializer = 162, RULE_variant_type_parameter_list = 163, 
		RULE_variant_type_parameter = 164, RULE_variance_annotation = 165, RULE_interface_base = 166, 
		RULE_interface_body = 167, RULE_interface_member_declaration = 168, RULE_interface_accessors = 169, 
		RULE_enum_base = 170, RULE_enum_body = 171, RULE_enum_member_declaration = 172, 
		RULE_global_attribute_section = 173, RULE_global_attribute_target = 174, 
		RULE_attributes = 175, RULE_attribute_section = 176, RULE_attribute_target = 177, 
		RULE_attribute_list = 178, RULE_attribute = 179, RULE_attribute_argument = 180, 
		RULE_pointer_type = 181, RULE_fixed_pointer_declarators = 182, RULE_fixed_pointer_declarator = 183, 
		RULE_fixed_pointer_initializer = 184, RULE_fixed_size_buffer_declarator = 185, 
		RULE_stackalloc_initializer = 186, RULE_right_arrow = 187, RULE_right_shift = 188, 
		RULE_right_shift_assignment = 189, RULE_literal = 190, RULE_boolean_literal = 191, 
		RULE_string_literal = 192, RULE_interpolated_regular_string = 193, RULE_interpolated_verbatium_string = 194, 
		RULE_interpolated_regular_string_part = 195, RULE_interpolated_verbatium_string_part = 196, 
		RULE_interpolated_string_expression = 197, RULE_keyword = 198, RULE_class_definition = 199, 
		RULE_struct_definition = 200, RULE_interface_definition = 201, RULE_enum_definition = 202, 
		RULE_delegate_definition = 203, RULE_event_declaration = 204, RULE_field_declaration = 205, 
		RULE_property_declaration = 206, RULE_constant_declaration = 207, RULE_indexer_declaration = 208, 
		RULE_destructor_definition = 209, RULE_constructor_declaration = 210, 
		RULE_method_declaration = 211, RULE_method_member_name = 212, RULE_operator_declaration = 213, 
		RULE_arg_declaration = 214, RULE_method_invocation = 215, RULE_object_creation_expression = 216, 
		RULE_identifier = 217;
	public static readonly string[] ruleNames = {
		"compilation_unit", "namespace_or_type_name", "type_", "base_type", "tuple_type", 
		"tuple_element", "simple_type", "numeric_type", "integral_type", "floating_point_type", 
		"class_type", "type_argument_list", "argument_list", "argument", "expression", 
		"non_assignment_expression", "assignment", "assignment_operator", "conditional_expression", 
		"null_coalescing_expression", "conditional_or_expression", "conditional_and_expression", 
		"inclusive_or_expression", "exclusive_or_expression", "and_expression", 
		"equality_expression", "relational_expression", "shift_expression", "additive_expression", 
		"multiplicative_expression", "switch_expression", "switch_expression_arms", 
		"switch_expression_arm", "range_expression", "unary_expression", "primary_expression", 
		"primary_expression_start", "throwable_expression", "throw_expression", 
		"member_access", "bracket_expression", "indexer_argument", "predefined_type", 
		"expression_list", "object_or_collection_initializer", "object_initializer", 
		"member_initializer_list", "member_initializer", "initializer_value", 
		"collection_initializer", "element_initializer", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
		"isType", "isTypePatternArms", "isTypePatternArm", "lambda_expression", 
		"anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clause", "let_clause", "where_clause", "combined_join_clause", 
		"orderby_clause", "ordering", "select_or_group_clause", "query_continuation", 
		"statement", "declarationStatement", "local_function_declaration", "local_function_header", 
		"local_function_modifiers", "local_function_body", "labeled_Statement", 
		"embedded_statement", "simple_embedded_statement", "block", "local_variable_declaration", 
		"local_variable_type", "local_variable_declarator", "local_variable_initializer", 
		"local_constant_declaration", "if_body", "switch_section", "switch_label", 
		"case_guard", "statement_list", "for_initializer", "for_iterator", "catch_clauses", 
		"specific_catch_clause", "general_catch_clause", "exception_filter", "finally_clause", 
		"resource_acquisition", "namespace_declaration", "qualified_identifier", 
		"namespace_body", "extern_alias_directives", "extern_alias_directive", 
		"using_directives", "using_directive", "namespace_member_declarations", 
		"namespace_member_declaration", "type_declaration", "qualified_alias_member", 
		"type_parameter_list", "type_parameter", "class_base", "interface_type_list", 
		"type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
		"type_parameter_constraints", "primary_constraint", "secondary_constraints", 
		"constructor_constraint", "class_body", "class_member_declarations", "class_member_declaration", 
		"all_member_modifiers", "all_member_modifier", "common_member_declaration", 
		"typed_member_declaration", "constant_declarators", "constant_declarator", 
		"variable_declarators", "variable_declarator", "variable_initializer", 
		"return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "overloadable_operator", "conversion_operator_declarator", 
		"constructor_initializer", "body", "struct_interfaces", "struct_body", 
		"struct_member_declaration", "array_type", "rank_specifier", "array_initializer", 
		"variant_type_parameter_list", "variant_type_parameter", "variance_annotation", 
		"interface_base", "interface_body", "interface_member_declaration", "interface_accessors", 
		"enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
		"global_attribute_target", "attributes", "attribute_section", "attribute_target", 
		"attribute_list", "attribute", "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
		"fixed_pointer_declarator", "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
		"stackalloc_initializer", "right_arrow", "right_shift", "right_shift_assignment", 
		"literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
		"interpolated_verbatium_string", "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
		"interpolated_string_expression", "keyword", "class_definition", "struct_definition", 
		"interface_definition", "enum_definition", "delegate_definition", "event_declaration", 
		"field_declaration", "property_declaration", "constant_declaration", "indexer_declaration", 
		"destructor_definition", "constructor_declaration", "method_declaration", 
		"method_member_name", "operator_declaration", "arg_declaration", "method_invocation", 
		"object_creation_expression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, "'/***/'", null, null, null, null, 
		"'#'", "'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
		"'async'", "'await'", "'base'", "'bool'", "'break'", "'by'", "'byte'", 
		"'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", 
		"'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", 
		"'dynamic'", "'else'", "'enum'", "'equals'", "'event'", "'explicit'", 
		"'extern'", "'false'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
		"'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", "'in'", 
		"'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", 
		"'lock'", "'long'", "'nameof'", "'namespace'", "'new'", "'null'", "'object'", 
		"'on'", "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
		"'partial'", "'private'", "'protected'", "'public'", "'readonly'", "'ref'", 
		"'remove'", "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", 
		"'sizeof'", "'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", 
		"'this'", "'throw'", "'true'", "'try'", "'typeof'", "'uint'", "'ulong'", 
		"'unchecked'", "'unmanaged'", "'unsafe'", "'ushort'", "'using'", "'var'", 
		"'virtual'", "'void'", "'volatile'", "'when'", "'where'", "'while'", "'yield'", 
		null, null, null, null, null, null, null, null, null, null, null, "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", 
		"'<'", "'>'", "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", 
		"'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", "'{{'", null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, "'hidden'", 
		null, null, null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "EMPTY_DELIMITED_DOC_COMMENT", 
		"DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"SHARP", "ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", 
		"AWAIT", "BASE", "BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", 
		"CHECKED", "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", 
		"DESCENDING", "DO", "DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", 
		"EXPLICIT", "EXTERN", "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
		"FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", 
		"INTERNAL", "INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
		"NEW", "NULL_", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", 
		"PARAMS", "PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", 
		"REMOVE", "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", 
		"STACKALLOC", "STATIC", "STRING", "STRUCT", "SWITCH", "THIS", "THROW", 
		"TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
		"USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", "WHEN", "WHERE", 
		"WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", 
		"VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
		"VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
		"DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", 
		"REGION", "ENDREGION", "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
		"DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(CSharpParser.BYTE_ORDER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 436;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 439;
				extern_alias_directives();
				}
				break;
			}
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 442;
				using_directives();
				}
			}

			State = 448;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 445;
					global_attribute_section();
					}
					} 
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NAMESPACE - 65)) | (1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (STRUCT - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 451;
				namespace_member_declarations();
				}
			}

			State = 454;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 456;
				identifier();
				State = 458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 457;
					type_argument_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 460;
				qualified_alias_member();
				}
				break;
			}
			State = 470;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 463;
					Match(DOT);
					State = 464;
					identifier();
					State = 466;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 465;
						type_argument_list();
						}
						break;
					}
					}
					} 
				}
				State = 472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(CSharpParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(CSharpParser.INTERR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 4, RULE_type_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			base_type();
			State = 479;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 477;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERR:
						{
						State = 474;
						Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 475;
						rank_specifier();
						}
						break;
					case STAR:
						{
						State = 476;
						Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 481;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_base_type);
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484;
				Match(VOID);
				State = 485;
				Match(STAR);
				}
				break;
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 486;
				tuple_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_elementContext[] tuple_element() {
			return GetRuleContexts<Tuple_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_elementContext tuple_element(int i) {
			return GetRuleContext<Tuple_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Tuple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTuple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTuple_type(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_typeContext tuple_type() {
		Tuple_typeContext _localctx = new Tuple_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_tuple_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(OPEN_PARENS);
			State = 490;
			tuple_element();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 491;
				Match(COMMA);
				State = 492;
				tuple_element();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 497;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Tuple_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTuple_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTuple_element(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_elementContext tuple_element() {
		Tuple_elementContext _localctx = new Tuple_elementContext(Context, State);
		EnterRule(_localctx, 10, RULE_tuple_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			type_();
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (UNMANAGED - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 500;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simple_type);
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_numeric_type);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508;
				floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (SBYTE - 83)) | (1L << (SHORT - 83)) | (1L << (UINT - 83)) | (1L << (ULONG - 83)) | (1L << (USHORT - 83)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_class_type);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				namespace_or_type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517;
				Match(OBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518;
				Match(DYNAMIC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 519;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(LT);
			State = 523;
			type_();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 524;
				Match(COMMA);
				State = 525;
				type_();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 531;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			argument();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 534;
				Match(COMMA);
				State = 535;
				argument();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken refout;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 541;
				identifier();
				State = 542;
				Match(COLON);
				}
				break;
			}
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 546;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (IN - 54)) | (1L << (OUT - 54)) | (1L << (REF - 54)))) != 0)) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 549;
				Match(VAR);
				}
				break;
			case 2:
				{
				State = 550;
				type_();
				}
				break;
			}
			State = 553;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				non_assignment_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557;
				Match(REF);
				State = 558;
				non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_non_assignment_expression);
		try {
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561;
				lambda_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562;
				query_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 563;
				conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ASSIGNMENT() { return GetToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				unary_expression();
				State = 567;
				assignment_operator();
				State = 568;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 570;
				unary_expression();
				State = 571;
				Match(OP_COALESCING_ASSIGNMENT);
				State = 572;
				throwable_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(CSharpParser.OP_ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(CSharpParser.OP_SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(CSharpParser.OP_MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(CSharpParser.OP_DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(CSharpParser.OP_MOD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(CSharpParser.OP_AND_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(CSharpParser.OP_OR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(CSharpParser.OP_XOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment_operator);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576;
				Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577;
				Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 578;
				Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 579;
				Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 580;
				Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 581;
				Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 582;
				Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 583;
				Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 584;
				Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 585;
				Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 586;
				right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext[] throwable_expression() {
			return GetRuleContexts<Throwable_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression(int i) {
			return GetRuleContext<Throwable_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditional_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			null_coalescing_expression();
			State = 595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 590;
				Match(INTERR);
				State = 591;
				throwable_expression();
				State = 592;
				Match(COLON);
				State = 593;
				throwable_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING() { return GetToken(CSharpParser.OP_COALESCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_expressionContext throw_expression() {
			return GetRuleContext<Throw_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			conditional_or_expression();
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 598;
				Match(OP_COALESCING);
				State = 601;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BASE:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CHECKED:
				case DECIMAL:
				case DEFAULT:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FALSE:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case NEW:
				case NULL_:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case SIZEOF:
				case STRING:
				case THIS:
				case TRUE:
				case TYPEOF:
				case UINT:
				case ULONG:
				case UNCHECKED:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case LITERAL_ACCESS:
				case INTEGER_LITERAL:
				case HEX_INTEGER_LITERAL:
				case BIN_INTEGER_LITERAL:
				case REAL_LITERAL:
				case CHARACTER_LITERAL:
				case REGULAR_STRING:
				case VERBATIUM_STRING:
				case INTERPOLATED_REGULAR_STRING_START:
				case INTERPOLATED_VERBATIUM_STRING_START:
				case OPEN_PARENS:
				case PLUS:
				case MINUS:
				case STAR:
				case AMP:
				case CARET:
				case BANG:
				case TILDE:
				case OP_INC:
				case OP_DEC:
				case OP_RANGE:
					{
					State = 599;
					null_coalescing_expression();
					}
					break;
				case THROW:
					{
					State = 600;
					throw_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_OR() { return GetTokens(CSharpParser.OP_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR(int i) {
			return GetToken(CSharpParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditional_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			conditional_and_expression();
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 606;
					Match(OP_OR);
					State = 607;
					conditional_and_expression();
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_AND() { return GetTokens(CSharpParser.OP_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND(int i) {
			return GetToken(CSharpParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditional_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			inclusive_or_expression();
			State = 618;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 614;
					Match(OP_AND);
					State = 615;
					inclusive_or_expression();
					}
					} 
				}
				State = 620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_OR() { return GetTokens(CSharpParser.BITWISE_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR(int i) {
			return GetToken(CSharpParser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_inclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			exclusive_or_expression();
			State = 626;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 622;
					Match(BITWISE_OR);
					State = 623;
					exclusive_or_expression();
					}
					} 
				}
				State = 628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(CSharpParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(CSharpParser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_exclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			and_expression();
			State = 634;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 630;
					Match(CARET);
					State = 631;
					and_expression();
					}
					} 
				}
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMP() { return GetTokens(CSharpParser.AMP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP(int i) {
			return GetToken(CSharpParser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			equality_expression();
			State = 642;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 638;
					Match(AMP);
					State = 639;
					equality_expression();
					}
					} 
				}
				State = 644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_EQ() { return GetTokens(CSharpParser.OP_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ(int i) {
			return GetToken(CSharpParser.OP_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_NE() { return GetTokens(CSharpParser.OP_NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE(int i) {
			return GetToken(CSharpParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			relational_expression();
			State = 650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 646;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_EQ || _la==OP_NE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 647;
					relational_expression();
					}
					} 
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IS() { return GetTokens(CSharpParser.IS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS(int i) {
			return GetToken(CSharpParser.IS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(CSharpParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(CSharpParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(CSharpParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(CSharpParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(CSharpParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(CSharpParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LE() { return GetTokens(CSharpParser.OP_LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE(int i) {
			return GetToken(CSharpParser.OP_LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_GE() { return GetTokens(CSharpParser.OP_GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE(int i) {
			return GetToken(CSharpParser.OP_GE, i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_relational_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			shift_expression();
			State = 662;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 660;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LT:
					case GT:
					case OP_LE:
					case OP_GE:
						{
						State = 654;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (LT - 146)) | (1L << (GT - 146)) | (1L << (OP_LE - 146)) | (1L << (OP_GE - 146)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 655;
						shift_expression();
						}
						break;
					case IS:
						{
						State = 656;
						Match(IS);
						State = 657;
						isType();
						}
						break;
					case AS:
						{
						State = 658;
						Match(AS);
						State = 659;
						type_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(CSharpParser.OP_LEFT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(CSharpParser.OP_LEFT_SHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			additive_expression();
			State = 673;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 668;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 666;
						Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 667;
						right_shift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 670;
					additive_expression();
					}
					} 
				}
				State = 675;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(CSharpParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(CSharpParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(CSharpParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(CSharpParser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			multiplicative_expression();
			State = 681;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 677;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 678;
					multiplicative_expression();
					}
					} 
				}
				State = 683;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext[] switch_expression() {
			return GetRuleContexts<Switch_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext switch_expression(int i) {
			return GetRuleContext<Switch_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(CSharpParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(CSharpParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(CSharpParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(CSharpParser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_multiplicative_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			switch_expression();
			State = 689;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 685;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (STAR - 137)) | (1L << (DIV - 137)) | (1L << (PERCENT - 137)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 686;
					switch_expression();
					}
					} 
				}
				State = 691;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_expressionContext range_expression() {
			return GetRuleContext<Range_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armsContext switch_expression_arms() {
			return GetRuleContext<Switch_expression_armsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Switch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expressionContext switch_expression() {
		Switch_expressionContext _localctx = new Switch_expressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_switch_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			range_expression();
			State = 702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 693;
				Match(SWITCH);
				State = 694;
				Match(OPEN_BRACE);
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 695;
					switch_expression_arms();
					State = 697;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 696;
						Match(COMMA);
						}
					}

					}
				}

				State = 701;
				Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expression_armsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armContext[] switch_expression_arm() {
			return GetRuleContexts<Switch_expression_armContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armContext switch_expression_arm(int i) {
			return GetRuleContext<Switch_expression_armContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Switch_expression_armsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression_arms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression_arms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression_arms(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expression_armsContext switch_expression_arms() {
		Switch_expression_armsContext _localctx = new Switch_expression_armsContext(Context, State);
		EnterRule(_localctx, 62, RULE_switch_expression_arms);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			switch_expression_arm();
			State = 709;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 705;
					Match(COMMA);
					State = 706;
					switch_expression_arm();
					}
					} 
				}
				State = 711;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expression_armContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_guardContext case_guard() {
			return GetRuleContext<Case_guardContext>(0);
		}
		public Switch_expression_armContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression_arm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression_arm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression_arm(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expression_armContext switch_expression_arm() {
		Switch_expression_armContext _localctx = new Switch_expression_armContext(Context, State);
		EnterRule(_localctx, 64, RULE_switch_expression_arm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			expression();
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 713;
				case_guard();
				}
			}

			State = 716;
			right_arrow();
			State = 717;
			throwable_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(CSharpParser.OP_RANGE, 0); }
		public Range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
	}

	[RuleVersion(0)]
	public Range_expressionContext range_expression() {
		Range_expressionContext _localctx = new Range_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_range_expression);
		int _la;
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 719;
				unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 720;
					unary_expression();
					}
				}

				State = 723;
				Match(OP_RANGE);
				State = 725;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 724;
					unary_expression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CSharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CSharpParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(CSharpParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(CSharpParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(CSharpParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(CSharpParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(CSharpParser.CARET, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_unary_expression);
		try {
			State = 755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 729;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 730;
				Match(PLUS);
				State = 731;
				unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 732;
				Match(MINUS);
				State = 733;
				unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 734;
				Match(BANG);
				State = 735;
				unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 736;
				Match(TILDE);
				State = 737;
				unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 738;
				Match(OP_INC);
				State = 739;
				unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 740;
				Match(OP_DEC);
				State = 741;
				unary_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 742;
				Match(OPEN_PARENS);
				State = 743;
				type_();
				State = 744;
				Match(CLOSE_PARENS);
				State = 745;
				unary_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 747;
				Match(AWAIT);
				State = 748;
				unary_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 749;
				Match(AMP);
				State = 750;
				unary_expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 751;
				Match(STAR);
				State = 752;
				unary_expression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 753;
				Match(CARET);
				State = 754;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BANG() { return GetTokens(CSharpParser.BANG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG(int i) {
			return GetToken(CSharpParser.BANG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_INC() { return GetTokens(CSharpParser.OP_INC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC(int i) {
			return GetToken(CSharpParser.OP_INC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_DEC() { return GetTokens(CSharpParser.OP_DEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC(int i) {
			return GetToken(CSharpParser.OP_DEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_PTR() { return GetTokens(CSharpParser.OP_PTR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PTR(int i) {
			return GetToken(CSharpParser.OP_PTR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_localctx.pe = primary_expression_start();
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 758;
				Match(BANG);
				}
				break;
			}
			State = 764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 761;
					bracket_expression();
					}
					} 
				}
				State = 766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 767;
				Match(BANG);
				}
				break;
			}
			State = 792;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 776;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
					case INTERR:
						{
						State = 770;
						member_access();
						}
						break;
					case OPEN_PARENS:
						{
						State = 771;
						method_invocation();
						}
						break;
					case OP_INC:
						{
						State = 772;
						Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 773;
						Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 774;
						Match(OP_PTR);
						State = 775;
						identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 779;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						State = 778;
						Match(BANG);
						}
						break;
					}
					}
					State = 784;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 781;
							bracket_expression();
							}
							} 
						}
						State = 786;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
					}
					State = 788;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						State = 787;
						Match(BANG);
						}
						break;
					}
					}
					} 
				}
				State = 794;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_ACCESS() { return GetToken(CSharpParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
	}
	public partial class DefaultValueExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public DefaultValueExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
	}
	public partial class BaseAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CSharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public BaseAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBaseAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBaseAccessExpression(this);
		}
	}
	public partial class SizeofExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public SizeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSizeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSizeofExpression(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
	}
	public partial class ThisReferenceExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ThisReferenceExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
	}
	public partial class ObjectCreationExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ObjectCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
	}
	public partial class AnonymousMethodExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public AnonymousMethodExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}
	public partial class TypeofExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public TypeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
	}
	public partial class TupleExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public TupleExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}
	public partial class UncheckedExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public UncheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedExpression(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
	}
	public partial class MemberAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public MemberAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
	}
	public partial class CheckedExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public CheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class NameofExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public NameofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNameofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNameofExpression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 72, RULE_primary_expression_start);
		int _la;
		try {
			int _alt;
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 795;
				literal();
				}
				break;
			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				identifier();
				State = 798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 797;
					type_argument_list();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 800;
				Match(OPEN_PARENS);
				State = 801;
				expression();
				State = 802;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 804;
				predefined_type();
				}
				break;
			case 5:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 805;
				qualified_alias_member();
				}
				break;
			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 806;
				Match(LITERAL_ACCESS);
				}
				break;
			case 7:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 807;
				Match(THIS);
				}
				break;
			case 8:
				_localctx = new BaseAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 808;
				Match(BASE);
				State = 818;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 809;
					Match(DOT);
					State = 810;
					identifier();
					State = 812;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						State = 811;
						type_argument_list();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 814;
					Match(OPEN_BRACKET);
					State = 815;
					expression_list();
					State = 816;
					Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				_localctx = new ObjectCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 820;
				Match(NEW);
				State = 849;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case OPEN_PARENS:
					{
					State = 821;
					type_();
					State = 843;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						State = 822;
						object_creation_expression();
						}
						break;
					case 2:
						{
						State = 823;
						object_or_collection_initializer();
						}
						break;
					case 3:
						{
						State = 824;
						Match(OPEN_BRACKET);
						State = 825;
						expression_list();
						State = 826;
						Match(CLOSE_BRACKET);
						State = 830;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 827;
								rank_specifier();
								}
								} 
							}
							State = 832;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
						}
						State = 834;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
						case 1:
							{
							State = 833;
							array_initializer();
							}
							break;
						}
						}
						break;
					case 4:
						{
						State = 837;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 836;
							rank_specifier();
							}
							}
							State = 839;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==OPEN_BRACKET );
						State = 841;
						array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 845;
					anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 846;
					rank_specifier();
					State = 847;
					array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 851;
				Match(OPEN_PARENS);
				State = 852;
				argument();
				State = 855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 853;
					Match(COMMA);
					State = 854;
					argument();
					}
					}
					State = 857;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 859;
				Match(CLOSE_PARENS);
				}
				break;
			case 11:
				_localctx = new TypeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 861;
				Match(TYPEOF);
				State = 862;
				Match(OPEN_PARENS);
				State = 866;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 863;
					unbound_type_name();
					}
					break;
				case 2:
					{
					State = 864;
					type_();
					}
					break;
				case 3:
					{
					State = 865;
					Match(VOID);
					}
					break;
				}
				State = 868;
				Match(CLOSE_PARENS);
				}
				break;
			case 12:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 869;
				Match(CHECKED);
				State = 870;
				Match(OPEN_PARENS);
				State = 871;
				expression();
				State = 872;
				Match(CLOSE_PARENS);
				}
				break;
			case 13:
				_localctx = new UncheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 874;
				Match(UNCHECKED);
				State = 875;
				Match(OPEN_PARENS);
				State = 876;
				expression();
				State = 877;
				Match(CLOSE_PARENS);
				}
				break;
			case 14:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 879;
				Match(DEFAULT);
				State = 884;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 880;
					Match(OPEN_PARENS);
					State = 881;
					type_();
					State = 882;
					Match(CLOSE_PARENS);
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new AnonymousMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC) {
					{
					State = 886;
					Match(ASYNC);
					}
				}

				State = 889;
				Match(DELEGATE);
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PARENS) {
					{
					State = 890;
					Match(OPEN_PARENS);
					State = 892;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PARTIAL - 75)) | (1L << (REF - 75)) | (1L << (REMOVE - 75)) | (1L << (SBYTE - 75)) | (1L << (SELECT - 75)) | (1L << (SET - 75)) | (1L << (SHORT - 75)) | (1L << (STRING - 75)) | (1L << (UINT - 75)) | (1L << (ULONG - 75)) | (1L << (UNMANAGED - 75)) | (1L << (USHORT - 75)) | (1L << (VAR - 75)) | (1L << (VOID - 75)) | (1L << (WHEN - 75)) | (1L << (WHERE - 75)) | (1L << (YIELD - 75)) | (1L << (IDENTIFIER - 75)) | (1L << (OPEN_PARENS - 75)))) != 0)) {
						{
						State = 891;
						explicit_anonymous_function_parameter_list();
						}
					}

					State = 894;
					Match(CLOSE_PARENS);
					}
				}

				State = 897;
				block();
				}
				break;
			case 16:
				_localctx = new SizeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 898;
				Match(SIZEOF);
				State = 899;
				Match(OPEN_PARENS);
				State = 900;
				type_();
				State = 901;
				Match(CLOSE_PARENS);
				}
				break;
			case 17:
				_localctx = new NameofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 903;
				Match(NAMEOF);
				State = 904;
				Match(OPEN_PARENS);
				State = 910;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 905;
						identifier();
						State = 906;
						Match(DOT);
						}
						} 
					}
					State = 912;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				}
				State = 913;
				identifier();
				State = 914;
				Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throwable_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_expressionContext throw_expression() {
			return GetRuleContext<Throw_expressionContext>(0);
		}
		public Throwable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwable_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowable_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowable_expression(this);
		}
	}

	[RuleVersion(0)]
	public Throwable_expressionContext throwable_expression() {
		Throwable_expressionContext _localctx = new Throwable_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_throwable_expression);
		try {
			State = 920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 918;
				expression();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 919;
				throw_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrow_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrow_expression(this);
		}
	}

	[RuleVersion(0)]
	public Throw_expressionContext throw_expression() {
		Throw_expressionContext _localctx = new Throw_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_throw_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			Match(THROW);
			State = 923;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CSharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 78, RULE_member_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 925;
				Match(INTERR);
				}
			}

			State = 928;
			Match(DOT);
			State = 929;
			identifier();
			State = 931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 930;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_argumentContext[] indexer_argument() {
			return GetRuleContexts<Indexer_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_argumentContext indexer_argument(int i) {
			return GetRuleContext<Indexer_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 933;
				Match(INTERR);
				}
			}

			State = 936;
			Match(OPEN_BRACKET);
			State = 937;
			indexer_argument();
			State = 942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 938;
				Match(COMMA);
				State = 939;
				indexer_argument();
				}
				}
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 945;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public Indexer_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_argument(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentContext indexer_argument() {
		Indexer_argumentContext _localctx = new Indexer_argumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexer_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 947;
				identifier();
				State = 948;
				Match(COLON);
				}
				break;
			}
			State = 952;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (OBJECT - 68)) | (1L << (SBYTE - 68)) | (1L << (SHORT - 68)) | (1L << (STRING - 68)) | (1L << (UINT - 68)) | (1L << (ULONG - 68)) | (1L << (USHORT - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 86, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			expression();
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 957;
				Match(COMMA);
				State = 958;
				expression();
				}
				}
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 88, RULE_object_or_collection_initializer);
		try {
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964;
				object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 965;
				collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			Match(OPEN_BRACE);
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (UNMANAGED - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 969;
				member_initializer_list();
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 970;
					Match(COMMA);
					}
				}

				}
			}

			State = 975;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(Context, State);
		EnterRule(_localctx, 92, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			member_initializer();
			State = 982;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 978;
					Match(COMMA);
					State = 979;
					member_initializer();
					}
					} 
				}
				State = 984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 985;
				identifier();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 986;
				Match(OPEN_BRACKET);
				State = 987;
				expression();
				State = 988;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 992;
			Match(ASSIGNMENT);
			State = 993;
			initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 96, RULE_initializer_value);
		try {
			State = 997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 996;
				object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_collection_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 999;
			Match(OPEN_BRACE);
			State = 1000;
			element_initializer();
			State = 1005;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1001;
					Match(COMMA);
					State = 1002;
					element_initializer();
					}
					} 
				}
				State = 1007;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			State = 1009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1008;
				Match(COMMA);
				}
			}

			State = 1011;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 100, RULE_element_initializer);
		try {
			State = 1018;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1013;
				non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				Match(OPEN_BRACE);
				State = 1015;
				expression_list();
				State = 1016;
				Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 102, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			Match(OPEN_BRACE);
			State = 1025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (NEW - 10)) | (1L << (NULL_ - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PARTIAL - 75)) | (1L << (REMOVE - 75)) | (1L << (SBYTE - 75)) | (1L << (SELECT - 75)) | (1L << (SET - 75)) | (1L << (SHORT - 75)) | (1L << (SIZEOF - 75)) | (1L << (STRING - 75)) | (1L << (THIS - 75)) | (1L << (TRUE - 75)) | (1L << (TYPEOF - 75)) | (1L << (UINT - 75)) | (1L << (ULONG - 75)) | (1L << (UNCHECKED - 75)) | (1L << (UNMANAGED - 75)) | (1L << (USHORT - 75)) | (1L << (VAR - 75)) | (1L << (WHEN - 75)) | (1L << (WHERE - 75)) | (1L << (YIELD - 75)) | (1L << (IDENTIFIER - 75)) | (1L << (LITERAL_ACCESS - 75)) | (1L << (INTEGER_LITERAL - 75)) | (1L << (HEX_INTEGER_LITERAL - 75)) | (1L << (BIN_INTEGER_LITERAL - 75)) | (1L << (REAL_LITERAL - 75)) | (1L << (CHARACTER_LITERAL - 75)) | (1L << (REGULAR_STRING - 75)) | (1L << (VERBATIUM_STRING - 75)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 75)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 75)) | (1L << (OPEN_PARENS - 75)))) != 0)) {
				{
				State = 1021;
				member_declarator_list();
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1022;
					Match(COMMA);
					}
				}

				}
			}

			State = 1027;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(Context, State);
		EnterRule(_localctx, 104, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029;
			member_declarator();
			State = 1034;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1030;
					Match(COMMA);
					State = 1031;
					member_declarator();
					}
					} 
				}
				State = 1036;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(Context, State);
		EnterRule(_localctx, 106, RULE_member_declarator);
		try {
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1038;
				identifier();
				State = 1039;
				Match(ASSIGNMENT);
				State = 1040;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(CSharpParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(Context, State);
		EnterRule(_localctx, 108, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			identifier();
			State = 1053;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1045;
					generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 1048;
				Match(DOUBLE_COLON);
				State = 1049;
				identifier();
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1050;
					generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1055;
				Match(DOT);
				State = 1056;
				identifier();
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1057;
					generic_dimension_specifier();
					}
				}

				}
				}
				State = 1064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(Context, State);
		EnterRule(_localctx, 110, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			Match(LT);
			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1066;
				Match(COMMA);
				}
				}
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1072;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmsContext isTypePatternArms() {
			return GetRuleContext<IsTypePatternArmsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_isType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1074;
			base_type();
			State = 1079;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1077;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 1075;
						rank_specifier();
						}
						break;
					case STAR:
						{
						State = 1076;
						Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1081;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			State = 1083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1082;
				Match(INTERR);
				}
				break;
			}
			State = 1086;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1085;
				isTypePatternArms();
				}
				break;
			}
			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1088;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmContext[] isTypePatternArm() {
			return GetRuleContexts<IsTypePatternArmContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmContext isTypePatternArm(int i) {
			return GetRuleContext<IsTypePatternArmContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public IsTypePatternArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArms(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmsContext isTypePatternArms() {
		IsTypePatternArmsContext _localctx = new IsTypePatternArmsContext(Context, State);
		EnterRule(_localctx, 114, RULE_isTypePatternArms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(OPEN_BRACE);
			State = 1092;
			isTypePatternArm();
			State = 1097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1093;
				Match(COMMA);
				State = 1094;
				isTypePatternArm();
				}
				}
				State = 1099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1100;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTypePatternArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArm(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmContext isTypePatternArm() {
		IsTypePatternArmContext _localctx = new IsTypePatternArmContext(Context, State);
		EnterRule(_localctx, 116, RULE_isTypePatternArm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			identifier();
			State = 1103;
			Match(COLON);
			State = 1104;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 1106;
				Match(ASYNC);
				}
				break;
			}
			State = 1109;
			anonymous_function_signature();
			State = 1110;
			right_arrow();
			State = 1111;
			anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 120, RULE_anonymous_function_signature);
		try {
			State = 1124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1113;
				Match(OPEN_PARENS);
				State = 1114;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1115;
				Match(OPEN_PARENS);
				State = 1116;
				explicit_anonymous_function_parameter_list();
				State = 1117;
				Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119;
				Match(OPEN_PARENS);
				State = 1120;
				implicit_anonymous_function_parameter_list();
				State = 1121;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1123;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			explicit_anonymous_function_parameter();
			State = 1131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1127;
				Match(COMMA);
				State = 1128;
				explicit_anonymous_function_parameter();
				}
				}
				State = 1133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public IToken refout;
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 124, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (IN - 54)) | (1L << (OUT - 54)) | (1L << (REF - 54)))) != 0)) {
				{
				State = 1134;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (IN - 54)) | (1L << (OUT - 54)) | (1L << (REF - 54)))) != 0)) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1137;
			type_();
			State = 1138;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 126, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			identifier();
			State = 1145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1141;
				Match(COMMA);
				State = 1142;
				identifier();
				}
				}
				State = 1147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_anonymous_function_body);
		try {
			State = 1150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case THROW:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1148;
				throwable_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1149;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152;
			from_clause();
			State = 1153;
			query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 132, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(FROM);
			State = 1157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 1156;
				type_();
				}
				break;
			}
			State = 1159;
			identifier();
			State = 1160;
			Match(IN);
			State = 1161;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(Context, State);
		EnterRule(_localctx, 134, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (FROM - 48)) | (1L << (JOIN - 48)) | (1L << (LET - 48)) | (1L << (ORDERBY - 48)) | (1L << (WHERE - 48)))) != 0)) {
				{
				{
				State = 1163;
				query_body_clause();
				}
				}
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1169;
			select_or_group_clause();
			State = 1171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1170;
				query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(Context, State);
		EnterRule(_localctx, 136, RULE_query_body_clause);
		try {
			State = 1178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1173;
				from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1174;
				let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1175;
				where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1176;
				combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1177;
				orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(Context, State);
		EnterRule(_localctx, 138, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(LET);
			State = 1181;
			identifier();
			State = 1182;
			Match(ASSIGNMENT);
			State = 1183;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 140, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			Match(WHERE);
			State = 1186;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(Context, State);
		EnterRule(_localctx, 142, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			Match(JOIN);
			State = 1190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1189;
				type_();
				}
				break;
			}
			State = 1192;
			identifier();
			State = 1193;
			Match(IN);
			State = 1194;
			expression();
			State = 1195;
			Match(ON);
			State = 1196;
			expression();
			State = 1197;
			Match(EQUALS);
			State = 1198;
			expression();
			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1199;
				Match(INTO);
				State = 1200;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(Context, State);
		EnterRule(_localctx, 144, RULE_orderby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			Match(ORDERBY);
			State = 1204;
			ordering();
			State = 1209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1205;
				Match(COMMA);
				State = 1206;
				ordering();
				}
				}
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public IToken dir;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 146, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			expression();
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1213;
				_localctx.dir = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.dir = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(Context, State);
		EnterRule(_localctx, 148, RULE_select_or_group_clause);
		try {
			State = 1223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1216;
				Match(SELECT);
				State = 1217;
				expression();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1218;
				Match(GROUP);
				State = 1219;
				expression();
				State = 1220;
				Match(BY);
				State = 1221;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(Context, State);
		EnterRule(_localctx, 150, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225;
			Match(INTO);
			State = 1226;
			identifier();
			State = 1227;
			query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_StatementContext labeled_Statement() {
			return GetRuleContext<Labeled_StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_statement);
		try {
			State = 1232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1229;
				labeled_Statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1230;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1231;
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_declarationContext local_function_declaration() {
			return GetRuleContext<Local_function_declarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_declarationStatement);
		try {
			State = 1241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1234;
				local_variable_declaration();
				State = 1235;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1237;
				local_constant_declaration();
				State = 1238;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1240;
				local_function_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_headerContext local_function_header() {
			return GetRuleContext<Local_function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_bodyContext local_function_body() {
			return GetRuleContext<Local_function_bodyContext>(0);
		}
		public Local_function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_declarationContext local_function_declaration() {
		Local_function_declarationContext _localctx = new Local_function_declarationContext(Context, State);
		EnterRule(_localctx, 156, RULE_local_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			local_function_header();
			State = 1244;
			local_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_modifiersContext local_function_modifiers() {
			return GetRuleContext<Local_function_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Local_function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_header(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_headerContext local_function_header() {
		Local_function_headerContext _localctx = new Local_function_headerContext(Context, State);
		EnterRule(_localctx, 158, RULE_local_function_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1246;
				local_function_modifiers();
				}
				break;
			}
			State = 1249;
			return_type();
			State = 1250;
			identifier();
			State = 1252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1251;
				type_parameter_list();
				}
			}

			State = 1254;
			Match(OPEN_PARENS);
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (PARAMS - 74)) | (1L << (PARTIAL - 74)) | (1L << (REF - 74)) | (1L << (REMOVE - 74)) | (1L << (SBYTE - 74)) | (1L << (SELECT - 74)) | (1L << (SET - 74)) | (1L << (SHORT - 74)) | (1L << (STRING - 74)) | (1L << (THIS - 74)) | (1L << (UINT - 74)) | (1L << (ULONG - 74)) | (1L << (UNMANAGED - 74)) | (1L << (USHORT - 74)) | (1L << (VAR - 74)) | (1L << (VOID - 74)) | (1L << (WHEN - 74)) | (1L << (WHERE - 74)) | (1L << (YIELD - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (OPEN_BRACKET - 74)) | (1L << (OPEN_PARENS - 74)))) != 0)) {
				{
				State = 1255;
				formal_parameter_list();
				}
			}

			State = 1258;
			Match(CLOSE_PARENS);
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1259;
				type_parameter_constraints_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public Local_function_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_modifiersContext local_function_modifiers() {
		Local_function_modifiersContext _localctx = new Local_function_modifiersContext(Context, State);
		EnterRule(_localctx, 160, RULE_local_function_modifiers);
		int _la;
		try {
			State = 1268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case UNSAFE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1262;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 1263;
					Match(STATIC);
					}
				}

				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266;
				Match(STATIC);
				State = 1267;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Local_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_body(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_bodyContext local_function_body() {
		Local_function_bodyContext _localctx = new Local_function_bodyContext(Context, State);
		EnterRule(_localctx, 162, RULE_local_function_body);
		try {
			State = 1275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1270;
				block();
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1271;
				right_arrow();
				State = 1272;
				throwable_expression();
				State = 1273;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_Statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLabeled_Statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLabeled_Statement(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_StatementContext labeled_Statement() {
		Labeled_StatementContext _localctx = new Labeled_StatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_labeled_Statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			identifier();
			State = 1278;
			Match(COLON);
			State = 1279;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 166, RULE_embedded_statement);
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281;
				block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1282;
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TryStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public TryStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class CheckedStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedStatement(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}
	public partial class TheEmptyStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public TheEmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTheEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTheEmptyStatement(this);
		}
	}
	public partial class UnsafeStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UnsafeStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class GotoStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public GotoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class FixedStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public FixedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedStatement(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}
	public partial class ForeachStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public ForeachStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}
	public partial class UncheckedStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}
	public partial class UsingStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public UsingStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
	}
	public partial class LockStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public LockStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
	}
	public partial class YieldStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public YieldStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 168, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 1415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				_localctx = new TheEmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1285;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1286;
				expression();
				State = 1287;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1289;
				Match(IF);
				State = 1290;
				Match(OPEN_PARENS);
				State = 1291;
				expression();
				State = 1292;
				Match(CLOSE_PARENS);
				State = 1293;
				if_body();
				State = 1296;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
				case 1:
					{
					State = 1294;
					Match(ELSE);
					State = 1295;
					if_body();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1298;
				Match(SWITCH);
				State = 1299;
				Match(OPEN_PARENS);
				State = 1300;
				expression();
				State = 1301;
				Match(CLOSE_PARENS);
				State = 1302;
				Match(OPEN_BRACE);
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1303;
					switch_section();
					}
					}
					State = 1308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1309;
				Match(CLOSE_BRACE);
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1311;
				Match(WHILE);
				State = 1312;
				Match(OPEN_PARENS);
				State = 1313;
				expression();
				State = 1314;
				Match(CLOSE_PARENS);
				State = 1315;
				embedded_statement();
				}
				break;
			case 6:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1317;
				Match(DO);
				State = 1318;
				embedded_statement();
				State = 1319;
				Match(WHILE);
				State = 1320;
				Match(OPEN_PARENS);
				State = 1321;
				expression();
				State = 1322;
				Match(CLOSE_PARENS);
				State = 1323;
				Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1325;
				Match(FOR);
				State = 1326;
				Match(OPEN_PARENS);
				State = 1328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VAR - 64)) | (1L << (VOID - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 1327;
					for_initializer();
					}
				}

				State = 1330;
				Match(SEMICOLON);
				State = 1332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 1331;
					expression();
					}
				}

				State = 1334;
				Match(SEMICOLON);
				State = 1336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 1335;
					for_iterator();
					}
				}

				State = 1338;
				Match(CLOSE_PARENS);
				State = 1339;
				embedded_statement();
				}
				break;
			case 8:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AWAIT) {
					{
					State = 1340;
					Match(AWAIT);
					}
				}

				State = 1343;
				Match(FOREACH);
				State = 1344;
				Match(OPEN_PARENS);
				State = 1345;
				local_variable_type();
				State = 1346;
				identifier();
				State = 1347;
				Match(IN);
				State = 1348;
				expression();
				State = 1349;
				Match(CLOSE_PARENS);
				State = 1350;
				embedded_statement();
				}
				break;
			case 9:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1352;
				Match(BREAK);
				State = 1353;
				Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1354;
				Match(CONTINUE);
				State = 1355;
				Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1356;
				Match(GOTO);
				State = 1361;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case UNMANAGED:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1357;
					identifier();
					}
					break;
				case CASE:
					{
					State = 1358;
					Match(CASE);
					State = 1359;
					expression();
					}
					break;
				case DEFAULT:
					{
					State = 1360;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1363;
				Match(SEMICOLON);
				}
				break;
			case 12:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1364;
				Match(RETURN);
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 1365;
					expression();
					}
				}

				State = 1368;
				Match(SEMICOLON);
				}
				break;
			case 13:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1369;
				Match(THROW);
				State = 1371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 1370;
					expression();
					}
				}

				State = 1373;
				Match(SEMICOLON);
				}
				break;
			case 14:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1374;
				Match(TRY);
				State = 1375;
				block();
				State = 1381;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 1376;
					catch_clauses();
					State = 1378;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 1377;
						finally_clause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1380;
					finally_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new CheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1383;
				Match(CHECKED);
				State = 1384;
				block();
				}
				break;
			case 16:
				_localctx = new UncheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1385;
				Match(UNCHECKED);
				State = 1386;
				block();
				}
				break;
			case 17:
				_localctx = new LockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1387;
				Match(LOCK);
				State = 1388;
				Match(OPEN_PARENS);
				State = 1389;
				expression();
				State = 1390;
				Match(CLOSE_PARENS);
				State = 1391;
				embedded_statement();
				}
				break;
			case 18:
				_localctx = new UsingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1393;
				Match(USING);
				State = 1394;
				Match(OPEN_PARENS);
				State = 1395;
				resource_acquisition();
				State = 1396;
				Match(CLOSE_PARENS);
				State = 1397;
				embedded_statement();
				}
				break;
			case 19:
				_localctx = new YieldStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1399;
				Match(YIELD);
				State = 1403;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RETURN:
					{
					State = 1400;
					Match(RETURN);
					State = 1401;
					expression();
					}
					break;
				case BREAK:
					{
					State = 1402;
					Match(BREAK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1405;
				Match(SEMICOLON);
				}
				break;
			case 20:
				_localctx = new UnsafeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1406;
				Match(UNSAFE);
				State = 1407;
				block();
				}
				break;
			case 21:
				_localctx = new FixedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1408;
				Match(FIXED);
				State = 1409;
				Match(OPEN_PARENS);
				State = 1410;
				pointer_type();
				State = 1411;
				fixed_pointer_declarators();
				State = 1412;
				Match(CLOSE_PARENS);
				State = 1413;
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 170, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417;
			Match(OPEN_BRACE);
			State = 1419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DO) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << FROM) | (1L << GET) | (1L << GOTO) | (1L << GROUP) | (1L << IF) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VAR - 64)) | (1L << (VOID - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (WHILE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)) | (1L << (OPEN_BRACE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (SEMICOLON - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
				{
				State = 1418;
				statement_list();
				}
			}

			State = 1421;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_local_variable_declaration);
		int _la;
		try {
			State = 1444;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case USING:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 1423;
					Match(USING);
					}
					break;
				case 2:
					{
					State = 1424;
					Match(REF);
					}
					break;
				case 3:
					{
					State = 1425;
					Match(REF);
					State = 1426;
					Match(READONLY);
					}
					break;
				}
				State = 1429;
				local_variable_type();
				State = 1430;
				local_variable_declarator();
				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1431;
					Match(COMMA);
					State = 1432;
					local_variable_declarator();
					State = 1433;
					if (!( this.IsLocalVariableDeclaration() )) throw new FailedPredicateException(this, " this.IsLocalVariableDeclaration() ");
					}
					}
					State = 1439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1440;
				Match(FIXED);
				State = 1441;
				pointer_type();
				State = 1442;
				fixed_pointer_declarators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 174, RULE_local_variable_type);
		try {
			State = 1448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1446;
				Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1447;
				type_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 176, RULE_local_variable_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450;
			identifier();
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1451;
				Match(ASSIGNMENT);
				State = 1453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 1452;
					Match(REF);
					}
					break;
				}
				State = 1455;
				local_variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 178, RULE_local_variable_initializer);
		try {
			State = 1461;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1458;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1459;
				array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1460;
				stackalloc_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(Context, State);
		EnterRule(_localctx, 180, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463;
			Match(CONST);
			State = 1464;
			type_();
			State = 1465;
			constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 182, RULE_if_body);
		try {
			State = 1469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1467;
				block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1468;
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 184, RULE_switch_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1472;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1471;
					switch_label();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1474;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1476;
			statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_guardContext case_guard() {
			return GetRuleContext<Case_guardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 186, RULE_switch_label);
		int _la;
		try {
			State = 1487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478;
				Match(CASE);
				State = 1479;
				expression();
				State = 1481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 1480;
					case_guard();
					}
				}

				State = 1483;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1485;
				Match(DEFAULT);
				State = 1486;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_guardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Case_guardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCase_guard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCase_guard(this);
		}
	}

	[RuleVersion(0)]
	public Case_guardContext case_guard() {
		Case_guardContext _localctx = new Case_guardContext(Context, State);
		EnterRule(_localctx, 188, RULE_case_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			Match(WHEN);
			State = 1490;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 190, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1492;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 192, RULE_for_initializer);
		int _la;
		try {
			State = 1506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1497;
				local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1498;
				expression();
				State = 1503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1499;
					Match(COMMA);
					State = 1500;
					expression();
					}
					}
					State = 1505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 194, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508;
			expression();
			State = 1513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1509;
				Match(COMMA);
				State = 1510;
				expression();
				}
				}
				State = 1515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 196, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 1527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1516;
				specific_catch_clause();
				State = 1520;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1517;
						specific_catch_clause();
						}
						} 
					}
					State = 1522;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				}
				State = 1524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1523;
					general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1526;
				general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1529;
			Match(CATCH);
			State = 1530;
			Match(OPEN_PARENS);
			State = 1531;
			class_type();
			State = 1533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (UNMANAGED - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 1532;
				identifier();
				}
			}

			State = 1535;
			Match(CLOSE_PARENS);
			State = 1537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1536;
				exception_filter();
				}
			}

			State = 1539;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_general_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541;
			Match(CATCH);
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1542;
				exception_filter();
				}
			}

			State = 1545;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_filterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Exception_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterException_filter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitException_filter(this);
		}
	}

	[RuleVersion(0)]
	public Exception_filterContext exception_filter() {
		Exception_filterContext _localctx = new Exception_filterContext(Context, State);
		EnterRule(_localctx, 202, RULE_exception_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547;
			Match(WHEN);
			State = 1548;
			Match(OPEN_PARENS);
			State = 1549;
			expression();
			State = 1550;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 204, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552;
			Match(FINALLY);
			State = 1553;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(Context, State);
		EnterRule(_localctx, 206, RULE_resource_acquisition);
		try {
			State = 1557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555;
				local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1556;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			Match(NAMESPACE);
			State = 1560;
			_localctx.qi = qualified_identifier();
			State = 1561;
			namespace_body();
			State = 1563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1562;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565;
			identifier();
			State = 1570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1566;
				Match(DOT);
				State = 1567;
				identifier();
				}
				}
				State = 1572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 212, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573;
			Match(OPEN_BRACE);
			State = 1575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1574;
				extern_alias_directives();
				}
				break;
			}
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 1577;
				using_directives();
				}
			}

			State = 1581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NAMESPACE - 65)) | (1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (STRUCT - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 1580;
				namespace_member_declarations();
				}
			}

			State = 1583;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(Context, State);
		EnterRule(_localctx, 214, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1585;
					extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1588;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(Context, State);
		EnterRule(_localctx, 216, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590;
			Match(EXTERN);
			State = 1591;
			Match(ALIAS);
			State = 1592;
			identifier();
			State = 1593;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(Context, State);
		EnterRule(_localctx, 218, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1595;
				using_directive();
				}
				}
				State = 1598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
	 
		public Using_directiveContext() { }
		public virtual void CopyFrom(Using_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingAliasDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public UsingAliasDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingAliasDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingAliasDirective(this);
		}
	}
	public partial class UsingNamespaceDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public UsingNamespaceDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDirective(this);
		}
	}
	public partial class UsingStaticDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public UsingStaticDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStaticDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStaticDirective(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 220, RULE_using_directive);
		try {
			State = 1615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				_localctx = new UsingAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1600;
				Match(USING);
				State = 1601;
				identifier();
				State = 1602;
				Match(ASSIGNMENT);
				State = 1603;
				namespace_or_type_name();
				State = 1604;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new UsingNamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1606;
				Match(USING);
				State = 1607;
				namespace_or_type_name();
				State = 1608;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new UsingStaticDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1610;
				Match(USING);
				State = 1611;
				Match(STATIC);
				State = 1612;
				namespace_or_type_name();
				State = 1613;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 222, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1617;
				namespace_member_declaration();
				}
				}
				State = 1620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NAMESPACE - 65)) | (1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (STRUCT - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_namespace_member_declaration);
		try {
			State = 1624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1622;
				namespace_declaration();
				}
				break;
			case ABSTRACT:
			case ASYNC:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1623;
				type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 226, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1626;
				attributes();
				}
			}

			State = 1630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1629;
				all_member_modifiers();
				}
				break;
			}
			State = 1637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 1632;
				class_definition();
				}
				break;
			case READONLY:
			case REF:
			case STRUCT:
				{
				State = 1633;
				struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 1634;
				interface_definition();
				}
				break;
			case ENUM:
				{
				State = 1635;
				enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 1636;
				delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(CSharpParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(Context, State);
		EnterRule(_localctx, 228, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639;
			identifier();
			State = 1640;
			Match(DOUBLE_COLON);
			State = 1641;
			identifier();
			State = 1643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1642;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 230, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645;
			Match(LT);
			State = 1646;
			type_parameter();
			State = 1651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1647;
				Match(COMMA);
				State = 1648;
				type_parameter();
				}
				}
				State = 1653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1654;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 232, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1656;
				attributes();
				}
			}

			State = 1659;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 234, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661;
			Match(COLON);
			State = 1662;
			class_type();
			State = 1667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1663;
				Match(COMMA);
				State = 1664;
				namespace_or_type_name();
				}
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(Context, State);
		EnterRule(_localctx, 236, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670;
			namespace_or_type_name();
			State = 1675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1671;
				Match(COMMA);
				State = 1672;
				namespace_or_type_name();
				}
				}
				State = 1677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(Context, State);
		EnterRule(_localctx, 238, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1678;
				type_parameter_constraints_clause();
				}
				}
				State = 1681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHERE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683;
			Match(WHERE);
			State = 1684;
			identifier();
			State = 1685;
			Match(COLON);
			State = 1686;
			type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(Context, State);
		EnterRule(_localctx, 242, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 1698;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1688;
				constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1689;
				primary_constraint();
				State = 1692;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1690;
					Match(COMMA);
					State = 1691;
					secondary_constraints();
					}
					break;
				}
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1694;
					Match(COMMA);
					State = 1695;
					constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMANAGED() { return GetToken(CSharpParser.UNMANAGED, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(Context, State);
		EnterRule(_localctx, 244, RULE_primary_constraint);
		int _la;
		try {
			State = 1707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1700;
				class_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1701;
				Match(CLASS);
				State = 1703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERR) {
					{
					State = 1702;
					Match(INTERR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1705;
				Match(STRUCT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1706;
				Match(UNMANAGED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(Context, State);
		EnterRule(_localctx, 246, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709;
			namespace_or_type_name();
			State = 1714;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1710;
					Match(COMMA);
					State = 1711;
					namespace_or_type_name();
					}
					} 
				}
				State = 1716;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(Context, State);
		EnterRule(_localctx, 248, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			Match(NEW);
			State = 1718;
			Match(OPEN_PARENS);
			State = 1719;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 250, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			Match(OPEN_BRACE);
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNMANAGED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0) || _la==OPEN_PARENS || _la==TILDE) {
				{
				State = 1722;
				class_member_declarations();
				}
			}

			State = 1725;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 252, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1727;
				class_member_declaration();
				}
				}
				State = 1730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNMANAGED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0) || _la==OPEN_PARENS || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructor_definitionContext destructor_definition() {
			return GetRuleContext<Destructor_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 254, RULE_class_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1732;
				attributes();
				}
			}

			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 1735;
				all_member_modifiers();
				}
				break;
			}
			State = 1740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case READONLY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				{
				State = 1738;
				common_member_declaration();
				}
				break;
			case TILDE:
				{
				State = 1739;
				destructor_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 256, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1742;
					all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 258, RULE_all_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (OVERRIDE - 66)) | (1L << (PARTIAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (PUBLIC - 66)) | (1L << (READONLY - 66)) | (1L << (SEALED - 66)) | (1L << (STATIC - 66)) | (1L << (UNSAFE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOLATILE - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 260, RULE_common_member_declaration);
		try {
			State = 1768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1749;
				constant_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750;
				typed_member_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1751;
				event_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1752;
				conversion_operator_declarator();
				State = 1758;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_BRACE:
				case SEMICOLON:
					{
					State = 1753;
					body();
					}
					break;
				case ASSIGNMENT:
					{
					State = 1754;
					right_arrow();
					State = 1755;
					throwable_expression();
					State = 1756;
					Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1760;
				constructor_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1761;
				Match(VOID);
				State = 1762;
				method_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1763;
				class_definition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1764;
				struct_definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1765;
				interface_definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1766;
				enum_definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1767;
				delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CSharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_declarationContext indexer_declaration() {
			return GetRuleContext<Indexer_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext property_declaration() {
			return GetRuleContext<Property_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 262, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				{
				State = 1770;
				Match(REF);
				}
				break;
			case 2:
				{
				State = 1771;
				Match(READONLY);
				State = 1772;
				Match(REF);
				}
				break;
			case 3:
				{
				State = 1773;
				Match(REF);
				State = 1774;
				Match(READONLY);
				}
				break;
			}
			State = 1777;
			type_();
			State = 1787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				{
				State = 1778;
				namespace_or_type_name();
				State = 1779;
				Match(DOT);
				State = 1780;
				indexer_declaration();
				}
				break;
			case 2:
				{
				State = 1782;
				method_declaration();
				}
				break;
			case 3:
				{
				State = 1783;
				property_declaration();
				}
				break;
			case 4:
				{
				State = 1784;
				indexer_declaration();
				}
				break;
			case 5:
				{
				State = 1785;
				operator_declaration();
				}
				break;
			case 6:
				{
				State = 1786;
				field_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(Context, State);
		EnterRule(_localctx, 264, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			constant_declarator();
			State = 1794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1790;
				Match(COMMA);
				State = 1791;
				constant_declarator();
				}
				}
				State = 1796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(Context, State);
		EnterRule(_localctx, 266, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797;
			identifier();
			State = 1798;
			Match(ASSIGNMENT);
			State = 1799;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 268, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801;
			variable_declarator();
			State = 1806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1802;
				Match(COMMA);
				State = 1803;
				variable_declarator();
				}
				}
				State = 1808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 270, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809;
			identifier();
			State = 1812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1810;
				Match(ASSIGNMENT);
				State = 1811;
				variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 272, RULE_variable_initializer);
		try {
			State = 1816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1814;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1815;
				array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 274, RULE_return_type);
		try {
			State = 1820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1818;
				type_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1819;
				Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 276, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822;
			namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 278, RULE_method_body);
		try {
			State = 1826;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1824;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1825;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 280, RULE_formal_parameter_list);
		int _la;
		try {
			State = 1834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1828;
				parameter_array();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1829;
				fixed_parameters();
				State = 1832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1830;
					Match(COMMA);
					State = 1831;
					parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 282, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			fixed_parameter();
			State = 1841;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1837;
					Match(COMMA);
					State = 1838;
					fixed_parameter();
					}
					} 
				}
				State = 1843;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 284, RULE_fixed_parameter);
		int _la;
		try {
			State = 1852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1844;
					attributes();
					}
				}

				State = 1848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (IN - 54)) | (1L << (OUT - 54)) | (1L << (REF - 54)) | (1L << (THIS - 54)))) != 0)) {
					{
					State = 1847;
					parameter_modifier();
					}
				}

				State = 1850;
				arg_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1851;
				Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_parameter_modifier);
		try {
			State = 1862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1854;
				Match(REF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1855;
				Match(OUT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1856;
				Match(IN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1857;
				Match(REF);
				State = 1858;
				Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1859;
				Match(IN);
				State = 1860;
				Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1861;
				Match(THIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(Context, State);
		EnterRule(_localctx, 288, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1864;
				attributes();
				}
			}

			State = 1867;
			Match(PARAMS);
			State = 1868;
			array_type();
			State = 1869;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 290, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1871;
				_localctx.attrs = attributes();
				}
			}

			State = 1875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)))) != 0)) {
				{
				State = 1874;
				_localctx.mods = accessor_modifier();
				}
			}

			State = 1887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 1877;
				Match(GET);
				State = 1878;
				accessor_body();
				State = 1880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERNAL || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (SET - 76)) | (1L << (OPEN_BRACKET - 76)))) != 0)) {
					{
					State = 1879;
					set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 1882;
				Match(SET);
				State = 1883;
				accessor_body();
				State = 1885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (OPEN_BRACKET - 76)))) != 0)) {
					{
					State = 1884;
					get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 292, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1889;
				attributes();
				}
			}

			State = 1893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)))) != 0)) {
				{
				State = 1892;
				accessor_modifier();
				}
			}

			State = 1895;
			Match(GET);
			State = 1896;
			accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 294, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1898;
				attributes();
				}
			}

			State = 1902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)))) != 0)) {
				{
				State = 1901;
				accessor_modifier();
				}
			}

			State = 1904;
			Match(SET);
			State = 1905;
			accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(Context, State);
		EnterRule(_localctx, 296, RULE_accessor_modifier);
		try {
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1907;
				Match(PROTECTED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1908;
				Match(INTERNAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1909;
				Match(PRIVATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1910;
				Match(PROTECTED);
				State = 1911;
				Match(INTERNAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1912;
				Match(INTERNAL);
				State = 1913;
				Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(Context, State);
		EnterRule(_localctx, 298, RULE_accessor_body);
		try {
			State = 1918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1916;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1917;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 300, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1920;
				attributes();
				}
			}

			State = 1931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 1923;
				Match(ADD);
				State = 1924;
				block();
				State = 1925;
				remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 1927;
				Match(REMOVE);
				State = 1928;
				block();
				State = 1929;
				add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 302, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1933;
				attributes();
				}
			}

			State = 1936;
			Match(ADD);
			State = 1937;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 304, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1939;
				attributes();
				}
			}

			State = 1942;
			Match(REMOVE);
			State = 1943;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CSharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CSharpParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(CSharpParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(CSharpParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(CSharpParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CSharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(CSharpParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(CSharpParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(CSharpParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(CSharpParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharpParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(CSharpParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(CSharpParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(CSharpParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(CSharpParser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(Context, State);
		EnterRule(_localctx, 306, RULE_overloadable_operator);
		try {
			State = 1967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1945;
				Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1946;
				Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1947;
				Match(BANG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1948;
				Match(TILDE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1949;
				Match(OP_INC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1950;
				Match(OP_DEC);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1951;
				Match(TRUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1952;
				Match(FALSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1953;
				Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1954;
				Match(DIV);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1955;
				Match(PERCENT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1956;
				Match(AMP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1957;
				Match(BITWISE_OR);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1958;
				Match(CARET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1959;
				Match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1960;
				right_shift();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1961;
				Match(OP_EQ);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1962;
				Match(OP_NE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1963;
				Match(GT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1964;
				Match(LT);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1965;
				Match(OP_GE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1966;
				Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 308, RULE_conversion_operator_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1969;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1970;
			Match(OPERATOR);
			State = 1971;
			type_();
			State = 1972;
			Match(OPEN_PARENS);
			State = 1973;
			arg_declaration();
			State = 1974;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 310, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1976;
			Match(COLON);
			State = 1977;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1978;
			Match(OPEN_PARENS);
			State = 1980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (VOID - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
				{
				State = 1979;
				argument_list();
				}
			}

			State = 1982;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 312, RULE_body);
		try {
			State = 1986;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1984;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1985;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(Context, State);
		EnterRule(_localctx, 314, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			Match(COLON);
			State = 1989;
			interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 316, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			Match(OPEN_BRACE);
			State = 1995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ABSTRACT - 9)) | (1L << (ADD - 9)) | (1L << (ALIAS - 9)) | (1L << (ARGLIST - 9)) | (1L << (ASCENDING - 9)) | (1L << (ASYNC - 9)) | (1L << (AWAIT - 9)) | (1L << (BOOL - 9)) | (1L << (BY - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (CLASS - 9)) | (1L << (CONST - 9)) | (1L << (DECIMAL - 9)) | (1L << (DELEGATE - 9)) | (1L << (DESCENDING - 9)) | (1L << (DOUBLE - 9)) | (1L << (DYNAMIC - 9)) | (1L << (ENUM - 9)) | (1L << (EQUALS - 9)) | (1L << (EVENT - 9)) | (1L << (EXPLICIT - 9)) | (1L << (EXTERN - 9)) | (1L << (FIXED - 9)) | (1L << (FLOAT - 9)) | (1L << (FROM - 9)) | (1L << (GET - 9)) | (1L << (GROUP - 9)) | (1L << (IMPLICIT - 9)) | (1L << (INT - 9)) | (1L << (INTERFACE - 9)) | (1L << (INTERNAL - 9)) | (1L << (INTO - 9)) | (1L << (JOIN - 9)) | (1L << (LET - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (NEW - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (ORDERBY - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (OVERRIDE - 73)) | (1L << (PARTIAL - 73)) | (1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (READONLY - 73)) | (1L << (REF - 73)) | (1L << (REMOVE - 73)) | (1L << (SBYTE - 73)) | (1L << (SEALED - 73)) | (1L << (SELECT - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (STATIC - 73)) | (1L << (STRING - 73)) | (1L << (STRUCT - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (UNMANAGED - 73)) | (1L << (UNSAFE - 73)) | (1L << (USHORT - 73)) | (1L << (VAR - 73)) | (1L << (VIRTUAL - 73)) | (1L << (VOID - 73)) | (1L << (VOLATILE - 73)) | (1L << (WHEN - 73)) | (1L << (WHERE - 73)) | (1L << (YIELD - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)) | (1L << (OPEN_PARENS - 73)))) != 0)) {
				{
				{
				State = 1992;
				struct_member_declaration();
				}
				}
				State = 1997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1998;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(Context, State);
		EnterRule(_localctx, 318, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2000;
				attributes();
				}
			}

			State = 2004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				{
				State = 2003;
				all_member_modifiers();
				}
				break;
			}
			State = 2016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case READONLY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				{
				State = 2006;
				common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 2007;
				Match(FIXED);
				State = 2008;
				type_();
				State = 2010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2009;
					fixed_size_buffer_declarator();
					}
					}
					State = 2012;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (UNMANAGED - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)))) != 0) );
				State = 2014;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(CSharpParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(CSharpParser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 320, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			base_type();
			State = 2026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 2019;
					_la = TokenStream.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 2024;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2025;
				rank_specifier();
				}
				}
				State = 2028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (OPEN_BRACKET - 127)) | (1L << (STAR - 127)) | (1L << (INTERR - 127)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 322, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030;
			Match(OPEN_BRACKET);
			State = 2034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2031;
				Match(COMMA);
				}
				}
				State = 2036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2037;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 324, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039;
			Match(OPEN_BRACE);
			State = 2051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)) | (1L << (OPEN_BRACE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
				{
				State = 2040;
				variable_initializer();
				State = 2045;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2041;
						Match(COMMA);
						State = 2042;
						variable_initializer();
						}
						} 
					}
					State = 2047;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
				}
				State = 2049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2048;
					Match(COMMA);
					}
				}

				}
			}

			State = 2053;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameterContext[] variant_type_parameter() {
			return GetRuleContexts<Variant_type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameterContext variant_type_parameter(int i) {
			return GetRuleContext<Variant_type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 326, RULE_variant_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055;
			Match(LT);
			State = 2056;
			variant_type_parameter();
			State = 2061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2057;
				Match(COMMA);
				State = 2058;
				variant_type_parameter();
				}
				}
				State = 2063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2064;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variance_annotationContext variance_annotation() {
			return GetRuleContext<Variance_annotationContext>(0);
		}
		public Variant_type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameterContext variant_type_parameter() {
		Variant_type_parameterContext _localctx = new Variant_type_parameterContext(Context, State);
		EnterRule(_localctx, 328, RULE_variant_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2066;
				attributes();
				}
			}

			State = 2070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN || _la==OUT) {
				{
				State = 2069;
				variance_annotation();
				}
			}

			State = 2072;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(Context, State);
		EnterRule(_localctx, 330, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(Context, State);
		EnterRule(_localctx, 332, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076;
			Match(COLON);
			State = 2077;
			interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 334, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			Match(OPEN_BRACE);
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (EVENT - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (NEW - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PARTIAL - 75)) | (1L << (READONLY - 75)) | (1L << (REF - 75)) | (1L << (REMOVE - 75)) | (1L << (SBYTE - 75)) | (1L << (SELECT - 75)) | (1L << (SET - 75)) | (1L << (SHORT - 75)) | (1L << (STRING - 75)) | (1L << (UINT - 75)) | (1L << (ULONG - 75)) | (1L << (UNMANAGED - 75)) | (1L << (UNSAFE - 75)) | (1L << (USHORT - 75)) | (1L << (VAR - 75)) | (1L << (VOID - 75)) | (1L << (WHEN - 75)) | (1L << (WHERE - 75)) | (1L << (YIELD - 75)) | (1L << (IDENTIFIER - 75)) | (1L << (OPEN_BRACKET - 75)) | (1L << (OPEN_PARENS - 75)))) != 0)) {
				{
				{
				State = 2080;
				interface_member_declaration();
				}
				}
				State = 2085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2086;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 336, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2088;
				attributes();
				}
			}

			State = 2092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW) {
				{
				State = 2091;
				Match(NEW);
				}
			}

			State = 2157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				{
				State = 2095;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 2094;
					Match(UNSAFE);
					}
				}

				State = 2102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 2097;
					Match(REF);
					}
					break;
				case 2:
					{
					State = 2098;
					Match(REF);
					State = 2099;
					Match(READONLY);
					}
					break;
				case 3:
					{
					State = 2100;
					Match(READONLY);
					State = 2101;
					Match(REF);
					}
					break;
				}
				State = 2104;
				type_();
				State = 2132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 2105;
					identifier();
					State = 2107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2106;
						type_parameter_list();
						}
					}

					State = 2109;
					Match(OPEN_PARENS);
					State = 2111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (PARAMS - 74)) | (1L << (PARTIAL - 74)) | (1L << (REF - 74)) | (1L << (REMOVE - 74)) | (1L << (SBYTE - 74)) | (1L << (SELECT - 74)) | (1L << (SET - 74)) | (1L << (SHORT - 74)) | (1L << (STRING - 74)) | (1L << (THIS - 74)) | (1L << (UINT - 74)) | (1L << (ULONG - 74)) | (1L << (UNMANAGED - 74)) | (1L << (USHORT - 74)) | (1L << (VAR - 74)) | (1L << (VOID - 74)) | (1L << (WHEN - 74)) | (1L << (WHERE - 74)) | (1L << (YIELD - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (OPEN_BRACKET - 74)) | (1L << (OPEN_PARENS - 74)))) != 0)) {
						{
						State = 2110;
						formal_parameter_list();
						}
					}

					State = 2113;
					Match(CLOSE_PARENS);
					State = 2115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE) {
						{
						State = 2114;
						type_parameter_constraints_clauses();
						}
					}

					State = 2117;
					Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 2119;
					identifier();
					State = 2120;
					Match(OPEN_BRACE);
					State = 2121;
					interface_accessors();
					State = 2122;
					Match(CLOSE_BRACE);
					}
					break;
				case 3:
					{
					State = 2124;
					Match(THIS);
					State = 2125;
					Match(OPEN_BRACKET);
					State = 2126;
					formal_parameter_list();
					State = 2127;
					Match(CLOSE_BRACKET);
					State = 2128;
					Match(OPEN_BRACE);
					State = 2129;
					interface_accessors();
					State = 2130;
					Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 2134;
					Match(UNSAFE);
					}
				}

				State = 2137;
				Match(VOID);
				State = 2138;
				identifier();
				State = 2140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2139;
					type_parameter_list();
					}
				}

				State = 2142;
				Match(OPEN_PARENS);
				State = 2144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (PARAMS - 74)) | (1L << (PARTIAL - 74)) | (1L << (REF - 74)) | (1L << (REMOVE - 74)) | (1L << (SBYTE - 74)) | (1L << (SELECT - 74)) | (1L << (SET - 74)) | (1L << (SHORT - 74)) | (1L << (STRING - 74)) | (1L << (THIS - 74)) | (1L << (UINT - 74)) | (1L << (ULONG - 74)) | (1L << (UNMANAGED - 74)) | (1L << (USHORT - 74)) | (1L << (VAR - 74)) | (1L << (VOID - 74)) | (1L << (WHEN - 74)) | (1L << (WHERE - 74)) | (1L << (YIELD - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (OPEN_BRACKET - 74)) | (1L << (OPEN_PARENS - 74)))) != 0)) {
					{
					State = 2143;
					formal_parameter_list();
					}
				}

				State = 2146;
				Match(CLOSE_PARENS);
				State = 2148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2147;
					type_parameter_constraints_clauses();
					}
				}

				State = 2150;
				Match(SEMICOLON);
				}
				break;
			case 3:
				{
				State = 2152;
				Match(EVENT);
				State = 2153;
				type_();
				State = 2154;
				identifier();
				State = 2155;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(Context, State);
		EnterRule(_localctx, 338, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2159;
				attributes();
				}
			}

			State = 2180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 2162;
				Match(GET);
				State = 2163;
				Match(SEMICOLON);
				State = 2169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 2165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 2164;
						attributes();
						}
					}

					State = 2167;
					Match(SET);
					State = 2168;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 2171;
				Match(SET);
				State = 2172;
				Match(SEMICOLON);
				State = 2178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 2174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 2173;
						attributes();
						}
					}

					State = 2176;
					Match(GET);
					State = 2177;
					Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(Context, State);
		EnterRule(_localctx, 340, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2182;
			Match(COLON);
			State = 2183;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 342, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2185;
			Match(OPEN_BRACE);
			State = 2197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (UNMANAGED - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 2186;
				enum_member_declaration();
				State = 2191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2187;
						Match(COMMA);
						State = 2188;
						enum_member_declaration();
						}
						} 
					}
					State = 2193;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
				}
				State = 2195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2194;
					Match(COMMA);
					}
				}

				}
			}

			State = 2199;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 344, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2201;
				attributes();
				}
			}

			State = 2204;
			identifier();
			State = 2207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2205;
				Match(ASSIGNMENT);
				State = 2206;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(Context, State);
		EnterRule(_localctx, 346, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			Match(OPEN_BRACKET);
			State = 2210;
			global_attribute_target();
			State = 2211;
			Match(COLON);
			State = 2212;
			attribute_list();
			State = 2214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2213;
				Match(COMMA);
				}
			}

			State = 2216;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(Context, State);
		EnterRule(_localctx, 348, RULE_global_attribute_target);
		try {
			State = 2220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2218;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2219;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 350, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2222;
				attribute_section();
				}
				}
				State = 2225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(Context, State);
		EnterRule(_localctx, 352, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2227;
			Match(OPEN_BRACKET);
			State = 2231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2228;
				attribute_target();
				State = 2229;
				Match(COLON);
				}
				break;
			}
			State = 2233;
			attribute_list();
			State = 2235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2234;
				Match(COMMA);
				}
			}

			State = 2237;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(Context, State);
		EnterRule(_localctx, 354, RULE_attribute_target);
		try {
			State = 2241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2239;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2240;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 356, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2243;
			attribute();
			State = 2248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2244;
					Match(COMMA);
					State = 2245;
					attribute();
					}
					} 
				}
				State = 2250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argumentContext[] attribute_argument() {
			return GetRuleContexts<Attribute_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argumentContext attribute_argument(int i) {
			return GetRuleContext<Attribute_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 358, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2251;
			namespace_or_type_name();
			State = 2264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 2252;
				Match(OPEN_PARENS);
				State = 2261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 2253;
					attribute_argument();
					State = 2258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2254;
						Match(COMMA);
						State = 2255;
						attribute_argument();
						}
						}
						State = 2260;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2263;
				Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public Attribute_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_argument(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentContext attribute_argument() {
		Attribute_argumentContext _localctx = new Attribute_argumentContext(Context, State);
		EnterRule(_localctx, 360, RULE_attribute_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				{
				State = 2266;
				identifier();
				State = 2267;
				Match(COLON);
				}
				break;
			}
			State = 2271;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(CSharpParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(CSharpParser.INTERR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(Context, State);
		EnterRule(_localctx, 362, RULE_pointer_type);
		int _la;
		try {
			State = 2288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2275;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOL:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SBYTE:
				case SHORT:
				case UINT:
				case ULONG:
				case USHORT:
					{
					State = 2273;
					simple_type();
					}
					break;
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case STRING:
				case UNMANAGED:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2274;
					class_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 2279;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 2277;
						rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2278;
						Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2284;
				Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2286;
				Match(VOID);
				State = 2287;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(Context, State);
		EnterRule(_localctx, 364, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290;
			fixed_pointer_declarator();
			State = 2295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2291;
				Match(COMMA);
				State = 2292;
				fixed_pointer_declarator();
				}
				}
				State = 2297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(Context, State);
		EnterRule(_localctx, 366, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2298;
			identifier();
			State = 2299;
			Match(ASSIGNMENT);
			State = 2300;
			fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(CSharpParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(Context, State);
		EnterRule(_localctx, 368, RULE_fixed_pointer_initializer);
		try {
			State = 2307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2302;
					Match(AMP);
					}
					break;
				}
				State = 2305;
				expression();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2306;
				stackalloc_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(Context, State);
		EnterRule(_localctx, 370, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2309;
			identifier();
			State = 2310;
			Match(OPEN_BRACKET);
			State = 2311;
			expression();
			State = 2312;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stackalloc_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public Stackalloc_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackalloc_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStackalloc_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStackalloc_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Stackalloc_initializerContext stackalloc_initializer() {
		Stackalloc_initializerContext _localctx = new Stackalloc_initializerContext(Context, State);
		EnterRule(_localctx, 372, RULE_stackalloc_initializer);
		int _la;
		try {
			int _alt;
			State = 2343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2314;
				Match(STACKALLOC);
				State = 2315;
				type_();
				State = 2316;
				Match(OPEN_BRACKET);
				State = 2317;
				expression();
				State = 2318;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2320;
				Match(STACKALLOC);
				State = 2322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PARTIAL - 75)) | (1L << (REMOVE - 75)) | (1L << (SBYTE - 75)) | (1L << (SELECT - 75)) | (1L << (SET - 75)) | (1L << (SHORT - 75)) | (1L << (STRING - 75)) | (1L << (UINT - 75)) | (1L << (ULONG - 75)) | (1L << (UNMANAGED - 75)) | (1L << (USHORT - 75)) | (1L << (VAR - 75)) | (1L << (VOID - 75)) | (1L << (WHEN - 75)) | (1L << (WHERE - 75)) | (1L << (YIELD - 75)) | (1L << (IDENTIFIER - 75)) | (1L << (OPEN_PARENS - 75)))) != 0)) {
					{
					State = 2321;
					type_();
					}
				}

				State = 2324;
				Match(OPEN_BRACKET);
				State = 2326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
					{
					State = 2325;
					expression();
					}
				}

				State = 2328;
				Match(CLOSE_BRACKET);
				State = 2329;
				Match(OPEN_BRACE);
				State = 2330;
				expression();
				State = 2335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,293,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2331;
						Match(COMMA);
						State = 2332;
						expression();
						}
						} 
					}
					State = 2337;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,293,Context);
				}
				State = 2339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2338;
					Match(COMMA);
					}
				}

				State = 2341;
				Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 374, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			_localctx.first = Match(ASSIGNMENT);
			State = 2346;
			_localctx.second = Match(GT);
			State = 2347;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(CSharpParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(CSharpParser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 376, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349;
			_localctx.first = Match(GT);
			State = 2350;
			_localctx.second = Match(GT);
			State = 2351;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(CSharpParser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 378, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2353;
			_localctx.first = Match(GT);
			State = 2354;
			_localctx.second = Match(OP_GE);
			State = 2355;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharpParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(CSharpParser.HEX_INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(CSharpParser.BIN_INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(CSharpParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharpParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(CSharpParser.NULL_, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_literal);
		try {
			State = 2365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2357;
				boolean_literal();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2358;
				string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2359;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2360;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2361;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2362;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2363;
				Match(CHARACTER_LITERAL);
				}
				break;
			case NULL_:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2364;
				Match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 382, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_stringContext interpolated_regular_string() {
			return GetRuleContext<Interpolated_regular_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
			return GetRuleContext<Interpolated_verbatium_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(CSharpParser.REGULAR_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(CSharpParser.VERBATIUM_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 384, RULE_string_literal);
		try {
			State = 2373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2369;
				interpolated_regular_string();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2370;
				interpolated_verbatium_string();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2371;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2372;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_string_partContext[] interpolated_regular_string_part() {
			return GetRuleContexts<Interpolated_regular_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_string_partContext interpolated_regular_string_part(int i) {
			return GetRuleContext<Interpolated_regular_string_partContext>(i);
		}
		public Interpolated_regular_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_stringContext interpolated_regular_string() {
		Interpolated_regular_stringContext _localctx = new Interpolated_regular_stringContext(Context, State);
		EnterRule(_localctx, 386, RULE_interpolated_regular_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2375;
			Match(INTERPOLATED_REGULAR_STRING_START);
			State = 2379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)) | (1L << (DOUBLE_CURLY_INSIDE - 129)) | (1L << (REGULAR_CHAR_INSIDE - 129)) | (1L << (REGULAR_STRING_INSIDE - 129)))) != 0)) {
				{
				{
				State = 2376;
				interpolated_regular_string_part();
				}
				}
				State = 2381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2382;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_string_partContext[] interpolated_verbatium_string_part() {
			return GetRuleContexts<Interpolated_verbatium_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part(int i) {
			return GetRuleContext<Interpolated_verbatium_string_partContext>(i);
		}
		public Interpolated_verbatium_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
		Interpolated_verbatium_stringContext _localctx = new Interpolated_verbatium_stringContext(Context, State);
		EnterRule(_localctx, 388, RULE_interpolated_verbatium_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 2388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)) | (1L << (DOUBLE_CURLY_INSIDE - 129)) | (1L << (VERBATIUM_DOUBLE_QUOTE_INSIDE - 129)) | (1L << (VERBATIUM_INSIDE_STRING - 129)))) != 0)) {
				{
				{
				State = 2385;
				interpolated_verbatium_string_part();
				}
				}
				State = 2390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2391;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(CSharpParser.REGULAR_CHAR_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(CSharpParser.REGULAR_STRING_INSIDE, 0); }
		public Interpolated_regular_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string_part(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_string_partContext interpolated_regular_string_part() {
		Interpolated_regular_string_partContext _localctx = new Interpolated_regular_string_partContext(Context, State);
		EnterRule(_localctx, 390, RULE_interpolated_regular_string_part);
		try {
			State = 2397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2393;
				interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2394;
				Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2395;
				Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2396;
				Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0); }
		public Interpolated_verbatium_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string_part(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part() {
		Interpolated_verbatium_string_partContext _localctx = new Interpolated_verbatium_string_partContext(Context, State);
		EnterRule(_localctx, 392, RULE_interpolated_verbatium_string_part);
		try {
			State = 2403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2399;
				interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2400;
				Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2401;
				Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2402;
				Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_string_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORMAT_STRING() { return GetTokens(CSharpParser.FORMAT_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(CSharpParser.FORMAT_STRING, i);
		}
		public Interpolated_string_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_string_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_string_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_string_expression(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_string_expressionContext interpolated_string_expression() {
		Interpolated_string_expressionContext _localctx = new Interpolated_string_expressionContext(Context, State);
		EnterRule(_localctx, 394, RULE_interpolated_string_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405;
			expression();
			State = 2410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2406;
				Match(COMMA);
				State = 2407;
				expression();
				}
				}
				State = 2412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2413;
				Match(COLON);
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2414;
					Match(FORMAT_STRING);
					}
					}
					State = 2417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(CSharpParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(CSharpParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(CSharpParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMANAGED() { return GetToken(CSharpParser.UNMANAGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 396, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NAMESPACE - 65)) | (1L << (NEW - 65)) | (1L << (NULL_ - 65)) | (1L << (OBJECT - 65)) | (1L << (OPERATOR - 65)) | (1L << (OUT - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARAMS - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (RETURN - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STACKALLOC - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (SWITCH - 65)) | (1L << (THIS - 65)) | (1L << (THROW - 65)) | (1L << (TRUE - 65)) | (1L << (TRY - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHILE - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 398, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423;
			Match(CLASS);
			State = 2424;
			identifier();
			State = 2426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2425;
				type_parameter_list();
				}
			}

			State = 2429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2428;
				class_base();
				}
			}

			State = 2432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2431;
				type_parameter_constraints_clauses();
				}
			}

			State = 2434;
			class_body();
			State = 2436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2435;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 400, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READONLY || _la==REF) {
				{
				State = 2438;
				_la = TokenStream.LA(1);
				if ( !(_la==READONLY || _la==REF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2441;
			Match(STRUCT);
			State = 2442;
			identifier();
			State = 2444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2443;
				type_parameter_list();
				}
			}

			State = 2447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2446;
				struct_interfaces();
				}
			}

			State = 2450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2449;
				type_parameter_constraints_clauses();
				}
			}

			State = 2452;
			struct_body();
			State = 2454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2453;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(Context, State);
		EnterRule(_localctx, 402, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2456;
			Match(INTERFACE);
			State = 2457;
			identifier();
			State = 2459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2458;
				variant_type_parameter_list();
				}
			}

			State = 2462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2461;
				interface_base();
				}
			}

			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2464;
				type_parameter_constraints_clauses();
				}
			}

			State = 2467;
			class_body();
			State = 2469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2468;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 404, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2471;
			Match(ENUM);
			State = 2472;
			identifier();
			State = 2474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2473;
				enum_base();
				}
			}

			State = 2476;
			enum_body();
			State = 2478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2477;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(Context, State);
		EnterRule(_localctx, 406, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2480;
			Match(DELEGATE);
			State = 2481;
			return_type();
			State = 2482;
			identifier();
			State = 2484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2483;
				variant_type_parameter_list();
				}
			}

			State = 2486;
			Match(OPEN_PARENS);
			State = 2488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (PARAMS - 74)) | (1L << (PARTIAL - 74)) | (1L << (REF - 74)) | (1L << (REMOVE - 74)) | (1L << (SBYTE - 74)) | (1L << (SELECT - 74)) | (1L << (SET - 74)) | (1L << (SHORT - 74)) | (1L << (STRING - 74)) | (1L << (THIS - 74)) | (1L << (UINT - 74)) | (1L << (ULONG - 74)) | (1L << (UNMANAGED - 74)) | (1L << (USHORT - 74)) | (1L << (VAR - 74)) | (1L << (VOID - 74)) | (1L << (WHEN - 74)) | (1L << (WHERE - 74)) | (1L << (YIELD - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (OPEN_BRACKET - 74)) | (1L << (OPEN_PARENS - 74)))) != 0)) {
				{
				State = 2487;
				formal_parameter_list();
				}
			}

			State = 2490;
			Match(CLOSE_PARENS);
			State = 2492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2491;
				type_parameter_constraints_clauses();
				}
			}

			State = 2494;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 408, RULE_event_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			Match(EVENT);
			State = 2497;
			type_();
			State = 2506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,323,Context) ) {
			case 1:
				{
				State = 2498;
				variable_declarators();
				State = 2499;
				Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 2501;
				member_name();
				State = 2502;
				Match(OPEN_BRACE);
				State = 2503;
				event_accessor_declarations();
				State = 2504;
				Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 410, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508;
			variable_declarators();
			State = 2509;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 412, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2511;
			member_name();
			State = 2525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2512;
				Match(OPEN_BRACE);
				State = 2513;
				accessor_declarations();
				State = 2514;
				Match(CLOSE_BRACE);
				State = 2519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2515;
					Match(ASSIGNMENT);
					State = 2516;
					variable_initializer();
					State = 2517;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case ASSIGNMENT:
				{
				State = 2521;
				right_arrow();
				State = 2522;
				throwable_expression();
				State = 2523;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 414, RULE_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527;
			Match(CONST);
			State = 2528;
			type_();
			State = 2529;
			constant_declarators();
			State = 2530;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(Context, State);
		EnterRule(_localctx, 416, RULE_indexer_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2532;
			Match(THIS);
			State = 2533;
			Match(OPEN_BRACKET);
			State = 2534;
			formal_parameter_list();
			State = 2535;
			Match(CLOSE_BRACKET);
			State = 2544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2536;
				Match(OPEN_BRACE);
				State = 2537;
				accessor_declarations();
				State = 2538;
				Match(CLOSE_BRACE);
				}
				break;
			case ASSIGNMENT:
				{
				State = 2540;
				right_arrow();
				State = 2541;
				throwable_expression();
				State = 2542;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(CSharpParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(Context, State);
		EnterRule(_localctx, 418, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2546;
			Match(TILDE);
			State = 2547;
			identifier();
			State = 2548;
			Match(OPEN_PARENS);
			State = 2549;
			Match(CLOSE_PARENS);
			State = 2550;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 420, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2552;
			identifier();
			State = 2553;
			Match(OPEN_PARENS);
			State = 2555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (PARAMS - 74)) | (1L << (PARTIAL - 74)) | (1L << (REF - 74)) | (1L << (REMOVE - 74)) | (1L << (SBYTE - 74)) | (1L << (SELECT - 74)) | (1L << (SET - 74)) | (1L << (SHORT - 74)) | (1L << (STRING - 74)) | (1L << (THIS - 74)) | (1L << (UINT - 74)) | (1L << (ULONG - 74)) | (1L << (UNMANAGED - 74)) | (1L << (USHORT - 74)) | (1L << (VAR - 74)) | (1L << (VOID - 74)) | (1L << (WHEN - 74)) | (1L << (WHERE - 74)) | (1L << (YIELD - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (OPEN_BRACKET - 74)) | (1L << (OPEN_PARENS - 74)))) != 0)) {
				{
				State = 2554;
				formal_parameter_list();
				}
			}

			State = 2557;
			Match(CLOSE_PARENS);
			State = 2559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2558;
				constructor_initializer();
				}
			}

			State = 2561;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 422, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2563;
			method_member_name();
			State = 2565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2564;
				type_parameter_list();
				}
			}

			State = 2567;
			Match(OPEN_PARENS);
			State = 2569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (ASYNC - 10)) | (1L << (AWAIT - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (DECIMAL - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (IN - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NAMEOF - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (OUT - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (PARAMS - 74)) | (1L << (PARTIAL - 74)) | (1L << (REF - 74)) | (1L << (REMOVE - 74)) | (1L << (SBYTE - 74)) | (1L << (SELECT - 74)) | (1L << (SET - 74)) | (1L << (SHORT - 74)) | (1L << (STRING - 74)) | (1L << (THIS - 74)) | (1L << (UINT - 74)) | (1L << (ULONG - 74)) | (1L << (UNMANAGED - 74)) | (1L << (USHORT - 74)) | (1L << (VAR - 74)) | (1L << (VOID - 74)) | (1L << (WHEN - 74)) | (1L << (WHERE - 74)) | (1L << (YIELD - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (OPEN_BRACKET - 74)) | (1L << (OPEN_PARENS - 74)))) != 0)) {
				{
				State = 2568;
				formal_parameter_list();
				}
			}

			State = 2571;
			Match(CLOSE_PARENS);
			State = 2573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2572;
				type_parameter_constraints_clauses();
				}
			}

			State = 2580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2575;
				method_body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2576;
				right_arrow();
				State = 2577;
				throwable_expression();
				State = 2578;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(CSharpParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 424, RULE_method_member_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				{
				State = 2582;
				identifier();
				}
				break;
			case 2:
				{
				State = 2583;
				identifier();
				State = 2584;
				Match(DOUBLE_COLON);
				State = 2585;
				identifier();
				}
				break;
			}
			State = 2596;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2590;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2589;
						type_argument_list();
						}
					}

					State = 2592;
					Match(DOT);
					State = 2593;
					identifier();
					}
					} 
				}
				State = 2598;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext[] arg_declaration() {
			return GetRuleContexts<Arg_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration(int i) {
			return GetRuleContext<Arg_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(CSharpParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(CSharpParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(Context, State);
		EnterRule(_localctx, 426, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599;
			Match(OPERATOR);
			State = 2600;
			overloadable_operator();
			State = 2601;
			Match(OPEN_PARENS);
			State = 2603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 2602;
				Match(IN);
				}
			}

			State = 2605;
			arg_declaration();
			State = 2611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2606;
				Match(COMMA);
				State = 2608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 2607;
					Match(IN);
					}
				}

				State = 2610;
				arg_declaration();
				}
			}

			State = 2613;
			Match(CLOSE_PARENS);
			State = 2619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2614;
				body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2615;
				right_arrow();
				State = 2616;
				throwable_expression();
				State = 2617;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(Context, State);
		EnterRule(_localctx, 428, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2621;
			type_();
			State = 2622;
			identifier();
			State = 2625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2623;
				Match(ASSIGNMENT);
				State = 2624;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 430, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2627;
			Match(OPEN_PARENS);
			State = 2629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (VOID - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
				{
				State = 2628;
				argument_list();
				}
			}

			State = 2631;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2633;
			Match(OPEN_PARENS);
			State = 2635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (NEW - 64)) | (1L << (NULL_ - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (USHORT - 64)) | (1L << (VAR - 64)) | (1L << (VOID - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OPEN_PARENS - 129)) | (1L << (PLUS - 129)) | (1L << (MINUS - 129)) | (1L << (STAR - 129)) | (1L << (AMP - 129)) | (1L << (CARET - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)) | (1L << (OP_RANGE - 129)))) != 0)) {
				{
				State = 2634;
				argument_list();
				}
			}

			State = 2637;
			Match(CLOSE_PARENS);
			State = 2639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				{
				State = 2638;
				object_or_collection_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMANAGED() { return GetToken(CSharpParser.UNMANAGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 434, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2641;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMEOF - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (PARTIAL - 64)) | (1L << (REMOVE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (UNMANAGED - 64)) | (1L << (VAR - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 86: return local_variable_declaration_sempred((Local_variable_declarationContext)_localctx, predIndex);
		case 187: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 188: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 189: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool local_variable_declaration_sempred(Local_variable_declarationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  this.IsLocalVariableDeclaration() ;
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC8', '\xA56', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x3', '\x2', '\x5', '\x2', 
		'\x1B8', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1BB', '\n', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x1BE', '\n', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x1C1', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1C4', '\v', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x1C7', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1CD', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1D0', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D5', '\n', '\x3', '\a', 
		'\x3', '\x1D7', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1DA', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x1E0', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x1E3', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x1EA', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x6', '\x6', '\x1F0', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\x1F1', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x1F8', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x1FC', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x201', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x20B', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x211', '\n', '\r', '\f', '\r', '\xE', '\r', '\x214', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\x21B', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x21E', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x223', 
		'\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x226', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x22A', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x232', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x237', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x241', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x24E', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x256', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x25C', '\n', '\x15', '\x5', '\x15', '\x25E', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x263', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x266', '\v', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\x26B', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\x26E', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\a', '\x18', '\x273', '\n', '\x18', '\f', '\x18', '\xE', '\x18', 
		'\x276', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x27B', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x27E', '\v', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x283', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x286', '\v', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x28B', '\n', '\x1B', 
		'\f', '\x1B', '\xE', '\x1B', '\x28E', '\v', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x297', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x29A', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x29F', '\n', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x2A2', '\n', 
		'\x1D', '\f', '\x1D', '\xE', '\x1D', '\x2A5', '\v', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x2AA', '\n', '\x1E', '\f', 
		'\x1E', '\xE', '\x1E', '\x2AD', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\a', '\x1F', '\x2B2', '\n', '\x1F', '\f', '\x1F', '\xE', 
		'\x1F', '\x2B5', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x2BC', '\n', ' ', '\x5', ' ', '\x2BE', 
		'\n', ' ', '\x3', ' ', '\x5', ' ', '\x2C1', '\n', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\a', '!', '\x2C6', '\n', '!', '\f', '!', '\xE', '!', 
		'\x2C9', '\v', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x2CD', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x2D4', '\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x2D8', 
		'\n', '#', '\x5', '#', '\x2DA', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x2F6', '\n', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x2FA', 
		'\n', '%', '\x3', '%', '\a', '%', '\x2FD', '\n', '%', '\f', '%', '\xE', 
		'%', '\x300', '\v', '%', '\x3', '%', '\x5', '%', '\x303', '\n', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x30B', '\n', '%', '\x3', '%', '\x5', '%', '\x30E', '\n', '%', '\x3', 
		'%', '\a', '%', '\x311', '\n', '%', '\f', '%', '\xE', '%', '\x314', '\v', 
		'%', '\x3', '%', '\x5', '%', '\x317', '\n', '%', '\a', '%', '\x319', '\n', 
		'%', '\f', '%', '\xE', '%', '\x31C', '\v', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x321', '\n', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x32F', '\n', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x335', '\n', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x33F', '\n', '&', '\f', '&', 
		'\xE', '&', '\x342', '\v', '&', '\x3', '&', '\x5', '&', '\x345', '\n', 
		'&', '\x3', '&', '\x6', '&', '\x348', '\n', '&', '\r', '&', '\xE', '&', 
		'\x349', '\x3', '&', '\x3', '&', '\x5', '&', '\x34E', '\n', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x354', '\n', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x6', '&', '\x35A', '\n', 
		'&', '\r', '&', '\xE', '&', '\x35B', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x365', '\n', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x377', 
		'\n', '&', '\x3', '&', '\x5', '&', '\x37A', '\n', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x37F', '\n', '&', '\x3', '&', '\x5', '&', 
		'\x382', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\a', '&', '\x38F', '\n', '&', '\f', '&', '\xE', '&', '\x392', '\v', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x397', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x39B', '\n', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', ')', '\x5', ')', '\x3A1', '\n', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x5', ')', '\x3A6', '\n', ')', '\x3', '*', 
		'\x5', '*', '\x3A9', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\a', '*', '\x3AF', '\n', '*', '\f', '*', '\xE', '*', '\x3B2', '\v', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x3B9', '\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x3C2', '\n', '-', '\f', 
		'-', '\xE', '-', '\x3C5', '\v', '-', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x3C9', '\n', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x3CE', 
		'\n', '/', '\x5', '/', '\x3D0', '\n', '/', '\x3', '/', '\x3', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x3D7', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x3DA', '\v', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x3E1', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x3E8', '\n', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x3EE', '\n', '\x33', 
		'\f', '\x33', '\xE', '\x33', '\x3F1', '\v', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x3F4', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x3FD', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x402', '\n', '\x35', '\x5', '\x35', '\x404', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', 
		'\x36', '\x40B', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x40E', '\v', 
		'\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x415', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x419', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x41E', '\n', '\x38', '\x5', '\x38', '\x420', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x425', '\n', '\x38', '\a', '\x38', '\x427', '\n', '\x38', '\f', '\x38', 
		'\xE', '\x38', '\x42A', '\v', '\x38', '\x3', '\x39', '\x3', '\x39', '\a', 
		'\x39', '\x42E', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x431', '\v', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\a', ':', '\x438', '\n', ':', '\f', ':', '\xE', ':', '\x43B', '\v', ':', 
		'\x3', ':', '\x5', ':', '\x43E', '\n', ':', '\x3', ':', '\x5', ':', '\x441', 
		'\n', ':', '\x3', ':', '\x5', ':', '\x444', '\n', ':', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\a', ';', '\x44A', '\n', ';', '\f', ';', 
		'\xE', ';', '\x44D', '\v', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '=', '\x5', '=', '\x456', '\n', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x467', '\n', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\a', '?', '\x46C', '\n', '?', '\f', '?', 
		'\xE', '?', '\x46F', '\v', '?', '\x3', '@', '\x5', '@', '\x472', '\n', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\a', '\x41', '\x47A', '\n', '\x41', '\f', '\x41', '\xE', 
		'\x41', '\x47D', '\v', '\x41', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', 
		'\x481', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x488', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\a', '\x45', 
		'\x48F', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x492', '\v', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x496', '\n', '\x45', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', 
		'\x46', '\x49D', '\n', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 
		'I', '\x5', 'I', '\x4A9', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x4B4', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\a', 'J', '\x4BA', '\n', 'J', '\f', 'J', '\xE', 'J', '\x4BD', '\v', 
		'J', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x4C1', '\n', 'K', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x5', 'L', '\x4CA', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x4D3', '\n', 'N', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x5', 'O', '\x4DC', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x3', 'Q', '\x5', 'Q', '\x4E2', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x5', 'Q', '\x4E7', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 
		'Q', '\x4EB', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x4EF', 
		'\n', 'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x4F3', '\n', 'R', '\x3', 
		'R', '\x3', 'R', '\x5', 'R', '\x4F7', '\n', 'R', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x4FE', '\n', 'S', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x506', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x5', 'V', '\x513', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\a', 'V', '\x51B', '\n', 'V', 
		'\f', 'V', '\xE', 'V', '\x51E', '\v', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x533', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x537', '\n', 'V', '\x3', 
		'V', '\x3', 'V', '\x5', 'V', '\x53B', '\n', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x5', 'V', '\x540', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x554', '\n', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x559', '\n', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x55E', '\n', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x565', '\n', 
		'V', '\x3', 'V', '\x5', 'V', '\x568', '\n', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\x57E', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x5', 'V', '\x58A', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x5', 'W', 
		'\x58E', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x5', 'X', '\x596', '\n', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', '\x59E', '\n', 
		'X', '\f', 'X', '\xE', 'X', '\x5A1', '\v', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x5', 'X', '\x5A7', '\n', 'X', '\x3', 'Y', '\x3', 
		'Y', '\x5', 'Y', '\x5AB', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x5', 'Z', '\x5B0', '\n', 'Z', '\x3', 'Z', '\x5', 'Z', '\x5B3', '\n', 
		'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x5B8', '\n', '[', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', 
		']', '\x5', ']', '\x5C0', '\n', ']', '\x3', '^', '\x6', '^', '\x5C3', 
		'\n', '^', '\r', '^', '\xE', '^', '\x5C4', '\x3', '^', '\x3', '^', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x5', '_', '\x5CC', '\n', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x5D2', '\n', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x6', '\x61', '\x5D8', '\n', 
		'\x61', '\r', '\x61', '\xE', '\x61', '\x5D9', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\a', '\x62', '\x5E0', '\n', '\x62', '\f', 
		'\x62', '\xE', '\x62', '\x5E3', '\v', '\x62', '\x5', '\x62', '\x5E5', 
		'\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\a', '\x63', 
		'\x5EA', '\n', '\x63', '\f', '\x63', '\xE', '\x63', '\x5ED', '\v', '\x63', 
		'\x3', '\x64', '\x3', '\x64', '\a', '\x64', '\x5F1', '\n', '\x64', '\f', 
		'\x64', '\xE', '\x64', '\x5F4', '\v', '\x64', '\x3', '\x64', '\x5', '\x64', 
		'\x5F7', '\n', '\x64', '\x3', '\x64', '\x5', '\x64', '\x5FA', '\n', '\x64', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', 
		'\x600', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x604', 
		'\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', 
		'\x5', '\x66', '\x60A', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 
		'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x618', '\n', 'i', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x61E', '\n', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', '\x623', '\n', 'k', 
		'\f', 'k', '\xE', 'k', '\x626', '\v', 'k', '\x3', 'l', '\x3', 'l', '\x5', 
		'l', '\x62A', '\n', 'l', '\x3', 'l', '\x5', 'l', '\x62D', '\n', 'l', '\x3', 
		'l', '\x5', 'l', '\x630', '\n', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', 
		'\x6', 'm', '\x635', '\n', 'm', '\r', 'm', '\xE', 'm', '\x636', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x6', 
		'o', '\x63F', '\n', 'o', '\r', 'o', '\xE', 'o', '\x640', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x5', 'p', '\x652', '\n', 'p', '\x3', 'q', '\x6', 'q', 
		'\x655', '\n', 'q', '\r', 'q', '\xE', 'q', '\x656', '\x3', 'r', '\x3', 
		'r', '\x5', 'r', '\x65B', '\n', 'r', '\x3', 's', '\x5', 's', '\x65E', 
		'\n', 's', '\x3', 's', '\x5', 's', '\x661', '\n', 's', '\x3', 's', '\x3', 
		's', '\x3', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\x668', '\n', 's', 
		'\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x66E', '\n', 
		't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\a', 'u', '\x674', 
		'\n', 'u', '\f', 'u', '\xE', 'u', '\x677', '\v', 'u', '\x3', 'u', '\x3', 
		'u', '\x3', 'v', '\x5', 'v', '\x67C', '\n', 'v', '\x3', 'v', '\x3', 'v', 
		'\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\a', 'w', '\x684', '\n', 
		'w', '\f', 'w', '\xE', 'w', '\x687', '\v', 'w', '\x3', 'x', '\x3', 'x', 
		'\x3', 'x', '\a', 'x', '\x68C', '\n', 'x', '\f', 'x', '\xE', 'x', '\x68F', 
		'\v', 'x', '\x3', 'y', '\x6', 'y', '\x692', '\n', 'y', '\r', 'y', '\xE', 
		'y', '\x693', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\x69F', '\n', 
		'{', '\x3', '{', '\x3', '{', '\x5', '{', '\x6A3', '\n', '{', '\x5', '{', 
		'\x6A5', '\n', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\x6AA', 
		'\n', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\x6AE', '\n', '|', '\x3', 
		'}', '\x3', '}', '\x3', '}', '\a', '}', '\x6B3', '\n', '}', '\f', '}', 
		'\xE', '}', '\x6B6', '\v', '}', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', 
		'~', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x6BE', '\n', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x80', '\x6', '\x80', '\x6C3', '\n', 
		'\x80', '\r', '\x80', '\xE', '\x80', '\x6C4', '\x3', '\x81', '\x5', '\x81', 
		'\x6C8', '\n', '\x81', '\x3', '\x81', '\x5', '\x81', '\x6CB', '\n', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x6CF', '\n', '\x81', '\x3', 
		'\x82', '\x6', '\x82', '\x6D2', '\n', '\x82', '\r', '\x82', '\xE', '\x82', 
		'\x6D3', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x5', '\x84', '\x6E1', '\n', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x6EB', '\n', '\x84', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', 
		'\x85', '\x6F2', '\n', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x6FE', '\n', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\a', '\x86', '\x703', '\n', '\x86', 
		'\f', '\x86', '\xE', '\x86', '\x706', '\v', '\x86', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\a', '\x88', '\x70F', '\n', '\x88', '\f', '\x88', '\xE', '\x88', 
		'\x712', '\v', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', 
		'\x89', '\x717', '\n', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', 
		'\x71B', '\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x71F', 
		'\n', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', 
		'\x5', '\x8D', '\x725', '\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x5', '\x8E', '\x72B', '\n', '\x8E', '\x5', '\x8E', 
		'\x72D', '\n', '\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\a', 
		'\x8F', '\x732', '\n', '\x8F', '\f', '\x8F', '\xE', '\x8F', '\x735', '\v', 
		'\x8F', '\x3', '\x90', '\x5', '\x90', '\x738', '\n', '\x90', '\x3', '\x90', 
		'\x5', '\x90', '\x73B', '\n', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', 
		'\x90', '\x73F', '\n', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\x749', '\n', '\x91', '\x3', '\x92', '\x5', '\x92', '\x74C', 
		'\n', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x93', '\x5', '\x93', '\x753', '\n', '\x93', '\x3', '\x93', '\x5', 
		'\x93', '\x756', '\n', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', 
		'\x5', '\x93', '\x75B', '\n', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x93', '\x5', '\x93', '\x760', '\n', '\x93', '\x5', '\x93', '\x762', 
		'\n', '\x93', '\x3', '\x94', '\x5', '\x94', '\x765', '\n', '\x94', '\x3', 
		'\x94', '\x5', '\x94', '\x768', '\n', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x95', '\x5', '\x95', '\x76E', '\n', '\x95', '\x3', 
		'\x95', '\x5', '\x95', '\x771', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\x77D', '\n', 
		'\x96', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', '\x781', '\n', '\x97', 
		'\x3', '\x98', '\x5', '\x98', '\x784', '\n', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x5', '\x98', '\x78E', '\n', '\x98', '\x3', '\x99', 
		'\x5', '\x99', '\x791', '\n', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x9A', '\x5', '\x9A', '\x797', '\n', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\x7B2', '\n', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x7BF', '\n', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', 
		'\x7C5', '\n', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\xA0', '\x3', '\xA0', '\a', '\xA0', '\x7CC', '\n', '\xA0', '\f', '\xA0', 
		'\xE', '\xA0', '\x7CF', '\v', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA1', '\x5', '\xA1', '\x7D4', '\n', '\xA1', '\x3', '\xA1', '\x5', '\xA1', 
		'\x7D7', '\n', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x6', '\xA1', '\x7DD', '\n', '\xA1', '\r', '\xA1', '\xE', '\xA1', 
		'\x7DE', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', '\x7E3', '\n', '\xA1', 
		'\x3', '\xA2', '\x3', '\xA2', '\a', '\xA2', '\x7E7', '\n', '\xA2', '\f', 
		'\xA2', '\xE', '\xA2', '\x7EA', '\v', '\xA2', '\x3', '\xA2', '\x6', '\xA2', 
		'\x7ED', '\n', '\xA2', '\r', '\xA2', '\xE', '\xA2', '\x7EE', '\x3', '\xA3', 
		'\x3', '\xA3', '\a', '\xA3', '\x7F3', '\n', '\xA3', '\f', '\xA3', '\xE', 
		'\xA3', '\x7F6', '\v', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\a', '\xA4', '\x7FE', '\n', 
		'\xA4', '\f', '\xA4', '\xE', '\xA4', '\x801', '\v', '\xA4', '\x3', '\xA4', 
		'\x5', '\xA4', '\x804', '\n', '\xA4', '\x5', '\xA4', '\x806', '\n', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA5', '\a', '\xA5', '\x80E', '\n', '\xA5', '\f', '\xA5', '\xE', 
		'\xA5', '\x811', '\v', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', 
		'\x5', '\xA6', '\x816', '\n', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\x819', 
		'\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA9', '\x3', '\xA9', 
		'\a', '\xA9', '\x824', '\n', '\xA9', '\f', '\xA9', '\xE', '\xA9', '\x827', 
		'\v', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x5', '\xAA', 
		'\x82C', '\n', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x82F', '\n', '\xAA', 
		'\x3', '\xAA', '\x5', '\xAA', '\x832', '\n', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x839', 
		'\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', 
		'\x83E', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x842', 
		'\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x846', '\n', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x5', '\xAA', '\x857', '\n', '\xAA', '\x3', '\xAA', '\x5', '\xAA', 
		'\x85A', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', 
		'\xAA', '\x85F', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', 
		'\x863', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x867', 
		'\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x870', '\n', 
		'\xAA', '\x3', '\xAB', '\x5', '\xAB', '\x873', '\n', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x878', '\n', '\xAB', '\x3', 
		'\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x87C', '\n', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x881', '\n', '\xAB', '\x3', 
		'\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x885', '\n', '\xAB', '\x5', '\xAB', 
		'\x887', '\n', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\a', '\xAD', '\x890', 
		'\n', '\xAD', '\f', '\xAD', '\xE', '\xAD', '\x893', '\v', '\xAD', '\x3', 
		'\xAD', '\x5', '\xAD', '\x896', '\n', '\xAD', '\x5', '\xAD', '\x898', 
		'\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAE', '\x5', '\xAE', 
		'\x89D', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', 
		'\xAE', '\x8A2', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x8A9', '\n', '\xAF', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x8AF', 
		'\n', '\xB0', '\x3', '\xB1', '\x6', '\xB1', '\x8B2', '\n', '\xB1', '\r', 
		'\xB1', '\xE', '\xB1', '\x8B3', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x5', '\xB2', '\x8BA', '\n', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB2', '\x5', '\xB2', '\x8BE', '\n', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8C4', '\n', '\xB3', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\a', '\xB4', '\x8C9', '\n', '\xB4', 
		'\f', '\xB4', '\xE', '\xB4', '\x8CC', '\v', '\xB4', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\a', '\xB5', '\x8D3', 
		'\n', '\xB5', '\f', '\xB5', '\xE', '\xB5', '\x8D6', '\v', '\xB5', '\x5', 
		'\xB5', '\x8D8', '\n', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x8DB', 
		'\n', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', 
		'\x8E0', '\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB7', '\x3', 
		'\xB7', '\x5', '\xB7', '\x8E6', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\a', '\xB7', '\x8EA', '\n', '\xB7', '\f', '\xB7', '\xE', '\xB7', '\x8ED', 
		'\v', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x5', '\xB7', '\x8F3', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\a', '\xB8', '\x8F8', '\n', '\xB8', '\f', '\xB8', '\xE', '\xB8', 
		'\x8FB', '\v', '\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xBA', '\x5', '\xBA', '\x902', '\n', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBA', '\x5', '\xBA', '\x906', '\n', '\xBA', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x915', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\x919', '\n', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\a', '\xBC', '\x920', 
		'\n', '\xBC', '\f', '\xBC', '\xE', '\xBC', '\x923', '\v', '\xBC', '\x3', 
		'\xBC', '\x5', '\xBC', '\x926', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x5', '\xBC', '\x92A', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x940', '\n', '\xC0', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x5', '\xC2', '\x948', '\n', '\xC2', '\x3', '\xC3', '\x3', 
		'\xC3', '\a', '\xC3', '\x94C', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', 
		'\x94F', '\v', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC4', '\x3', 
		'\xC4', '\a', '\xC4', '\x955', '\n', '\xC4', '\f', '\xC4', '\xE', '\xC4', 
		'\x958', '\v', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x960', '\n', '\xC5', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', 
		'\x966', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\a', 
		'\xC7', '\x96B', '\n', '\xC7', '\f', '\xC7', '\xE', '\xC7', '\x96E', '\v', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x6', '\xC7', '\x972', '\n', '\xC7', 
		'\r', '\xC7', '\xE', '\xC7', '\x973', '\x5', '\xC7', '\x976', '\n', '\xC7', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x5', '\xC9', '\x97D', '\n', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x980', 
		'\n', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x983', '\n', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x987', '\n', '\xC9', '\x3', '\xCA', 
		'\x5', '\xCA', '\x98A', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x5', '\xCA', '\x98F', '\n', '\xCA', '\x3', '\xCA', '\x5', '\xCA', 
		'\x992', '\n', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x995', '\n', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x999', '\n', '\xCA', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x99E', '\n', '\xCB', 
		'\x3', '\xCB', '\x5', '\xCB', '\x9A1', '\n', '\xCB', '\x3', '\xCB', '\x5', 
		'\xCB', '\x9A4', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', 
		'\x9A8', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', 
		'\xCC', '\x9AD', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', 
		'\x9B1', '\n', '\xCC', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCD', '\x5', '\xCD', '\x9B7', '\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x5', '\xCD', '\x9BB', '\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', 
		'\xCD', '\x9BF', '\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCE', 
		'\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', 
		'\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', 
		'\x9CD', '\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x9DA', '\n', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', 
		'\x9E0', '\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\x9F3', 
		'\n', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x5', '\xD4', '\x9FE', '\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', 
		'\xD4', '\xA02', '\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD5', 
		'\x3', '\xD5', '\x5', '\xD5', '\xA08', '\n', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x5', '\xD5', '\xA0C', '\n', '\xD5', '\x3', '\xD5', '\x3', '\xD5', 
		'\x5', '\xD5', '\xA10', '\n', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xA17', '\n', '\xD5', 
		'\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\x5', '\xD6', '\xA1E', '\n', '\xD6', '\x3', '\xD6', '\x5', '\xD6', '\xA21', 
		'\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\a', '\xD6', '\xA25', '\n', 
		'\xD6', '\f', '\xD6', '\xE', '\xD6', '\xA28', '\v', '\xD6', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xA2E', '\n', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xA33', 
		'\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xA36', '\n', '\xD7', '\x3', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', 
		'\xD7', '\x5', '\xD7', '\xA3E', '\n', '\xD7', '\x3', '\xD8', '\x3', '\xD8', 
		'\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\xA44', '\n', '\xD8', '\x3', 
		'\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xA48', '\n', '\xD9', '\x3', '\xD9', 
		'\x3', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xA4E', '\n', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xA52', '\n', '\xDA', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x2', '\x2', '\xDC', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', 
		'|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', 
		'\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', 
		'\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', 
		'\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', 
		'\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', 
		'\xD8', '\xDA', '\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', 
		'\xEA', '\xEC', '\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', 
		'\xFC', '\xFE', '\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', 
		'\x10C', '\x10E', '\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', 
		'\x11C', '\x11E', '\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', 
		'\x12C', '\x12E', '\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', 
		'\x13C', '\x13E', '\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', 
		'\x14C', '\x14E', '\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', 
		'\x15C', '\x15E', '\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', 
		'\x16C', '\x16E', '\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', 
		'\x17C', '\x17E', '\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', 
		'\x18C', '\x18E', '\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', 
		'\x19C', '\x19E', '\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', 
		'\x1AC', '\x1AE', '\x1B0', '\x1B2', '\x1B4', '\x2', '\x15', '\n', '\x2', 
		'\x17', '\x17', '\x1A', '\x1A', '\x39', '\x39', '\x41', '\x41', 'U', 'U', 
		'Y', 'Y', '\x65', '\x66', 'j', 'j', '\x4', '\x2', '$', '$', '/', '/', 
		'\x5', '\x2', '\x38', '\x38', 'J', 'J', 'R', 'R', '\x3', '\x2', '\x9E', 
		'\x9F', '\x4', '\x2', '\x94', '\x95', '\xA0', '\xA1', '\x3', '\x2', '\x89', 
		'\x8A', '\x3', '\x2', '\x8B', '\x8D', '\x10', '\x2', '\x14', '\x14', '\x17', 
		'\x17', '\x1A', '\x1A', '\x1F', '\x1F', '$', '$', '/', '/', '\x39', '\x39', 
		'\x41', '\x41', '\x46', '\x46', 'U', 'U', 'Y', 'Y', ']', ']', '\x65', 
		'\x66', 'j', 'j', '\x4', '\x2', '\x10', '\x10', '\"', '\"', '\x4', '\x2', 
		'\x11', '\x11', 'i', 'i', '\xE', '\x2', '\v', '\v', '\x11', '\x11', '+', 
		'+', ';', ';', '\x44', '\x44', 'K', 'K', 'M', 'Q', 'V', 'V', '\\', '\\', 
		'i', 'i', 'm', 'm', 'o', 'o', '\x4', '\x2', '*', '*', '\x37', '\x37', 
		'\x4', '\x2', '\x13', '\x13', '`', '`', '\x4', '\x2', '\x8B', '\x8B', 
		'\x96', '\x96', '\x4', '\x2', '\x38', '\x38', 'J', 'J', '\x4', '\x2', 
		',', ',', '\x62', '\x62', '\x15', '\x2', '\v', '\v', '\xF', '\xF', '\x13', 
		'\x15', '\x17', '!', '#', '$', '&', '\'', ')', '\x31', '\x34', '\x34', 
		'\x36', ';', '=', '=', '@', '\x41', '\x43', '\x46', 'H', 'H', 'J', 'L', 
		'N', 'R', 'T', 'V', 'Y', 'k', 'm', 'o', 'r', 'r', '\x3', '\x2', 'Q', 'R', 
		'\x16', '\x2', '\f', '\xE', '\x10', '\x12', '\x16', '\x16', '\"', '\"', 
		'%', '%', '(', '(', '\x32', '\x33', '\x35', '\x35', '<', '<', '>', '?', 
		'\x42', '\x42', 'G', 'G', 'I', 'I', 'M', 'M', 'S', 'S', 'W', 'X', 'h', 
		'h', 'l', 'l', 'p', 'q', 's', 't', '\x2', '\xB64', '\x2', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\b', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\f', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x12', '\x202', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x204', '\x3', '\x2', '\x2', '\x2', '\x16', '\x20A', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x231', '\x3', '\x2', '\x2', '\x2', ' ', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x240', '\x3', '\x2', '\x2', '\x2', '$', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x257', '\x3', '\x2', '\x2', '\x2', '*', '\x25F', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x267', '\x3', '\x2', '\x2', '\x2', '.', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x277', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x34', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x29B', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x2AE', '\x3', '\x2', '\x2', '\x2', '>', '\x2B6', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x42', '\x2CA', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x2D9', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x2F5', '\x3', '\x2', '\x2', '\x2', 'H', '\x2F7', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x396', '\x3', '\x2', '\x2', '\x2', 'L', '\x39A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x39C', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x3A0', '\x3', '\x2', '\x2', '\x2', 'R', '\x3A8', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x3B8', '\x3', '\x2', '\x2', '\x2', 'V', '\x3BC', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x3BE', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\\', '\x3CA', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x3D3', '\x3', '\x2', '\x2', '\x2', '`', '\x3E0', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x3E7', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x66', '\x3FC', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x3FE', '\x3', '\x2', '\x2', '\x2', 'j', '\x407', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x414', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x416', '\x3', '\x2', '\x2', '\x2', 'p', '\x42B', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x434', '\x3', '\x2', '\x2', '\x2', 't', '\x445', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x450', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x455', '\x3', '\x2', '\x2', '\x2', 'z', '\x466', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x468', '\x3', '\x2', '\x2', '\x2', '~', '\x471', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x476', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x480', '\x3', '\x2', '\x2', '\x2', '\x84', '\x482', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x485', '\x3', '\x2', '\x2', '\x2', '\x88', '\x490', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x49C', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x49E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x4A3', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x92', '\x4B5', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x4BE', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x98', '\x4CB', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x4DB', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x4DD', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x4F6', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x4FF', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x589', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x58B', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x5AA', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x5AC', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x5B9', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x5C2', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x5D1', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x5D7', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x5F9', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x607', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x60D', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x617', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x619', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x61F', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x627', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x634', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x638', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x63E', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x651', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x654', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x65A', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x65D', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x669', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x66F', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x67B', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x67F', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\x688', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\x691', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x695', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\x6A4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x6AD', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x6AF', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x6BB', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x6C2', '\x3', '\x2', '\x2', '\x2', '\x100', '\x6C7', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x6D1', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x106', '\x6EA', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x6FF', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x707', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x110', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x71A', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x116', '\x720', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x724', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x72C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x72E', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x73E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x748', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x74B', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x752', '\x3', '\x2', '\x2', '\x2', '\x126', '\x764', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x77C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x780', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x783', '\x3', '\x2', '\x2', '\x2', '\x130', '\x790', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x796', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x136', '\x7B3', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x7C4', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x7C6', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x140', '\x7D3', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x7E4', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x146', '\x7F9', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x809', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x815', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x81C', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x821', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x82B', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x872', '\x3', '\x2', '\x2', '\x2', '\x156', '\x888', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x88B', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x89C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x8A3', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x8AE', '\x3', '\x2', '\x2', '\x2', '\x160', '\x8B1', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x8B5', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\x166', '\x8C5', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x8CD', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x8DF', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x8F2', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x170', '\x8FC', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x905', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x907', '\x3', '\x2', '\x2', '\x2', '\x176', '\x929', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x92B', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x92F', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x933', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x93F', '\x3', '\x2', '\x2', '\x2', '\x180', '\x941', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x947', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x949', '\x3', '\x2', '\x2', '\x2', '\x186', '\x952', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x95F', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x965', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x967', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x977', '\x3', '\x2', '\x2', '\x2', '\x190', '\x979', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x989', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x99A', '\x3', '\x2', '\x2', '\x2', '\x196', '\x9A9', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x9B2', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x9C2', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x9CE', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x9D1', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x9E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x9E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x9F4', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x9FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\xA05', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\xA1D', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xA29', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\xA3F', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\xA45', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\xA4B', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\xA53', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B8', '\a', 
		'\x3', '\x2', '\x2', '\x1B7', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1BB', '\x5', '\xD8', 'm', '\x2', '\x1BA', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', 
		'\xDC', 'o', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C1', '\x5', '\x15C', '\xAF', '\x2', '\x1C0', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C7', '\x5', '\xE0', 
		'q', '\x2', '\x1C6', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\a', '\x2', '\x2', '\x3', '\x1C9', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA', '\x1CC', '\x5', '\x1B4', '\xDB', '\x2', '\x1CB', 
		'\x1CD', '\x5', '\x18', '\r', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', '\xE6', 't', '\x2', 
		'\x1CF', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\a', '\x85', '\x2', '\x2', '\x1D2', '\x1D4', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x1D3', '\x1D5', '\x5', '\x18', '\r', '\x2', '\x1D4', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1E1', '\x5', '\b', '\x5', 
		'\x2', '\x1DC', '\x1E0', '\a', '\x96', '\x2', '\x2', '\x1DD', '\x1E0', 
		'\x5', '\x144', '\xA3', '\x2', '\x1DE', '\x1E0', '\a', '\x8B', '\x2', 
		'\x2', '\x1DF', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E4', '\x1EA', '\x5', '\xE', '\b', '\x2', '\x1E5', '\x1EA', 
		'\x5', '\x16', '\f', '\x2', '\x1E6', '\x1E7', '\a', 'n', '\x2', '\x2', 
		'\x1E7', '\x1EA', '\a', '\x8B', '\x2', '\x2', '\x1E8', '\x1EA', '\x5', 
		'\n', '\x6', '\x2', '\x1E9', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E6', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\a', '\x83', '\x2', '\x2', '\x1EC', 
		'\x1EF', '\x5', '\f', '\a', '\x2', '\x1ED', '\x1EE', '\a', '\x86', '\x2', 
		'\x2', '\x1EE', '\x1F0', '\x5', '\f', '\a', '\x2', '\x1EF', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\a', '\x84', '\x2', '\x2', '\x1F4', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F7', '\x5', '\x6', '\x4', '\x2', '\x1F6', '\x1F8', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9', '\x1FC', '\x5', '\x10', '\t', '\x2', '\x1FA', '\x1FC', 
		'\a', '\x14', '\x2', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD', '\x201', '\x5', '\x12', '\n', '\x2', '\x1FE', '\x201', 
		'\x5', '\x14', '\v', '\x2', '\x1FF', '\x201', '\a', '\x1F', '\x2', '\x2', 
		'\x200', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\t', '\x2', '\x2', 
		'\x2', '\x203', '\x13', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', 
		'\t', '\x3', '\x2', '\x2', '\x205', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x206', '\x20B', '\x5', '\x4', '\x3', '\x2', '\x207', '\x20B', '\a', 
		'\x46', '\x2', '\x2', '\x208', '\x20B', '\a', '%', '\x2', '\x2', '\x209', 
		'\x20B', '\a', ']', '\x2', '\x2', '\x20A', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', '\x94', 
		'\x2', '\x2', '\x20D', '\x212', '\x5', '\x6', '\x4', '\x2', '\x20E', '\x20F', 
		'\a', '\x86', '\x2', '\x2', '\x20F', '\x211', '\x5', '\x6', '\x4', '\x2', 
		'\x210', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x211', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', 
		'\a', '\x95', '\x2', '\x2', '\x216', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x21C', '\x5', '\x1C', '\xF', '\x2', '\x218', '\x219', '\a', 
		'\x86', '\x2', '\x2', '\x219', '\x21B', '\x5', '\x1C', '\xF', '\x2', '\x21A', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x220', '\x221', '\a', '\x87', '\x2', '\x2', 
		'\x221', '\x223', '\x3', '\x2', '\x2', '\x2', '\x222', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x224', '\x226', '\t', '\x4', '\x2', 
		'\x2', '\x225', '\x224', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x22A', '\a', 'l', '\x2', '\x2', '\x228', '\x22A', '\x5', '\x6', 
		'\x4', '\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x5', 
		'\x1E', '\x10', '\x2', '\x22C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x232', '\x5', '\"', '\x12', '\x2', '\x22E', '\x232', '\x5', ' ', '\x11', 
		'\x2', '\x22F', '\x230', '\a', 'R', '\x2', '\x2', '\x230', '\x232', '\x5', 
		' ', '\x11', '\x2', '\x231', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x233', '\x237', 
		'\x5', 'x', '=', '\x2', '\x234', '\x237', '\x5', '\x84', '\x43', '\x2', 
		'\x235', '\x237', '\x5', '&', '\x14', '\x2', '\x236', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x234', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x237', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\x5', '\x46', '$', '\x2', '\x239', '\x23A', 
		'\x5', '$', '\x13', '\x2', '\x23A', '\x23B', '\x5', '\x1E', '\x10', '\x2', 
		'\x23B', '\x241', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x5', 
		'\x46', '$', '\x2', '\x23D', '\x23E', '\a', '\xAC', '\x2', '\x2', '\x23E', 
		'\x23F', '\x5', 'L', '\'', '\x2', '\x23F', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x240', '\x238', '\x3', '\x2', '\x2', '\x2', '\x240', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x24E', '\a', '\x93', '\x2', '\x2', '\x243', '\x24E', '\a', 
		'\xA2', '\x2', '\x2', '\x244', '\x24E', '\a', '\xA3', '\x2', '\x2', '\x245', 
		'\x24E', '\a', '\xA4', '\x2', '\x2', '\x246', '\x24E', '\a', '\xA5', '\x2', 
		'\x2', '\x247', '\x24E', '\a', '\xA6', '\x2', '\x2', '\x248', '\x24E', 
		'\a', '\xA7', '\x2', '\x2', '\x249', '\x24E', '\a', '\xA8', '\x2', '\x2', 
		'\x24A', '\x24E', '\a', '\xA9', '\x2', '\x2', '\x24B', '\x24E', '\a', 
		'\xAB', '\x2', '\x2', '\x24C', '\x24E', '\x5', '\x17C', '\xBF', '\x2', 
		'\x24D', '\x242', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x243', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x244', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x246', '\x3', '\x2', '\x2', 
		'\x2', '\x24D', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x255', '\x5', '(', '\x15', 
		'\x2', '\x250', '\x251', '\a', '\x96', '\x2', '\x2', '\x251', '\x252', 
		'\x5', 'L', '\'', '\x2', '\x252', '\x253', '\a', '\x87', '\x2', '\x2', 
		'\x253', '\x254', '\x5', 'L', '\'', '\x2', '\x254', '\x256', '\x3', '\x2', 
		'\x2', '\x2', '\x255', '\x250', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x25D', '\x5', '*', '\x16', '\x2', '\x258', '\x25B', '\a', '\x98', 
		'\x2', '\x2', '\x259', '\x25C', '\x5', '(', '\x15', '\x2', '\x25A', '\x25C', 
		'\x5', 'N', '(', '\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x25B', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25E', '\x3', 
		'\x2', '\x2', '\x2', '\x25D', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x264', '\x5', ',', '\x17', '\x2', '\x260', '\x261', 
		'\a', '\x9C', '\x2', '\x2', '\x261', '\x263', '\x5', ',', '\x17', '\x2', 
		'\x262', '\x260', '\x3', '\x2', '\x2', '\x2', '\x263', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x262', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x265', '\x3', '\x2', '\x2', '\x2', '\x265', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x264', '\x3', '\x2', '\x2', '\x2', '\x267', '\x26C', 
		'\x5', '.', '\x18', '\x2', '\x268', '\x269', '\a', '\x9B', '\x2', '\x2', 
		'\x269', '\x26B', '\x5', '.', '\x18', '\x2', '\x26A', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x26B', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\x3', '\x2', '\x2', 
		'\x2', '\x26D', '-', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26C', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x274', '\x5', '\x30', '\x19', '\x2', '\x270', 
		'\x271', '\a', '\x8F', '\x2', '\x2', '\x271', '\x273', '\x5', '\x30', 
		'\x19', '\x2', '\x272', '\x270', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\x274', '\x272', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x275', '\x3', '\x2', '\x2', '\x2', '\x275', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x274', '\x3', '\x2', '\x2', '\x2', '\x277', 
		'\x27C', '\x5', '\x32', '\x1A', '\x2', '\x278', '\x279', '\a', '\x90', 
		'\x2', '\x2', '\x279', '\x27B', '\x5', '\x32', '\x1A', '\x2', '\x27A', 
		'\x278', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27E', '\x3', '\x2', '\x2', 
		'\x2', '\x27C', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', 
		'\x3', '\x2', '\x2', '\x2', '\x27D', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x284', '\x5', 
		'\x34', '\x1B', '\x2', '\x280', '\x281', '\a', '\x8E', '\x2', '\x2', '\x281', 
		'\x283', '\x5', '\x34', '\x1B', '\x2', '\x282', '\x280', '\x3', '\x2', 
		'\x2', '\x2', '\x283', '\x286', '\x3', '\x2', '\x2', '\x2', '\x284', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x284', '\x285', '\x3', '\x2', '\x2', '\x2', 
		'\x285', '\x33', '\x3', '\x2', '\x2', '\x2', '\x286', '\x284', '\x3', 
		'\x2', '\x2', '\x2', '\x287', '\x28C', '\x5', '\x36', '\x1C', '\x2', '\x288', 
		'\x289', '\t', '\x5', '\x2', '\x2', '\x289', '\x28B', '\x5', '\x36', '\x1C', 
		'\x2', '\x28A', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28F', 
		'\x298', '\x5', '\x38', '\x1D', '\x2', '\x290', '\x291', '\t', '\x6', 
		'\x2', '\x2', '\x291', '\x297', '\x5', '\x38', '\x1D', '\x2', '\x292', 
		'\x293', '\a', '=', '\x2', '\x2', '\x293', '\x297', '\x5', 'r', ':', '\x2', 
		'\x294', '\x295', '\a', '\xF', '\x2', '\x2', '\x295', '\x297', '\x5', 
		'\x6', '\x4', '\x2', '\x296', '\x290', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x296', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x297', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x298', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x299', '\x37', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x29B', '\x2A3', '\x5', ':', '\x1E', '\x2', '\x29C', 
		'\x29F', '\a', '\xAA', '\x2', '\x2', '\x29D', '\x29F', '\x5', '\x17A', 
		'\xBE', '\x2', '\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x2A0', '\x2A2', '\x5', ':', '\x1E', '\x2', '\x2A1', '\x29E', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2AB', '\x5', '<', '\x1F', 
		'\x2', '\x2A7', '\x2A8', '\t', '\a', '\x2', '\x2', '\x2A8', '\x2AA', '\x5', 
		'<', '\x1F', '\x2', '\x2A9', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2A9', '\x3', '\x2', '\x2', 
		'\x2', '\x2AB', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AC', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x2B3', '\x5', '>', ' ', '\x2', '\x2AF', '\x2B0', '\t', '\b', '\x2', 
		'\x2', '\x2B0', '\x2B2', '\x5', '>', ' ', '\x2', '\x2B1', '\x2AF', '\x3', 
		'\x2', '\x2', '\x2', '\x2B2', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B3', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\x3', '\x2', '\x2', 
		'\x2', '\x2B4', '=', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B3', '\x3', 
		'\x2', '\x2', '\x2', '\x2B6', '\x2C0', '\x5', '\x44', '#', '\x2', '\x2B7', 
		'\x2B8', '\a', '_', '\x2', '\x2', '\x2B8', '\x2BD', '\a', '\x7F', '\x2', 
		'\x2', '\x2B9', '\x2BB', '\x5', '@', '!', '\x2', '\x2BA', '\x2BC', '\a', 
		'\x86', '\x2', '\x2', '\x2BB', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2BD', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', '\x3', '\x2', '\x2', '\x2', 
		'\x2BF', '\x2C1', '\a', '\x80', '\x2', '\x2', '\x2C0', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C7', '\x5', '\x42', '\"', 
		'\x2', '\x2C3', '\x2C4', '\a', '\x86', '\x2', '\x2', '\x2C4', '\x2C6', 
		'\x5', '\x42', '\"', '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\x2C6', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2C7', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\x2CC', '\x5', '\x1E', '\x10', '\x2', '\x2CB', '\x2CD', 
		'\x5', '\xBE', '`', '\x2', '\x2CC', '\x2CB', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\x3', 
		'\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x5', '\x178', '\xBD', '\x2', 
		'\x2CF', '\x2D0', '\x5', 'L', '\'', '\x2', '\x2D0', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x2D1', '\x2DA', '\x5', '\x46', '$', '\x2', '\x2D2', '\x2D4', 
		'\x5', '\x46', '$', '\x2', '\x2D3', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2D7', '\a', '\xAD', '\x2', '\x2', '\x2D6', 
		'\x2D8', '\x5', '\x46', '$', '\x2', '\x2D7', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2DA', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\x2D9', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x2DB', '\x2F6', '\x5', 'H', '%', '\x2', '\x2DC', 
		'\x2DD', '\a', '\x89', '\x2', '\x2', '\x2DD', '\x2F6', '\x5', '\x46', 
		'$', '\x2', '\x2DE', '\x2DF', '\a', '\x8A', '\x2', '\x2', '\x2DF', '\x2F6', 
		'\x5', '\x46', '$', '\x2', '\x2E0', '\x2E1', '\a', '\x91', '\x2', '\x2', 
		'\x2E1', '\x2F6', '\x5', '\x46', '$', '\x2', '\x2E2', '\x2E3', '\a', '\x92', 
		'\x2', '\x2', '\x2E3', '\x2F6', '\x5', '\x46', '$', '\x2', '\x2E4', '\x2E5', 
		'\a', '\x99', '\x2', '\x2', '\x2E5', '\x2F6', '\x5', '\x46', '$', '\x2', 
		'\x2E6', '\x2E7', '\a', '\x9A', '\x2', '\x2', '\x2E7', '\x2F6', '\x5', 
		'\x46', '$', '\x2', '\x2E8', '\x2E9', '\a', '\x83', '\x2', '\x2', '\x2E9', 
		'\x2EA', '\x5', '\x6', '\x4', '\x2', '\x2EA', '\x2EB', '\a', '\x84', '\x2', 
		'\x2', '\x2EB', '\x2EC', '\x5', '\x46', '$', '\x2', '\x2EC', '\x2F6', 
		'\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\a', '\x12', '\x2', '\x2', 
		'\x2EE', '\x2F6', '\x5', '\x46', '$', '\x2', '\x2EF', '\x2F0', '\a', '\x8E', 
		'\x2', '\x2', '\x2F0', '\x2F6', '\x5', '\x46', '$', '\x2', '\x2F1', '\x2F2', 
		'\a', '\x8B', '\x2', '\x2', '\x2F2', '\x2F6', '\x5', '\x46', '$', '\x2', 
		'\x2F3', '\x2F4', '\a', '\x90', '\x2', '\x2', '\x2F4', '\x2F6', '\x5', 
		'\x46', '$', '\x2', '\x2F5', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2F5', 
		'\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2DE', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2F5', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2E8', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2F5', 
		'\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F1', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F6', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x2F7', '\x2F9', '\x5', 'J', '&', '\x2', '\x2F8', 
		'\x2FA', '\a', '\x91', '\x2', '\x2', '\x2F9', '\x2F8', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FE', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FD', '\x5', 'R', '*', '\x2', 
		'\x2FC', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x300', '\x3', 
		'\x2', '\x2', '\x2', '\x2FE', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x301', '\x303', 
		'\a', '\x91', '\x2', '\x2', '\x302', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x302', '\x303', '\x3', '\x2', '\x2', '\x2', '\x303', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x304', '\x30B', '\x5', 'P', ')', '\x2', '\x305', 
		'\x30B', '\x5', '\x1B0', '\xD9', '\x2', '\x306', '\x30B', '\a', '\x99', 
		'\x2', '\x2', '\x307', '\x30B', '\a', '\x9A', '\x2', '\x2', '\x308', '\x309', 
		'\a', '\x9D', '\x2', '\x2', '\x309', '\x30B', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x30A', '\x304', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x306', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x307', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', '\x3', 
		'\x2', '\x2', '\x2', '\x30B', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x30E', '\a', '\x91', '\x2', '\x2', '\x30D', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30D', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x312', 
		'\x3', '\x2', '\x2', '\x2', '\x30F', '\x311', '\x5', 'R', '*', '\x2', 
		'\x310', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x311', '\x314', '\x3', 
		'\x2', '\x2', '\x2', '\x312', '\x310', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x313', '\x316', '\x3', '\x2', '\x2', 
		'\x2', '\x314', '\x312', '\x3', '\x2', '\x2', '\x2', '\x315', '\x317', 
		'\a', '\x91', '\x2', '\x2', '\x316', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x316', '\x317', '\x3', '\x2', '\x2', '\x2', '\x317', '\x319', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x31C', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x318', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31B', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x31D', 
		'\x397', '\x5', '\x17E', '\xC0', '\x2', '\x31E', '\x320', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x31F', '\x321', '\x5', '\x18', '\r', '\x2', '\x320', 
		'\x31F', '\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\x3', '\x2', '\x2', 
		'\x2', '\x321', '\x397', '\x3', '\x2', '\x2', '\x2', '\x322', '\x323', 
		'\a', '\x83', '\x2', '\x2', '\x323', '\x324', '\x5', '\x1E', '\x10', '\x2', 
		'\x324', '\x325', '\a', '\x84', '\x2', '\x2', '\x325', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x326', '\x397', '\x5', 'V', ',', '\x2', '\x327', 
		'\x397', '\x5', '\xE6', 't', '\x2', '\x328', '\x397', '\a', 'u', '\x2', 
		'\x2', '\x329', '\x397', '\a', '`', '\x2', '\x2', '\x32A', '\x334', '\a', 
		'\x13', '\x2', '\x2', '\x32B', '\x32C', '\a', '\x85', '\x2', '\x2', '\x32C', 
		'\x32E', '\x5', '\x1B4', '\xDB', '\x2', '\x32D', '\x32F', '\x5', '\x18', 
		'\r', '\x2', '\x32E', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32F', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x335', '\x3', '\x2', '\x2', '\x2', 
		'\x330', '\x331', '\a', '\x81', '\x2', '\x2', '\x331', '\x332', '\x5', 
		'X', '-', '\x2', '\x332', '\x333', '\a', '\x82', '\x2', '\x2', '\x333', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x334', '\x32B', '\x3', '\x2', '\x2', 
		'\x2', '\x334', '\x330', '\x3', '\x2', '\x2', '\x2', '\x335', '\x397', 
		'\x3', '\x2', '\x2', '\x2', '\x336', '\x353', '\a', '\x44', '\x2', '\x2', 
		'\x337', '\x34D', '\x5', '\x6', '\x4', '\x2', '\x338', '\x34E', '\x5', 
		'\x1B2', '\xDA', '\x2', '\x339', '\x34E', '\x5', 'Z', '.', '\x2', '\x33A', 
		'\x33B', '\a', '\x81', '\x2', '\x2', '\x33B', '\x33C', '\x5', 'X', '-', 
		'\x2', '\x33C', '\x340', '\a', '\x82', '\x2', '\x2', '\x33D', '\x33F', 
		'\x5', '\x144', '\xA3', '\x2', '\x33E', '\x33D', '\x3', '\x2', '\x2', 
		'\x2', '\x33F', '\x342', '\x3', '\x2', '\x2', '\x2', '\x340', '\x33E', 
		'\x3', '\x2', '\x2', '\x2', '\x340', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'\x341', '\x344', '\x3', '\x2', '\x2', '\x2', '\x342', '\x340', '\x3', 
		'\x2', '\x2', '\x2', '\x343', '\x345', '\x5', '\x146', '\xA4', '\x2', 
		'\x344', '\x343', '\x3', '\x2', '\x2', '\x2', '\x344', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x345', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x348', '\x5', '\x144', '\xA3', '\x2', '\x347', '\x346', '\x3', '\x2', 
		'\x2', '\x2', '\x348', '\x349', '\x3', '\x2', '\x2', '\x2', '\x349', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\x3', '\x2', '\x2', '\x2', 
		'\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', '\x5', 
		'\x146', '\xA4', '\x2', '\x34C', '\x34E', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x338', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x339', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x354', '\x3', '\x2', '\x2', 
		'\x2', '\x34F', '\x354', '\x5', 'h', '\x35', '\x2', '\x350', '\x351', 
		'\x5', '\x144', '\xA3', '\x2', '\x351', '\x352', '\x5', '\x146', '\xA4', 
		'\x2', '\x352', '\x354', '\x3', '\x2', '\x2', '\x2', '\x353', '\x337', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x34F', '\x3', '\x2', '\x2', '\x2', 
		'\x353', '\x350', '\x3', '\x2', '\x2', '\x2', '\x354', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x355', '\x356', '\a', '\x83', '\x2', '\x2', '\x356', 
		'\x359', '\x5', '\x1C', '\xF', '\x2', '\x357', '\x358', '\a', '\x86', 
		'\x2', '\x2', '\x358', '\x35A', '\x5', '\x1C', '\xF', '\x2', '\x359', 
		'\x357', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', '\x2', '\x2', 
		'\x2', '\x35B', '\x359', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', '\x35C', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x35D', '\x35E', '\a', '\x84', '\x2', '\x2', '\x35E', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x35F', '\x360', '\a', '\x64', '\x2', '\x2', '\x360', 
		'\x364', '\a', '\x83', '\x2', '\x2', '\x361', '\x365', '\x5', 'n', '\x38', 
		'\x2', '\x362', '\x365', '\x5', '\x6', '\x4', '\x2', '\x363', '\x365', 
		'\a', 'n', '\x2', '\x2', '\x364', '\x361', '\x3', '\x2', '\x2', '\x2', 
		'\x364', '\x362', '\x3', '\x2', '\x2', '\x2', '\x364', '\x363', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x397', '\a', '\x84', '\x2', '\x2', '\x367', '\x368', '\a', '\x1B', '\x2', 
		'\x2', '\x368', '\x369', '\a', '\x83', '\x2', '\x2', '\x369', '\x36A', 
		'\x5', '\x1E', '\x10', '\x2', '\x36A', '\x36B', '\a', '\x84', '\x2', '\x2', 
		'\x36B', '\x397', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36D', '\a', 
		'g', '\x2', '\x2', '\x36D', '\x36E', '\a', '\x83', '\x2', '\x2', '\x36E', 
		'\x36F', '\x5', '\x1E', '\x10', '\x2', '\x36F', '\x370', '\a', '\x84', 
		'\x2', '\x2', '\x370', '\x397', '\x3', '\x2', '\x2', '\x2', '\x371', '\x376', 
		'\a', ' ', '\x2', '\x2', '\x372', '\x373', '\a', '\x83', '\x2', '\x2', 
		'\x373', '\x374', '\x5', '\x6', '\x4', '\x2', '\x374', '\x375', '\a', 
		'\x84', '\x2', '\x2', '\x375', '\x377', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x397', '\x3', '\x2', '\x2', '\x2', '\x378', '\x37A', 
		'\a', '\x11', '\x2', '\x2', '\x379', '\x378', '\x3', '\x2', '\x2', '\x2', 
		'\x379', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x37B', '\x3', 
		'\x2', '\x2', '\x2', '\x37B', '\x381', '\a', '!', '\x2', '\x2', '\x37C', 
		'\x37E', '\a', '\x83', '\x2', '\x2', '\x37D', '\x37F', '\x5', '|', '?', 
		'\x2', '\x37E', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', 
		'\x3', '\x2', '\x2', '\x2', '\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', 
		'\x380', '\x382', '\a', '\x84', '\x2', '\x2', '\x381', '\x37C', '\x3', 
		'\x2', '\x2', '\x2', '\x381', '\x382', '\x3', '\x2', '\x2', '\x2', '\x382', 
		'\x383', '\x3', '\x2', '\x2', '\x2', '\x383', '\x397', '\x5', '\xAC', 
		'W', '\x2', '\x384', '\x385', '\a', 'Z', '\x2', '\x2', '\x385', '\x386', 
		'\a', '\x83', '\x2', '\x2', '\x386', '\x387', '\x5', '\x6', '\x4', '\x2', 
		'\x387', '\x388', '\a', '\x84', '\x2', '\x2', '\x388', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x389', '\x38A', '\a', '\x42', '\x2', '\x2', '\x38A', 
		'\x390', '\a', '\x83', '\x2', '\x2', '\x38B', '\x38C', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x38C', '\x38D', '\a', '\x85', '\x2', '\x2', '\x38D', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x38B', '\x3', '\x2', '\x2', 
		'\x2', '\x38F', '\x392', '\x3', '\x2', '\x2', '\x2', '\x390', '\x38E', 
		'\x3', '\x2', '\x2', '\x2', '\x390', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x393', '\x3', '\x2', '\x2', '\x2', '\x392', '\x390', '\x3', 
		'\x2', '\x2', '\x2', '\x393', '\x394', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x394', '\x395', '\a', '\x84', '\x2', '\x2', '\x395', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x396', 
		'\x31E', '\x3', '\x2', '\x2', '\x2', '\x396', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x396', '\x326', '\x3', '\x2', '\x2', '\x2', '\x396', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\x396', '\x328', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x329', '\x3', '\x2', '\x2', '\x2', '\x396', '\x32A', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x336', '\x3', '\x2', '\x2', '\x2', '\x396', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x396', '\x35F', '\x3', '\x2', '\x2', 
		'\x2', '\x396', '\x367', '\x3', '\x2', '\x2', '\x2', '\x396', '\x36C', 
		'\x3', '\x2', '\x2', '\x2', '\x396', '\x371', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x379', '\x3', '\x2', '\x2', '\x2', '\x396', '\x384', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x389', '\x3', '\x2', '\x2', '\x2', '\x397', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x398', '\x39B', '\x5', '\x1E', '\x10', 
		'\x2', '\x399', '\x39B', '\x5', 'N', '(', '\x2', '\x39A', '\x398', '\x3', 
		'\x2', '\x2', '\x2', '\x39A', '\x399', '\x3', '\x2', '\x2', '\x2', '\x39B', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\a', '\x61', '\x2', 
		'\x2', '\x39D', '\x39E', '\x5', '\x1E', '\x10', '\x2', '\x39E', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x3A1', '\a', '\x96', '\x2', '\x2', '\x3A0', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', '\x3', '\x2', '\x2', 
		'\x2', '\x3A1', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A3', 
		'\a', '\x85', '\x2', '\x2', '\x3A3', '\x3A5', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x3A4', '\x3A6', '\x5', '\x18', '\r', '\x2', '\x3A5', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\x3A5', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x3A6', 'Q', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A9', '\a', '\x96', 
		'\x2', '\x2', '\x3A8', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', 
		'\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x3AB', '\a', '\x81', '\x2', '\x2', '\x3AB', '\x3B0', '\x5', 
		'T', '+', '\x2', '\x3AC', '\x3AD', '\a', '\x86', '\x2', '\x2', '\x3AD', 
		'\x3AF', '\x5', 'T', '+', '\x2', '\x3AE', '\x3AC', '\x3', '\x2', '\x2', 
		'\x2', '\x3AF', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3AE', 
		'\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B1', '\x3', '\x2', '\x2', '\x2', 
		'\x3B1', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B0', '\x3', 
		'\x2', '\x2', '\x2', '\x3B3', '\x3B4', '\a', '\x82', '\x2', '\x2', '\x3B4', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x3B6', '\x3B7', '\a', '\x87', '\x2', '\x2', '\x3B7', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B5', '\x3', '\x2', '\x2', '\x2', 
		'\x3B8', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', '\x3', 
		'\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\x5', '\x1E', '\x10', '\x2', '\x3BB', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\t', '\t', '\x2', 
		'\x2', '\x3BD', 'W', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3C3', '\x5', 
		'\x1E', '\x10', '\x2', '\x3BF', '\x3C0', '\a', '\x86', '\x2', '\x2', '\x3C0', 
		'\x3C2', '\x5', '\x1E', '\x10', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', 
		'\x2', '\x2', '\x3C2', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'\x3C4', 'Y', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C3', '\x3', '\x2', 
		'\x2', '\x2', '\x3C6', '\x3C9', '\x5', '\\', '/', '\x2', '\x3C7', '\x3C9', 
		'\x5', '\x64', '\x33', '\x2', '\x3C8', '\x3C6', '\x3', '\x2', '\x2', '\x2', 
		'\x3C8', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C9', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x3CA', '\x3CF', '\a', '\x7F', '\x2', '\x2', '\x3CB', '\x3CD', 
		'\x5', '^', '\x30', '\x2', '\x3CC', '\x3CE', '\a', '\x86', '\x2', '\x2', 
		'\x3CD', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x3CE', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3CF', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D0', '\x3', '\x2', '\x2', 
		'\x2', '\x3D0', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', 
		'\a', '\x80', '\x2', '\x2', '\x3D2', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x3D3', '\x3D8', '\x5', '`', '\x31', '\x2', '\x3D4', '\x3D5', '\a', '\x86', 
		'\x2', '\x2', '\x3D5', '\x3D7', '\x5', '`', '\x31', '\x2', '\x3D6', '\x3D4', 
		'\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x3D8', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D9', '\x3', 
		'\x2', '\x2', '\x2', '\x3D9', '_', '\x3', '\x2', '\x2', '\x2', '\x3DA', 
		'\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3E1', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x3DC', '\x3DD', '\a', '\x81', '\x2', '\x2', '\x3DD', 
		'\x3DE', '\x5', '\x1E', '\x10', '\x2', '\x3DE', '\x3DF', '\a', '\x82', 
		'\x2', '\x2', '\x3DF', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DC', '\x3', '\x2', '\x2', '\x2', 
		'\x3E1', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E3', '\a', 
		'\x93', '\x2', '\x2', '\x3E3', '\x3E4', '\x5', '\x62', '\x32', '\x2', 
		'\x3E4', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E8', '\x5', 
		'\x1E', '\x10', '\x2', '\x3E6', '\x3E8', '\x5', 'Z', '.', '\x2', '\x3E7', 
		'\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E6', '\x3', '\x2', '\x2', 
		'\x2', '\x3E8', '\x63', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3EA', 
		'\a', '\x7F', '\x2', '\x2', '\x3EA', '\x3EF', '\x5', '\x66', '\x34', '\x2', 
		'\x3EB', '\x3EC', '\a', '\x86', '\x2', '\x2', '\x3EC', '\x3EE', '\x5', 
		'\x66', '\x34', '\x2', '\x3ED', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3EE', 
		'\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3ED', '\x3', '\x2', '\x2', 
		'\x2', '\x3EF', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x3F2', '\x3F4', '\a', '\x86', '\x2', '\x2', '\x3F3', '\x3F2', '\x3', 
		'\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F4', 
		'\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\a', '\x80', '\x2', 
		'\x2', '\x3F6', '\x65', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3FD', 
		'\x5', ' ', '\x11', '\x2', '\x3F8', '\x3F9', '\a', '\x7F', '\x2', '\x2', 
		'\x3F9', '\x3FA', '\x5', 'X', '-', '\x2', '\x3FA', '\x3FB', '\a', '\x80', 
		'\x2', '\x2', '\x3FB', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3F7', 
		'\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3F8', '\x3', '\x2', '\x2', '\x2', 
		'\x3FD', 'g', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x403', '\a', '\x7F', 
		'\x2', '\x2', '\x3FF', '\x401', '\x5', 'j', '\x36', '\x2', '\x400', '\x402', 
		'\a', '\x86', '\x2', '\x2', '\x401', '\x400', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\x404', '\x3', 
		'\x2', '\x2', '\x2', '\x403', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x403', 
		'\x404', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\x3', '\x2', '\x2', 
		'\x2', '\x405', '\x406', '\a', '\x80', '\x2', '\x2', '\x406', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x407', '\x40C', '\x5', 'l', '\x37', '\x2', '\x408', 
		'\x409', '\a', '\x86', '\x2', '\x2', '\x409', '\x40B', '\x5', 'l', '\x37', 
		'\x2', '\x40A', '\x408', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\x40C', '\x40A', '\x3', '\x2', '\x2', '\x2', 
		'\x40C', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x40D', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x40E', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x415', 
		'\x5', 'H', '%', '\x2', '\x410', '\x411', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x411', '\x412', '\a', '\x93', '\x2', '\x2', '\x412', '\x413', '\x5', 
		'\x1E', '\x10', '\x2', '\x413', '\x415', '\x3', '\x2', '\x2', '\x2', '\x414', 
		'\x40F', '\x3', '\x2', '\x2', '\x2', '\x414', '\x410', '\x3', '\x2', '\x2', 
		'\x2', '\x415', 'm', '\x3', '\x2', '\x2', '\x2', '\x416', '\x41F', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x417', '\x419', '\x5', 'p', '\x39', '\x2', '\x418', 
		'\x417', '\x3', '\x2', '\x2', '\x2', '\x418', '\x419', '\x3', '\x2', '\x2', 
		'\x2', '\x419', '\x420', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', 
		'\a', '\x97', '\x2', '\x2', '\x41B', '\x41D', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x41C', '\x41E', '\x5', 'p', '\x39', '\x2', '\x41D', '\x41C', 
		'\x3', '\x2', '\x2', '\x2', '\x41D', '\x41E', '\x3', '\x2', '\x2', '\x2', 
		'\x41E', '\x420', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x418', '\x3', 
		'\x2', '\x2', '\x2', '\x41F', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x420', 
		'\x428', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', '\a', '\x85', '\x2', 
		'\x2', '\x422', '\x424', '\x5', '\x1B4', '\xDB', '\x2', '\x423', '\x425', 
		'\x5', 'p', '\x39', '\x2', '\x424', '\x423', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x425', '\x3', '\x2', '\x2', '\x2', '\x425', '\x427', '\x3', 
		'\x2', '\x2', '\x2', '\x426', '\x421', '\x3', '\x2', '\x2', '\x2', '\x427', 
		'\x42A', '\x3', '\x2', '\x2', '\x2', '\x428', '\x426', '\x3', '\x2', '\x2', 
		'\x2', '\x428', '\x429', '\x3', '\x2', '\x2', '\x2', '\x429', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x42A', '\x428', '\x3', '\x2', '\x2', '\x2', '\x42B', 
		'\x42F', '\a', '\x94', '\x2', '\x2', '\x42C', '\x42E', '\a', '\x86', '\x2', 
		'\x2', '\x42D', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x431', 
		'\x3', '\x2', '\x2', '\x2', '\x42F', '\x42D', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\x430', '\x3', '\x2', '\x2', '\x2', '\x430', '\x432', '\x3', 
		'\x2', '\x2', '\x2', '\x431', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x432', 
		'\x433', '\a', '\x95', '\x2', '\x2', '\x433', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x434', '\x439', '\x5', '\b', '\x5', '\x2', '\x435', '\x438', 
		'\x5', '\x144', '\xA3', '\x2', '\x436', '\x438', '\a', '\x8B', '\x2', 
		'\x2', '\x437', '\x435', '\x3', '\x2', '\x2', '\x2', '\x437', '\x436', 
		'\x3', '\x2', '\x2', '\x2', '\x438', '\x43B', '\x3', '\x2', '\x2', '\x2', 
		'\x439', '\x437', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43A', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43B', 
		'\x439', '\x3', '\x2', '\x2', '\x2', '\x43C', '\x43E', '\a', '\x96', '\x2', 
		'\x2', '\x43D', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x43E', 
		'\x3', '\x2', '\x2', '\x2', '\x43E', '\x440', '\x3', '\x2', '\x2', '\x2', 
		'\x43F', '\x441', '\x5', 't', ';', '\x2', '\x440', '\x43F', '\x3', '\x2', 
		'\x2', '\x2', '\x440', '\x441', '\x3', '\x2', '\x2', '\x2', '\x441', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x442', '\x444', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x443', '\x442', '\x3', '\x2', '\x2', '\x2', '\x443', '\x444', 
		'\x3', '\x2', '\x2', '\x2', '\x444', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x445', '\x446', '\a', '\x7F', '\x2', '\x2', '\x446', '\x44B', '\x5', 
		'v', '<', '\x2', '\x447', '\x448', '\a', '\x86', '\x2', '\x2', '\x448', 
		'\x44A', '\x5', 'v', '<', '\x2', '\x449', '\x447', '\x3', '\x2', '\x2', 
		'\x2', '\x44A', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x449', 
		'\x3', '\x2', '\x2', '\x2', '\x44B', '\x44C', '\x3', '\x2', '\x2', '\x2', 
		'\x44C', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x44D', '\x44B', '\x3', 
		'\x2', '\x2', '\x2', '\x44E', '\x44F', '\a', '\x80', '\x2', '\x2', '\x44F', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x450', '\x451', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x451', '\x452', '\a', '\x87', '\x2', '\x2', '\x452', '\x453', 
		'\x5', '\x1E', '\x10', '\x2', '\x453', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x454', '\x456', '\a', '\x11', '\x2', '\x2', '\x455', '\x454', '\x3', 
		'\x2', '\x2', '\x2', '\x455', '\x456', '\x3', '\x2', '\x2', '\x2', '\x456', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x457', '\x458', '\x5', 'z', '>', 
		'\x2', '\x458', '\x459', '\x5', '\x178', '\xBD', '\x2', '\x459', '\x45A', 
		'\x5', '\x82', '\x42', '\x2', '\x45A', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x45B', '\x45C', '\a', '\x83', '\x2', '\x2', '\x45C', '\x467', '\a', 
		'\x84', '\x2', '\x2', '\x45D', '\x45E', '\a', '\x83', '\x2', '\x2', '\x45E', 
		'\x45F', '\x5', '|', '?', '\x2', '\x45F', '\x460', '\a', '\x84', '\x2', 
		'\x2', '\x460', '\x467', '\x3', '\x2', '\x2', '\x2', '\x461', '\x462', 
		'\a', '\x83', '\x2', '\x2', '\x462', '\x463', '\x5', '\x80', '\x41', '\x2', 
		'\x463', '\x464', '\a', '\x84', '\x2', '\x2', '\x464', '\x467', '\x3', 
		'\x2', '\x2', '\x2', '\x465', '\x467', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x466', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x466', '\x45D', '\x3', 
		'\x2', '\x2', '\x2', '\x466', '\x461', '\x3', '\x2', '\x2', '\x2', '\x466', 
		'\x465', '\x3', '\x2', '\x2', '\x2', '\x467', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x468', '\x46D', '\x5', '~', '@', '\x2', '\x469', '\x46A', '\a', 
		'\x86', '\x2', '\x2', '\x46A', '\x46C', '\x5', '~', '@', '\x2', '\x46B', 
		'\x469', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x46F', '\x3', '\x2', '\x2', 
		'\x2', '\x46D', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x46F', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x470', '\x472', '\t', 
		'\x4', '\x2', '\x2', '\x471', '\x470', '\x3', '\x2', '\x2', '\x2', '\x471', 
		'\x472', '\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x474', '\x5', '\x6', '\x4', '\x2', '\x474', '\x475', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x475', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x476', '\x47B', '\x5', '\x1B4', '\xDB', '\x2', '\x477', '\x478', '\a', 
		'\x86', '\x2', '\x2', '\x478', '\x47A', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x479', '\x477', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x47D', '\x3', 
		'\x2', '\x2', '\x2', '\x47B', '\x479', '\x3', '\x2', '\x2', '\x2', '\x47B', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x47D', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x481', 
		'\x5', 'L', '\'', '\x2', '\x47F', '\x481', '\x5', '\xAC', 'W', '\x2', 
		'\x480', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x480', '\x47F', '\x3', 
		'\x2', '\x2', '\x2', '\x481', '\x83', '\x3', '\x2', '\x2', '\x2', '\x482', 
		'\x483', '\x5', '\x86', '\x44', '\x2', '\x483', '\x484', '\x5', '\x88', 
		'\x45', '\x2', '\x484', '\x85', '\x3', '\x2', '\x2', '\x2', '\x485', '\x487', 
		'\a', '\x32', '\x2', '\x2', '\x486', '\x488', '\x5', '\x6', '\x4', '\x2', 
		'\x487', '\x486', '\x3', '\x2', '\x2', '\x2', '\x487', '\x488', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x489', '\x3', '\x2', '\x2', '\x2', '\x489', 
		'\x48A', '\x5', '\x1B4', '\xDB', '\x2', '\x48A', '\x48B', '\a', '\x38', 
		'\x2', '\x2', '\x48B', '\x48C', '\x5', '\x1E', '\x10', '\x2', '\x48C', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48F', '\x5', '\x8A', '\x46', 
		'\x2', '\x48E', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x48F', '\x492', 
		'\x3', '\x2', '\x2', '\x2', '\x490', '\x48E', '\x3', '\x2', '\x2', '\x2', 
		'\x490', '\x491', '\x3', '\x2', '\x2', '\x2', '\x491', '\x493', '\x3', 
		'\x2', '\x2', '\x2', '\x492', '\x490', '\x3', '\x2', '\x2', '\x2', '\x493', 
		'\x495', '\x5', '\x96', 'L', '\x2', '\x494', '\x496', '\x5', '\x98', 'M', 
		'\x2', '\x495', '\x494', '\x3', '\x2', '\x2', '\x2', '\x495', '\x496', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x497', '\x49D', '\x5', '\x86', '\x44', '\x2', '\x498', '\x49D', '\x5', 
		'\x8C', 'G', '\x2', '\x499', '\x49D', '\x5', '\x8E', 'H', '\x2', '\x49A', 
		'\x49D', '\x5', '\x90', 'I', '\x2', '\x49B', '\x49D', '\x5', '\x92', 'J', 
		'\x2', '\x49C', '\x497', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x498', 
		'\x3', '\x2', '\x2', '\x2', '\x49C', '\x499', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\x49A', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49B', '\x3', 
		'\x2', '\x2', '\x2', '\x49D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x49E', 
		'\x49F', '\a', '?', '\x2', '\x2', '\x49F', '\x4A0', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x4A0', '\x4A1', '\a', '\x93', '\x2', '\x2', '\x4A1', '\x4A2', 
		'\x5', '\x1E', '\x10', '\x2', '\x4A2', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x4A3', '\x4A4', '\a', 'q', '\x2', '\x2', '\x4A4', '\x4A5', '\x5', '\x1E', 
		'\x10', '\x2', '\x4A5', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A8', 
		'\a', '>', '\x2', '\x2', '\x4A7', '\x4A9', '\x5', '\x6', '\x4', '\x2', 
		'\x4A8', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A9', '\x3', 
		'\x2', '\x2', '\x2', '\x4A9', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AA', 
		'\x4AB', '\x5', '\x1B4', '\xDB', '\x2', '\x4AB', '\x4AC', '\a', '\x38', 
		'\x2', '\x2', '\x4AC', '\x4AD', '\x5', '\x1E', '\x10', '\x2', '\x4AD', 
		'\x4AE', '\a', 'G', '\x2', '\x2', '\x4AE', '\x4AF', '\x5', '\x1E', '\x10', 
		'\x2', '\x4AF', '\x4B0', '\a', '(', '\x2', '\x2', '\x4B0', '\x4B3', '\x5', 
		'\x1E', '\x10', '\x2', '\x4B1', '\x4B2', '\a', '<', '\x2', '\x2', '\x4B2', 
		'\x4B4', '\x5', '\x1B4', '\xDB', '\x2', '\x4B3', '\x4B1', '\x3', '\x2', 
		'\x2', '\x2', '\x4B3', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B6', '\a', 'I', '\x2', '\x2', 
		'\x4B6', '\x4BB', '\x5', '\x94', 'K', '\x2', '\x4B7', '\x4B8', '\a', '\x86', 
		'\x2', '\x2', '\x4B8', '\x4BA', '\x5', '\x94', 'K', '\x2', '\x4B9', '\x4B7', 
		'\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BD', '\x3', '\x2', '\x2', '\x2', 
		'\x4BB', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BC', '\x3', 
		'\x2', '\x2', '\x2', '\x4BC', '\x93', '\x3', '\x2', '\x2', '\x2', '\x4BD', 
		'\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4C0', '\x5', '\x1E', 
		'\x10', '\x2', '\x4BF', '\x4C1', '\t', '\n', '\x2', '\x2', '\x4C0', '\x4BF', 
		'\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C1', '\x3', '\x2', '\x2', '\x2', 
		'\x4C1', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\a', 'W', 
		'\x2', '\x2', '\x4C3', '\x4CA', '\x5', '\x1E', '\x10', '\x2', '\x4C4', 
		'\x4C5', '\a', '\x35', '\x2', '\x2', '\x4C5', '\x4C6', '\x5', '\x1E', 
		'\x10', '\x2', '\x4C6', '\x4C7', '\a', '\x16', '\x2', '\x2', '\x4C7', 
		'\x4C8', '\x5', '\x1E', '\x10', '\x2', '\x4C8', '\x4CA', '\x3', '\x2', 
		'\x2', '\x2', '\x4C9', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4C4', 
		'\x3', '\x2', '\x2', '\x2', '\x4CA', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x4CB', '\x4CC', '\a', '<', '\x2', '\x2', '\x4CC', '\x4CD', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x4CD', '\x4CE', '\x5', '\x88', '\x45', '\x2', '\x4CE', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D3', '\x5', '\xA6', 'T', 
		'\x2', '\x4D0', '\x4D3', '\x5', '\x9C', 'O', '\x2', '\x4D1', '\x4D3', 
		'\x5', '\xA8', 'U', '\x2', '\x4D2', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\x4D2', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D1', '\x3', 
		'\x2', '\x2', '\x2', '\x4D3', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x4D4', 
		'\x4D5', '\x5', '\xAE', 'X', '\x2', '\x4D5', '\x4D6', '\a', '\x88', '\x2', 
		'\x2', '\x4D6', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D8', 
		'\x5', '\xB6', '\\', '\x2', '\x4D8', '\x4D9', '\a', '\x88', '\x2', '\x2', 
		'\x4D9', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4DC', '\x5', 
		'\x9E', 'P', '\x2', '\x4DB', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4DB', 
		'\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4DA', '\x3', '\x2', '\x2', 
		'\x2', '\x4DC', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4DE', 
		'\x5', '\xA0', 'Q', '\x2', '\x4DE', '\x4DF', '\x5', '\xA4', 'S', '\x2', 
		'\x4DF', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E2', '\x5', 
		'\xA2', 'R', '\x2', '\x4E1', '\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4E1', 
		'\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E3', '\x3', '\x2', '\x2', 
		'\x2', '\x4E3', '\x4E4', '\x5', '\x114', '\x8B', '\x2', '\x4E4', '\x4E6', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x4E5', '\x4E7', '\x5', '\xE8', 'u', '\x2', 
		'\x4E6', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E7', '\x3', 
		'\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E8', 
		'\x4EA', '\a', '\x83', '\x2', '\x2', '\x4E9', '\x4EB', '\x5', '\x11A', 
		'\x8E', '\x2', '\x4EA', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4EA', 
		'\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EC', '\x3', '\x2', '\x2', 
		'\x2', '\x4EC', '\x4EE', '\a', '\x84', '\x2', '\x2', '\x4ED', '\x4EF', 
		'\x5', '\xF0', 'y', '\x2', '\x4EE', '\x4ED', '\x3', '\x2', '\x2', '\x2', 
		'\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x4F0', '\x4F2', '\t', '\v', '\x2', '\x2', '\x4F1', 
		'\x4F3', '\a', '\\', '\x2', '\x2', '\x4F2', '\x4F1', '\x3', '\x2', '\x2', 
		'\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\a', '\\', '\x2', '\x2', 
		'\x4F5', '\x4F7', '\t', '\v', '\x2', '\x2', '\x4F6', '\x4F0', '\x3', '\x2', 
		'\x2', '\x2', '\x4F6', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x4F8', '\x4FE', '\x5', '\xAC', 'W', '\x2', 
		'\x4F9', '\x4FA', '\x5', '\x178', '\xBD', '\x2', '\x4FA', '\x4FB', '\x5', 
		'L', '\'', '\x2', '\x4FB', '\x4FC', '\a', '\x88', '\x2', '\x2', '\x4FC', 
		'\x4FE', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x4F8', '\x3', '\x2', '\x2', 
		'\x2', '\x4FD', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x4FF', '\x500', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x500', '\x501', '\a', '\x87', '\x2', '\x2', '\x501', '\x502', 
		'\x5', '\x9A', 'N', '\x2', '\x502', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x503', '\x506', '\x5', '\xAC', 'W', '\x2', '\x504', '\x506', '\x5', 
		'\xAA', 'V', '\x2', '\x505', '\x503', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x504', '\x3', '\x2', '\x2', '\x2', '\x506', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x507', '\x58A', '\a', '\x88', '\x2', '\x2', '\x508', '\x509', 
		'\x5', '\x1E', '\x10', '\x2', '\x509', '\x50A', '\a', '\x88', '\x2', '\x2', 
		'\x50A', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50C', '\a', 
		'\x36', '\x2', '\x2', '\x50C', '\x50D', '\a', '\x83', '\x2', '\x2', '\x50D', 
		'\x50E', '\x5', '\x1E', '\x10', '\x2', '\x50E', '\x50F', '\a', '\x84', 
		'\x2', '\x2', '\x50F', '\x512', '\x5', '\xB8', ']', '\x2', '\x510', '\x511', 
		'\a', '&', '\x2', '\x2', '\x511', '\x513', '\x5', '\xB8', ']', '\x2', 
		'\x512', '\x510', '\x3', '\x2', '\x2', '\x2', '\x512', '\x513', '\x3', 
		'\x2', '\x2', '\x2', '\x513', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x514', 
		'\x515', '\a', '_', '\x2', '\x2', '\x515', '\x516', '\a', '\x83', '\x2', 
		'\x2', '\x516', '\x517', '\x5', '\x1E', '\x10', '\x2', '\x517', '\x518', 
		'\a', '\x84', '\x2', '\x2', '\x518', '\x51C', '\a', '\x7F', '\x2', '\x2', 
		'\x519', '\x51B', '\x5', '\xBA', '^', '\x2', '\x51A', '\x519', '\x3', 
		'\x2', '\x2', '\x2', '\x51B', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x51C', 
		'\x51A', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51D', '\x3', '\x2', '\x2', 
		'\x2', '\x51D', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x51E', '\x51C', 
		'\x3', '\x2', '\x2', '\x2', '\x51F', '\x520', '\a', '\x80', '\x2', '\x2', 
		'\x520', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', '\a', 
		'r', '\x2', '\x2', '\x522', '\x523', '\a', '\x83', '\x2', '\x2', '\x523', 
		'\x524', '\x5', '\x1E', '\x10', '\x2', '\x524', '\x525', '\a', '\x84', 
		'\x2', '\x2', '\x525', '\x526', '\x5', '\xA8', 'U', '\x2', '\x526', '\x58A', 
		'\x3', '\x2', '\x2', '\x2', '\x527', '\x528', '\a', '#', '\x2', '\x2', 
		'\x528', '\x529', '\x5', '\xA8', 'U', '\x2', '\x529', '\x52A', '\a', 'r', 
		'\x2', '\x2', '\x52A', '\x52B', '\a', '\x83', '\x2', '\x2', '\x52B', '\x52C', 
		'\x5', '\x1E', '\x10', '\x2', '\x52C', '\x52D', '\a', '\x84', '\x2', '\x2', 
		'\x52D', '\x52E', '\a', '\x88', '\x2', '\x2', '\x52E', '\x58A', '\x3', 
		'\x2', '\x2', '\x2', '\x52F', '\x530', '\a', '\x30', '\x2', '\x2', '\x530', 
		'\x532', '\a', '\x83', '\x2', '\x2', '\x531', '\x533', '\x5', '\xC2', 
		'\x62', '\x2', '\x532', '\x531', '\x3', '\x2', '\x2', '\x2', '\x532', 
		'\x533', '\x3', '\x2', '\x2', '\x2', '\x533', '\x534', '\x3', '\x2', '\x2', 
		'\x2', '\x534', '\x536', '\a', '\x88', '\x2', '\x2', '\x535', '\x537', 
		'\x5', '\x1E', '\x10', '\x2', '\x536', '\x535', '\x3', '\x2', '\x2', '\x2', 
		'\x536', '\x537', '\x3', '\x2', '\x2', '\x2', '\x537', '\x538', '\x3', 
		'\x2', '\x2', '\x2', '\x538', '\x53A', '\a', '\x88', '\x2', '\x2', '\x539', 
		'\x53B', '\x5', '\xC4', '\x63', '\x2', '\x53A', '\x539', '\x3', '\x2', 
		'\x2', '\x2', '\x53A', '\x53B', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53C', 
		'\x3', '\x2', '\x2', '\x2', '\x53C', '\x53D', '\a', '\x84', '\x2', '\x2', 
		'\x53D', '\x58A', '\x5', '\xA8', 'U', '\x2', '\x53E', '\x540', '\a', '\x12', 
		'\x2', '\x2', '\x53F', '\x53E', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x540', 
		'\x3', '\x2', '\x2', '\x2', '\x540', '\x541', '\x3', '\x2', '\x2', '\x2', 
		'\x541', '\x542', '\a', '\x31', '\x2', '\x2', '\x542', '\x543', '\a', 
		'\x83', '\x2', '\x2', '\x543', '\x544', '\x5', '\xB0', 'Y', '\x2', '\x544', 
		'\x545', '\x5', '\x1B4', '\xDB', '\x2', '\x545', '\x546', '\a', '\x38', 
		'\x2', '\x2', '\x546', '\x547', '\x5', '\x1E', '\x10', '\x2', '\x547', 
		'\x548', '\a', '\x84', '\x2', '\x2', '\x548', '\x549', '\x5', '\xA8', 
		'U', '\x2', '\x549', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x54B', 
		'\a', '\x15', '\x2', '\x2', '\x54B', '\x58A', '\a', '\x88', '\x2', '\x2', 
		'\x54C', '\x54D', '\a', '\x1E', '\x2', '\x2', '\x54D', '\x58A', '\a', 
		'\x88', '\x2', '\x2', '\x54E', '\x553', '\a', '\x34', '\x2', '\x2', '\x54F', 
		'\x554', '\x5', '\x1B4', '\xDB', '\x2', '\x550', '\x551', '\a', '\x18', 
		'\x2', '\x2', '\x551', '\x554', '\x5', '\x1E', '\x10', '\x2', '\x552', 
		'\x554', '\a', ' ', '\x2', '\x2', '\x553', '\x54F', '\x3', '\x2', '\x2', 
		'\x2', '\x553', '\x550', '\x3', '\x2', '\x2', '\x2', '\x553', '\x552', 
		'\x3', '\x2', '\x2', '\x2', '\x554', '\x555', '\x3', '\x2', '\x2', '\x2', 
		'\x555', '\x58A', '\a', '\x88', '\x2', '\x2', '\x556', '\x558', '\a', 
		'T', '\x2', '\x2', '\x557', '\x559', '\x5', '\x1E', '\x10', '\x2', '\x558', 
		'\x557', '\x3', '\x2', '\x2', '\x2', '\x558', '\x559', '\x3', '\x2', '\x2', 
		'\x2', '\x559', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x58A', 
		'\a', '\x88', '\x2', '\x2', '\x55B', '\x55D', '\a', '\x61', '\x2', '\x2', 
		'\x55C', '\x55E', '\x5', '\x1E', '\x10', '\x2', '\x55D', '\x55C', '\x3', 
		'\x2', '\x2', '\x2', '\x55D', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x55E', 
		'\x55F', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x58A', '\a', '\x88', '\x2', 
		'\x2', '\x560', '\x561', '\a', '\x63', '\x2', '\x2', '\x561', '\x567', 
		'\x5', '\xAC', 'W', '\x2', '\x562', '\x564', '\x5', '\xC6', '\x64', '\x2', 
		'\x563', '\x565', '\x5', '\xCE', 'h', '\x2', '\x564', '\x563', '\x3', 
		'\x2', '\x2', '\x2', '\x564', '\x565', '\x3', '\x2', '\x2', '\x2', '\x565', 
		'\x568', '\x3', '\x2', '\x2', '\x2', '\x566', '\x568', '\x5', '\xCE', 
		'h', '\x2', '\x567', '\x562', '\x3', '\x2', '\x2', '\x2', '\x567', '\x566', 
		'\x3', '\x2', '\x2', '\x2', '\x568', '\x58A', '\x3', '\x2', '\x2', '\x2', 
		'\x569', '\x56A', '\a', '\x1B', '\x2', '\x2', '\x56A', '\x58A', '\x5', 
		'\xAC', 'W', '\x2', '\x56B', '\x56C', '\a', 'g', '\x2', '\x2', '\x56C', 
		'\x58A', '\x5', '\xAC', 'W', '\x2', '\x56D', '\x56E', '\a', '@', '\x2', 
		'\x2', '\x56E', '\x56F', '\a', '\x83', '\x2', '\x2', '\x56F', '\x570', 
		'\x5', '\x1E', '\x10', '\x2', '\x570', '\x571', '\a', '\x84', '\x2', '\x2', 
		'\x571', '\x572', '\x5', '\xA8', 'U', '\x2', '\x572', '\x58A', '\x3', 
		'\x2', '\x2', '\x2', '\x573', '\x574', '\a', 'k', '\x2', '\x2', '\x574', 
		'\x575', '\a', '\x83', '\x2', '\x2', '\x575', '\x576', '\x5', '\xD0', 
		'i', '\x2', '\x576', '\x577', '\a', '\x84', '\x2', '\x2', '\x577', '\x578', 
		'\x5', '\xA8', 'U', '\x2', '\x578', '\x58A', '\x3', '\x2', '\x2', '\x2', 
		'\x579', '\x57D', '\a', 's', '\x2', '\x2', '\x57A', '\x57B', '\a', 'T', 
		'\x2', '\x2', '\x57B', '\x57E', '\x5', '\x1E', '\x10', '\x2', '\x57C', 
		'\x57E', '\a', '\x15', '\x2', '\x2', '\x57D', '\x57A', '\x3', '\x2', '\x2', 
		'\x2', '\x57D', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', 
		'\x3', '\x2', '\x2', '\x2', '\x57F', '\x58A', '\a', '\x88', '\x2', '\x2', 
		'\x580', '\x581', '\a', 'i', '\x2', '\x2', '\x581', '\x58A', '\x5', '\xAC', 
		'W', '\x2', '\x582', '\x583', '\a', '.', '\x2', '\x2', '\x583', '\x584', 
		'\a', '\x83', '\x2', '\x2', '\x584', '\x585', '\x5', '\x16C', '\xB7', 
		'\x2', '\x585', '\x586', '\x5', '\x16E', '\xB8', '\x2', '\x586', '\x587', 
		'\a', '\x84', '\x2', '\x2', '\x587', '\x588', '\x5', '\xA8', 'U', '\x2', 
		'\x588', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x589', '\x507', '\x3', 
		'\x2', '\x2', '\x2', '\x589', '\x508', '\x3', '\x2', '\x2', '\x2', '\x589', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x589', '\x514', '\x3', '\x2', '\x2', 
		'\x2', '\x589', '\x521', '\x3', '\x2', '\x2', '\x2', '\x589', '\x527', 
		'\x3', '\x2', '\x2', '\x2', '\x589', '\x52F', '\x3', '\x2', '\x2', '\x2', 
		'\x589', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x589', '\x54A', '\x3', 
		'\x2', '\x2', '\x2', '\x589', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x589', 
		'\x54E', '\x3', '\x2', '\x2', '\x2', '\x589', '\x556', '\x3', '\x2', '\x2', 
		'\x2', '\x589', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x589', '\x560', 
		'\x3', '\x2', '\x2', '\x2', '\x589', '\x569', '\x3', '\x2', '\x2', '\x2', 
		'\x589', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x589', '\x56D', '\x3', 
		'\x2', '\x2', '\x2', '\x589', '\x573', '\x3', '\x2', '\x2', '\x2', '\x589', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x589', '\x580', '\x3', '\x2', '\x2', 
		'\x2', '\x589', '\x582', '\x3', '\x2', '\x2', '\x2', '\x58A', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x58B', '\x58D', '\a', '\x7F', '\x2', '\x2', 
		'\x58C', '\x58E', '\x5', '\xC0', '\x61', '\x2', '\x58D', '\x58C', '\x3', 
		'\x2', '\x2', '\x2', '\x58D', '\x58E', '\x3', '\x2', '\x2', '\x2', '\x58E', 
		'\x58F', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x590', '\a', '\x80', '\x2', 
		'\x2', '\x590', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x591', '\x596', 
		'\a', 'k', '\x2', '\x2', '\x592', '\x596', '\a', 'R', '\x2', '\x2', '\x593', 
		'\x594', '\a', 'R', '\x2', '\x2', '\x594', '\x596', '\a', 'Q', '\x2', 
		'\x2', '\x595', '\x591', '\x3', '\x2', '\x2', '\x2', '\x595', '\x592', 
		'\x3', '\x2', '\x2', '\x2', '\x595', '\x593', '\x3', '\x2', '\x2', '\x2', 
		'\x595', '\x596', '\x3', '\x2', '\x2', '\x2', '\x596', '\x597', '\x3', 
		'\x2', '\x2', '\x2', '\x597', '\x598', '\x5', '\xB0', 'Y', '\x2', '\x598', 
		'\x59F', '\x5', '\xB2', 'Z', '\x2', '\x599', '\x59A', '\a', '\x86', '\x2', 
		'\x2', '\x59A', '\x59B', '\x5', '\xB2', 'Z', '\x2', '\x59B', '\x59C', 
		'\x6', 'X', '\x2', '\x2', '\x59C', '\x59E', '\x3', '\x2', '\x2', '\x2', 
		'\x59D', '\x599', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x5A1', '\x3', 
		'\x2', '\x2', '\x2', '\x59F', '\x59D', '\x3', '\x2', '\x2', '\x2', '\x59F', 
		'\x5A0', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A7', '\x3', '\x2', '\x2', 
		'\x2', '\x5A1', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x5A2', '\x5A3', 
		'\a', '.', '\x2', '\x2', '\x5A3', '\x5A4', '\x5', '\x16C', '\xB7', '\x2', 
		'\x5A4', '\x5A5', '\x5', '\x16E', '\xB8', '\x2', '\x5A5', '\x5A7', '\x3', 
		'\x2', '\x2', '\x2', '\x5A6', '\x595', '\x3', '\x2', '\x2', '\x2', '\x5A6', 
		'\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x5A8', '\x5AB', '\a', 'l', '\x2', '\x2', '\x5A9', '\x5AB', '\x5', 
		'\x6', '\x4', '\x2', '\x5AA', '\x5A8', '\x3', '\x2', '\x2', '\x2', '\x5AA', 
		'\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AB', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x5AC', '\x5B2', '\x5', '\x1B4', '\xDB', '\x2', '\x5AD', '\x5AF', 
		'\a', '\x93', '\x2', '\x2', '\x5AE', '\x5B0', '\a', 'R', '\x2', '\x2', 
		'\x5AF', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B0', '\x3', 
		'\x2', '\x2', '\x2', '\x5B0', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5B1', 
		'\x5B3', '\x5', '\xB4', '[', '\x2', '\x5B2', '\x5AD', '\x3', '\x2', '\x2', 
		'\x2', '\x5B2', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B8', '\x5', '\x1E', '\x10', '\x2', 
		'\x5B5', '\x5B8', '\x5', '\x146', '\xA4', '\x2', '\x5B6', '\x5B8', '\x5', 
		'\x176', '\xBC', '\x2', '\x5B7', '\x5B4', '\x3', '\x2', '\x2', '\x2', 
		'\x5B7', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5B7', '\x5B6', '\x3', 
		'\x2', '\x2', '\x2', '\x5B8', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x5B9', 
		'\x5BA', '\a', '\x1D', '\x2', '\x2', '\x5BA', '\x5BB', '\x5', '\x6', '\x4', 
		'\x2', '\x5BB', '\x5BC', '\x5', '\x10A', '\x86', '\x2', '\x5BC', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5C0', '\x5', '\xAC', 'W', '\x2', 
		'\x5BE', '\x5C0', '\x5', '\xAA', 'V', '\x2', '\x5BF', '\x5BD', '\x3', 
		'\x2', '\x2', '\x2', '\x5BF', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5C0', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C3', '\x5', '\xBC', '_', 
		'\x2', '\x5C2', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C4', 
		'\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C2', '\x3', '\x2', '\x2', '\x2', 
		'\x5C4', '\x5C5', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\x3', 
		'\x2', '\x2', '\x2', '\x5C6', '\x5C7', '\x5', '\xC0', '\x61', '\x2', '\x5C7', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C9', '\a', '\x18', '\x2', 
		'\x2', '\x5C9', '\x5CB', '\x5', '\x1E', '\x10', '\x2', '\x5CA', '\x5CC', 
		'\x5', '\xBE', '`', '\x2', '\x5CB', '\x5CA', '\x3', '\x2', '\x2', '\x2', 
		'\x5CB', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5CD', '\x5CE', '\a', '\x87', '\x2', '\x2', '\x5CE', 
		'\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D0', '\a', ' ', '\x2', 
		'\x2', '\x5D0', '\x5D2', '\a', '\x87', '\x2', '\x2', '\x5D1', '\x5C8', 
		'\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5CF', '\x3', '\x2', '\x2', '\x2', 
		'\x5D2', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x5D3', '\x5D4', '\a', 'p', 
		'\x2', '\x2', '\x5D4', '\x5D5', '\x5', '\x1E', '\x10', '\x2', '\x5D5', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D8', '\x5', '\x9A', 'N', 
		'\x2', '\x5D7', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D9', 
		'\x3', '\x2', '\x2', '\x2', '\x5D9', '\x5D7', '\x3', '\x2', '\x2', '\x2', 
		'\x5D9', '\x5DA', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x5DB', '\x5E5', '\x5', '\xAE', 'X', '\x2', '\x5DC', 
		'\x5E1', '\x5', '\x1E', '\x10', '\x2', '\x5DD', '\x5DE', '\a', '\x86', 
		'\x2', '\x2', '\x5DE', '\x5E0', '\x5', '\x1E', '\x10', '\x2', '\x5DF', 
		'\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5E0', '\x5E3', '\x3', '\x2', '\x2', 
		'\x2', '\x5E1', '\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5E2', 
		'\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E5', '\x3', '\x2', '\x2', '\x2', 
		'\x5E3', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5DB', '\x3', 
		'\x2', '\x2', '\x2', '\x5E4', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5E5', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5EB', '\x5', '\x1E', '\x10', 
		'\x2', '\x5E7', '\x5E8', '\a', '\x86', '\x2', '\x2', '\x5E8', '\x5EA', 
		'\x5', '\x1E', '\x10', '\x2', '\x5E9', '\x5E7', '\x3', '\x2', '\x2', '\x2', 
		'\x5EA', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5E9', '\x3', 
		'\x2', '\x2', '\x2', '\x5EB', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EC', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5EE', '\x5F2', '\x5', '\xC8', '\x65', '\x2', '\x5EF', '\x5F1', 
		'\x5', '\xC8', '\x65', '\x2', '\x5F0', '\x5EF', '\x3', '\x2', '\x2', '\x2', 
		'\x5F1', '\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F0', '\x3', 
		'\x2', '\x2', '\x2', '\x5F2', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F3', 
		'\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F2', '\x3', '\x2', '\x2', 
		'\x2', '\x5F5', '\x5F7', '\x5', '\xCA', '\x66', '\x2', '\x5F6', '\x5F5', 
		'\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\x3', '\x2', '\x2', '\x2', 
		'\x5F7', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5FA', '\x5', 
		'\xCA', '\x66', '\x2', '\x5F9', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5F9', 
		'\x5F8', '\x3', '\x2', '\x2', '\x2', '\x5FA', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\x5FB', '\x5FC', '\a', '\x19', '\x2', '\x2', '\x5FC', '\x5FD', 
		'\a', '\x83', '\x2', '\x2', '\x5FD', '\x5FF', '\x5', '\x16', '\f', '\x2', 
		'\x5FE', '\x600', '\x5', '\x1B4', '\xDB', '\x2', '\x5FF', '\x5FE', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '\x600', '\x3', '\x2', '\x2', '\x2', '\x600', 
		'\x601', '\x3', '\x2', '\x2', '\x2', '\x601', '\x603', '\a', '\x84', '\x2', 
		'\x2', '\x602', '\x604', '\x5', '\xCC', 'g', '\x2', '\x603', '\x602', 
		'\x3', '\x2', '\x2', '\x2', '\x603', '\x604', '\x3', '\x2', '\x2', '\x2', 
		'\x604', '\x605', '\x3', '\x2', '\x2', '\x2', '\x605', '\x606', '\x5', 
		'\xAC', 'W', '\x2', '\x606', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x607', 
		'\x609', '\a', '\x19', '\x2', '\x2', '\x608', '\x60A', '\x5', '\xCC', 
		'g', '\x2', '\x609', '\x608', '\x3', '\x2', '\x2', '\x2', '\x609', '\x60A', 
		'\x3', '\x2', '\x2', '\x2', '\x60A', '\x60B', '\x3', '\x2', '\x2', '\x2', 
		'\x60B', '\x60C', '\x5', '\xAC', 'W', '\x2', '\x60C', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x60D', '\x60E', '\a', 'p', '\x2', '\x2', '\x60E', '\x60F', 
		'\a', '\x83', '\x2', '\x2', '\x60F', '\x610', '\x5', '\x1E', '\x10', '\x2', 
		'\x610', '\x611', '\a', '\x84', '\x2', '\x2', '\x611', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x612', '\x613', '\a', '-', '\x2', '\x2', '\x613', 
		'\x614', '\x5', '\xAC', 'W', '\x2', '\x614', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\x615', '\x618', '\x5', '\xAE', 'X', '\x2', '\x616', '\x618', 
		'\x5', '\x1E', '\x10', '\x2', '\x617', '\x615', '\x3', '\x2', '\x2', '\x2', 
		'\x617', '\x616', '\x3', '\x2', '\x2', '\x2', '\x618', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x619', '\x61A', '\a', '\x43', '\x2', '\x2', '\x61A', 
		'\x61B', '\x5', '\xD4', 'k', '\x2', '\x61B', '\x61D', '\x5', '\xD6', 'l', 
		'\x2', '\x61C', '\x61E', '\a', '\x88', '\x2', '\x2', '\x61D', '\x61C', 
		'\x3', '\x2', '\x2', '\x2', '\x61D', '\x61E', '\x3', '\x2', '\x2', '\x2', 
		'\x61E', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x61F', '\x624', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x620', '\x621', '\a', '\x85', '\x2', '\x2', 
		'\x621', '\x623', '\x5', '\x1B4', '\xDB', '\x2', '\x622', '\x620', '\x3', 
		'\x2', '\x2', '\x2', '\x623', '\x626', '\x3', '\x2', '\x2', '\x2', '\x624', 
		'\x622', '\x3', '\x2', '\x2', '\x2', '\x624', '\x625', '\x3', '\x2', '\x2', 
		'\x2', '\x625', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x626', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x627', '\x629', '\a', '\x7F', '\x2', '\x2', 
		'\x628', '\x62A', '\x5', '\xD8', 'm', '\x2', '\x629', '\x628', '\x3', 
		'\x2', '\x2', '\x2', '\x629', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x62A', 
		'\x62C', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x62D', '\x5', '\xDC', 
		'o', '\x2', '\x62C', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x62C', '\x62D', 
		'\x3', '\x2', '\x2', '\x2', '\x62D', '\x62F', '\x3', '\x2', '\x2', '\x2', 
		'\x62E', '\x630', '\x5', '\xE0', 'q', '\x2', '\x62F', '\x62E', '\x3', 
		'\x2', '\x2', '\x2', '\x62F', '\x630', '\x3', '\x2', '\x2', '\x2', '\x630', 
		'\x631', '\x3', '\x2', '\x2', '\x2', '\x631', '\x632', '\a', '\x80', '\x2', 
		'\x2', '\x632', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x633', '\x635', 
		'\x5', '\xDA', 'n', '\x2', '\x634', '\x633', '\x3', '\x2', '\x2', '\x2', 
		'\x635', '\x636', '\x3', '\x2', '\x2', '\x2', '\x636', '\x634', '\x3', 
		'\x2', '\x2', '\x2', '\x636', '\x637', '\x3', '\x2', '\x2', '\x2', '\x637', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x638', '\x639', '\a', '+', '\x2', 
		'\x2', '\x639', '\x63A', '\a', '\r', '\x2', '\x2', '\x63A', '\x63B', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x63B', '\x63C', '\a', '\x88', '\x2', '\x2', 
		'\x63C', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x63F', '\x5', 
		'\xDE', 'p', '\x2', '\x63E', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x63F', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x640', '\x63E', '\x3', '\x2', '\x2', 
		'\x2', '\x640', '\x641', '\x3', '\x2', '\x2', '\x2', '\x641', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x642', '\x643', '\a', 'k', '\x2', '\x2', 
		'\x643', '\x644', '\x5', '\x1B4', '\xDB', '\x2', '\x644', '\x645', '\a', 
		'\x93', '\x2', '\x2', '\x645', '\x646', '\x5', '\x4', '\x3', '\x2', '\x646', 
		'\x647', '\a', '\x88', '\x2', '\x2', '\x647', '\x652', '\x3', '\x2', '\x2', 
		'\x2', '\x648', '\x649', '\a', 'k', '\x2', '\x2', '\x649', '\x64A', '\x5', 
		'\x4', '\x3', '\x2', '\x64A', '\x64B', '\a', '\x88', '\x2', '\x2', '\x64B', 
		'\x652', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x64D', '\a', 'k', '\x2', 
		'\x2', '\x64D', '\x64E', '\a', '\\', '\x2', '\x2', '\x64E', '\x64F', '\x5', 
		'\x4', '\x3', '\x2', '\x64F', '\x650', '\a', '\x88', '\x2', '\x2', '\x650', 
		'\x652', '\x3', '\x2', '\x2', '\x2', '\x651', '\x642', '\x3', '\x2', '\x2', 
		'\x2', '\x651', '\x648', '\x3', '\x2', '\x2', '\x2', '\x651', '\x64C', 
		'\x3', '\x2', '\x2', '\x2', '\x652', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\x653', '\x655', '\x5', '\xE2', 'r', '\x2', '\x654', '\x653', '\x3', 
		'\x2', '\x2', '\x2', '\x655', '\x656', '\x3', '\x2', '\x2', '\x2', '\x656', 
		'\x654', '\x3', '\x2', '\x2', '\x2', '\x656', '\x657', '\x3', '\x2', '\x2', 
		'\x2', '\x657', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x658', '\x65B', 
		'\x5', '\xD2', 'j', '\x2', '\x659', '\x65B', '\x5', '\xE4', 's', '\x2', 
		'\x65A', '\x658', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x659', '\x3', 
		'\x2', '\x2', '\x2', '\x65B', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x65C', 
		'\x65E', '\x5', '\x160', '\xB1', '\x2', '\x65D', '\x65C', '\x3', '\x2', 
		'\x2', '\x2', '\x65D', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x660', 
		'\x3', '\x2', '\x2', '\x2', '\x65F', '\x661', '\x5', '\x102', '\x82', 
		'\x2', '\x660', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x660', '\x661', 
		'\x3', '\x2', '\x2', '\x2', '\x661', '\x667', '\x3', '\x2', '\x2', '\x2', 
		'\x662', '\x668', '\x5', '\x190', '\xC9', '\x2', '\x663', '\x668', '\x5', 
		'\x192', '\xCA', '\x2', '\x664', '\x668', '\x5', '\x194', '\xCB', '\x2', 
		'\x665', '\x668', '\x5', '\x196', '\xCC', '\x2', '\x666', '\x668', '\x5', 
		'\x198', '\xCD', '\x2', '\x667', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x667', '\x663', '\x3', '\x2', '\x2', '\x2', '\x667', '\x664', '\x3', 
		'\x2', '\x2', '\x2', '\x667', '\x665', '\x3', '\x2', '\x2', '\x2', '\x667', 
		'\x666', '\x3', '\x2', '\x2', '\x2', '\x668', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x669', '\x66A', '\x5', '\x1B4', '\xDB', '\x2', '\x66A', '\x66B', 
		'\a', '\x97', '\x2', '\x2', '\x66B', '\x66D', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x66C', '\x66E', '\x5', '\x18', '\r', '\x2', '\x66D', '\x66C', 
		'\x3', '\x2', '\x2', '\x2', '\x66D', '\x66E', '\x3', '\x2', '\x2', '\x2', 
		'\x66E', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x670', '\a', '\x94', 
		'\x2', '\x2', '\x670', '\x675', '\x5', '\xEA', 'v', '\x2', '\x671', '\x672', 
		'\a', '\x86', '\x2', '\x2', '\x672', '\x674', '\x5', '\xEA', 'v', '\x2', 
		'\x673', '\x671', '\x3', '\x2', '\x2', '\x2', '\x674', '\x677', '\x3', 
		'\x2', '\x2', '\x2', '\x675', '\x673', '\x3', '\x2', '\x2', '\x2', '\x675', 
		'\x676', '\x3', '\x2', '\x2', '\x2', '\x676', '\x678', '\x3', '\x2', '\x2', 
		'\x2', '\x677', '\x675', '\x3', '\x2', '\x2', '\x2', '\x678', '\x679', 
		'\a', '\x95', '\x2', '\x2', '\x679', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x67A', '\x67C', '\x5', '\x160', '\xB1', '\x2', '\x67B', '\x67A', '\x3', 
		'\x2', '\x2', '\x2', '\x67B', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67C', 
		'\x67D', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x67E', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x680', 
		'\a', '\x87', '\x2', '\x2', '\x680', '\x685', '\x5', '\x16', '\f', '\x2', 
		'\x681', '\x682', '\a', '\x86', '\x2', '\x2', '\x682', '\x684', '\x5', 
		'\x4', '\x3', '\x2', '\x683', '\x681', '\x3', '\x2', '\x2', '\x2', '\x684', 
		'\x687', '\x3', '\x2', '\x2', '\x2', '\x685', '\x683', '\x3', '\x2', '\x2', 
		'\x2', '\x685', '\x686', '\x3', '\x2', '\x2', '\x2', '\x686', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\x687', '\x685', '\x3', '\x2', '\x2', '\x2', 
		'\x688', '\x68D', '\x5', '\x4', '\x3', '\x2', '\x689', '\x68A', '\a', 
		'\x86', '\x2', '\x2', '\x68A', '\x68C', '\x5', '\x4', '\x3', '\x2', '\x68B', 
		'\x689', '\x3', '\x2', '\x2', '\x2', '\x68C', '\x68F', '\x3', '\x2', '\x2', 
		'\x2', '\x68D', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x68D', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '\x68E', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x68F', '\x68D', '\x3', '\x2', '\x2', '\x2', '\x690', '\x692', '\x5', 
		'\xF2', 'z', '\x2', '\x691', '\x690', '\x3', '\x2', '\x2', '\x2', '\x692', 
		'\x693', '\x3', '\x2', '\x2', '\x2', '\x693', '\x691', '\x3', '\x2', '\x2', 
		'\x2', '\x693', '\x694', '\x3', '\x2', '\x2', '\x2', '\x694', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x695', '\x696', '\a', 'q', '\x2', '\x2', 
		'\x696', '\x697', '\x5', '\x1B4', '\xDB', '\x2', '\x697', '\x698', '\a', 
		'\x87', '\x2', '\x2', '\x698', '\x699', '\x5', '\xF4', '{', '\x2', '\x699', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x6A5', '\x5', '\xFA', '~', 
		'\x2', '\x69B', '\x69E', '\x5', '\xF6', '|', '\x2', '\x69C', '\x69D', 
		'\a', '\x86', '\x2', '\x2', '\x69D', '\x69F', '\x5', '\xF8', '}', '\x2', 
		'\x69E', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69E', '\x69F', '\x3', 
		'\x2', '\x2', '\x2', '\x69F', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A0', 
		'\x6A1', '\a', '\x86', '\x2', '\x2', '\x6A1', '\x6A3', '\x5', '\xFA', 
		'~', '\x2', '\x6A2', '\x6A0', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A3', 
		'\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6A5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A4', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x69B', '\x3', 
		'\x2', '\x2', '\x2', '\x6A5', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x6A6', 
		'\x6AE', '\x5', '\x16', '\f', '\x2', '\x6A7', '\x6A9', '\a', '\x1C', '\x2', 
		'\x2', '\x6A8', '\x6AA', '\a', '\x96', '\x2', '\x2', '\x6A9', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6AA', '\x3', '\x2', '\x2', '\x2', 
		'\x6AA', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6AE', '\a', 
		'^', '\x2', '\x2', '\x6AC', '\x6AE', '\a', 'h', '\x2', '\x2', '\x6AD', 
		'\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6A7', '\x3', '\x2', '\x2', 
		'\x2', '\x6AD', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6AC', 
		'\x3', '\x2', '\x2', '\x2', '\x6AE', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x6AF', '\x6B4', '\x5', '\x4', '\x3', '\x2', '\x6B0', '\x6B1', '\a', 
		'\x86', '\x2', '\x2', '\x6B1', '\x6B3', '\x5', '\x4', '\x3', '\x2', '\x6B2', 
		'\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B4', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6B5', 
		'\x3', '\x2', '\x2', '\x2', '\x6B5', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x6B6', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B8', '\a', 
		'\x44', '\x2', '\x2', '\x6B8', '\x6B9', '\a', '\x83', '\x2', '\x2', '\x6B9', 
		'\x6BA', '\a', '\x84', '\x2', '\x2', '\x6BA', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x6BB', '\x6BD', '\a', '\x7F', '\x2', '\x2', '\x6BC', '\x6BE', 
		'\x5', '\xFE', '\x80', '\x2', '\x6BD', '\x6BC', '\x3', '\x2', '\x2', '\x2', 
		'\x6BD', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\x6BF', '\x3', 
		'\x2', '\x2', '\x2', '\x6BF', '\x6C0', '\a', '\x80', '\x2', '\x2', '\x6C0', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\x5', '\x100', 
		'\x81', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C3', 
		'\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C4', '\x6C2', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x6C6', '\x6C8', '\x5', '\x160', '\xB1', 
		'\x2', '\x6C7', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', 
		'\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6CA', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x6CB', '\x5', '\x102', '\x82', '\x2', '\x6CA', '\x6C9', '\x3', 
		'\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CB', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6CC', '\x6CF', '\x5', '\x106', 
		'\x84', '\x2', '\x6CD', '\x6CF', '\x5', '\x1A4', '\xD3', '\x2', '\x6CE', 
		'\x6CC', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6CD', '\x3', '\x2', '\x2', 
		'\x2', '\x6CF', '\x101', '\x3', '\x2', '\x2', '\x2', '\x6D0', '\x6D2', 
		'\x5', '\x104', '\x83', '\x2', '\x6D1', '\x6D0', '\x3', '\x2', '\x2', 
		'\x2', '\x6D2', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D1', 
		'\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x103', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D6', '\t', 
		'\f', '\x2', '\x2', '\x6D6', '\x105', '\x3', '\x2', '\x2', '\x2', '\x6D7', 
		'\x6EB', '\x5', '\x1A0', '\xD1', '\x2', '\x6D8', '\x6EB', '\x5', '\x108', 
		'\x85', '\x2', '\x6D9', '\x6EB', '\x5', '\x19A', '\xCE', '\x2', '\x6DA', 
		'\x6E0', '\x5', '\x136', '\x9C', '\x2', '\x6DB', '\x6E1', '\x5', '\x13A', 
		'\x9E', '\x2', '\x6DC', '\x6DD', '\x5', '\x178', '\xBD', '\x2', '\x6DD', 
		'\x6DE', '\x5', 'L', '\'', '\x2', '\x6DE', '\x6DF', '\a', '\x88', '\x2', 
		'\x2', '\x6DF', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6DB', 
		'\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6DC', '\x3', '\x2', '\x2', '\x2', 
		'\x6E1', '\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6E2', '\x6EB', '\x5', 
		'\x1A6', '\xD4', '\x2', '\x6E3', '\x6E4', '\a', 'n', '\x2', '\x2', '\x6E4', 
		'\x6EB', '\x5', '\x1A8', '\xD5', '\x2', '\x6E5', '\x6EB', '\x5', '\x190', 
		'\xC9', '\x2', '\x6E6', '\x6EB', '\x5', '\x192', '\xCA', '\x2', '\x6E7', 
		'\x6EB', '\x5', '\x194', '\xCB', '\x2', '\x6E8', '\x6EB', '\x5', '\x196', 
		'\xCC', '\x2', '\x6E9', '\x6EB', '\x5', '\x198', '\xCD', '\x2', '\x6EA', 
		'\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6D8', '\x3', '\x2', '\x2', 
		'\x2', '\x6EA', '\x6D9', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6DA', 
		'\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6E2', '\x3', '\x2', '\x2', '\x2', 
		'\x6EA', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6E5', '\x3', 
		'\x2', '\x2', '\x2', '\x6EA', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6EA', 
		'\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6E8', '\x3', '\x2', '\x2', 
		'\x2', '\x6EA', '\x6E9', '\x3', '\x2', '\x2', '\x2', '\x6EB', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6F2', '\a', 'R', '\x2', '\x2', 
		'\x6ED', '\x6EE', '\a', 'Q', '\x2', '\x2', '\x6EE', '\x6F2', '\a', 'R', 
		'\x2', '\x2', '\x6EF', '\x6F0', '\a', 'R', '\x2', '\x2', '\x6F0', '\x6F2', 
		'\a', 'Q', '\x2', '\x2', '\x6F1', '\x6EC', '\x3', '\x2', '\x2', '\x2', 
		'\x6F1', '\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6EF', '\x3', 
		'\x2', '\x2', '\x2', '\x6F1', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F2', 
		'\x6F3', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6FD', '\x5', '\x6', '\x4', 
		'\x2', '\x6F4', '\x6F5', '\x5', '\x4', '\x3', '\x2', '\x6F5', '\x6F6', 
		'\a', '\x85', '\x2', '\x2', '\x6F6', '\x6F7', '\x5', '\x1A2', '\xD2', 
		'\x2', '\x6F7', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6F8', '\x6FE', 
		'\x5', '\x1A8', '\xD5', '\x2', '\x6F9', '\x6FE', '\x5', '\x19E', '\xD0', 
		'\x2', '\x6FA', '\x6FE', '\x5', '\x1A2', '\xD2', '\x2', '\x6FB', '\x6FE', 
		'\x5', '\x1AC', '\xD7', '\x2', '\x6FC', '\x6FE', '\x5', '\x19C', '\xCF', 
		'\x2', '\x6FD', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6F8', 
		'\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6F9', '\x3', '\x2', '\x2', '\x2', 
		'\x6FD', '\x6FA', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FB', '\x3', 
		'\x2', '\x2', '\x2', '\x6FD', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x6FE', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x704', '\x5', '\x10C', 
		'\x87', '\x2', '\x700', '\x701', '\a', '\x86', '\x2', '\x2', '\x701', 
		'\x703', '\x5', '\x10C', '\x87', '\x2', '\x702', '\x700', '\x3', '\x2', 
		'\x2', '\x2', '\x703', '\x706', '\x3', '\x2', '\x2', '\x2', '\x704', '\x702', 
		'\x3', '\x2', '\x2', '\x2', '\x704', '\x705', '\x3', '\x2', '\x2', '\x2', 
		'\x705', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x706', '\x704', '\x3', 
		'\x2', '\x2', '\x2', '\x707', '\x708', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x708', '\x709', '\a', '\x93', '\x2', '\x2', '\x709', '\x70A', '\x5', 
		'\x1E', '\x10', '\x2', '\x70A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x70B', 
		'\x710', '\x5', '\x110', '\x89', '\x2', '\x70C', '\x70D', '\a', '\x86', 
		'\x2', '\x2', '\x70D', '\x70F', '\x5', '\x110', '\x89', '\x2', '\x70E', 
		'\x70C', '\x3', '\x2', '\x2', '\x2', '\x70F', '\x712', '\x3', '\x2', '\x2', 
		'\x2', '\x710', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x710', '\x711', 
		'\x3', '\x2', '\x2', '\x2', '\x711', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x712', '\x710', '\x3', '\x2', '\x2', '\x2', '\x713', '\x716', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x714', '\x715', '\a', '\x93', '\x2', '\x2', 
		'\x715', '\x717', '\x5', '\x112', '\x8A', '\x2', '\x716', '\x714', '\x3', 
		'\x2', '\x2', '\x2', '\x716', '\x717', '\x3', '\x2', '\x2', '\x2', '\x717', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x718', '\x71B', '\x5', '\x1E', 
		'\x10', '\x2', '\x719', '\x71B', '\x5', '\x146', '\xA4', '\x2', '\x71A', 
		'\x718', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x719', '\x3', '\x2', '\x2', 
		'\x2', '\x71B', '\x113', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x71F', 
		'\x5', '\x6', '\x4', '\x2', '\x71D', '\x71F', '\a', 'n', '\x2', '\x2', 
		'\x71E', '\x71C', '\x3', '\x2', '\x2', '\x2', '\x71E', '\x71D', '\x3', 
		'\x2', '\x2', '\x2', '\x71F', '\x115', '\x3', '\x2', '\x2', '\x2', '\x720', 
		'\x721', '\x5', '\x4', '\x3', '\x2', '\x721', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x722', '\x725', '\x5', '\xAC', 'W', '\x2', '\x723', '\x725', 
		'\a', '\x88', '\x2', '\x2', '\x724', '\x722', '\x3', '\x2', '\x2', '\x2', 
		'\x724', '\x723', '\x3', '\x2', '\x2', '\x2', '\x725', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x726', '\x72D', '\x5', '\x122', '\x92', '\x2', 
		'\x727', '\x72A', '\x5', '\x11C', '\x8F', '\x2', '\x728', '\x729', '\a', 
		'\x86', '\x2', '\x2', '\x729', '\x72B', '\x5', '\x122', '\x92', '\x2', 
		'\x72A', '\x728', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x72B', '\x3', 
		'\x2', '\x2', '\x2', '\x72B', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x72C', 
		'\x726', '\x3', '\x2', '\x2', '\x2', '\x72C', '\x727', '\x3', '\x2', '\x2', 
		'\x2', '\x72D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x72E', '\x733', 
		'\x5', '\x11E', '\x90', '\x2', '\x72F', '\x730', '\a', '\x86', '\x2', 
		'\x2', '\x730', '\x732', '\x5', '\x11E', '\x90', '\x2', '\x731', '\x72F', 
		'\x3', '\x2', '\x2', '\x2', '\x732', '\x735', '\x3', '\x2', '\x2', '\x2', 
		'\x733', '\x731', '\x3', '\x2', '\x2', '\x2', '\x733', '\x734', '\x3', 
		'\x2', '\x2', '\x2', '\x734', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x735', 
		'\x733', '\x3', '\x2', '\x2', '\x2', '\x736', '\x738', '\x5', '\x160', 
		'\xB1', '\x2', '\x737', '\x736', '\x3', '\x2', '\x2', '\x2', '\x737', 
		'\x738', '\x3', '\x2', '\x2', '\x2', '\x738', '\x73A', '\x3', '\x2', '\x2', 
		'\x2', '\x739', '\x73B', '\x5', '\x120', '\x91', '\x2', '\x73A', '\x739', 
		'\x3', '\x2', '\x2', '\x2', '\x73A', '\x73B', '\x3', '\x2', '\x2', '\x2', 
		'\x73B', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73F', '\x5', 
		'\x1AE', '\xD8', '\x2', '\x73D', '\x73F', '\a', '\xE', '\x2', '\x2', '\x73E', 
		'\x737', '\x3', '\x2', '\x2', '\x2', '\x73E', '\x73D', '\x3', '\x2', '\x2', 
		'\x2', '\x73F', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x740', '\x749', 
		'\a', 'R', '\x2', '\x2', '\x741', '\x749', '\a', 'J', '\x2', '\x2', '\x742', 
		'\x749', '\a', '\x38', '\x2', '\x2', '\x743', '\x744', '\a', 'R', '\x2', 
		'\x2', '\x744', '\x749', '\a', '`', '\x2', '\x2', '\x745', '\x746', '\a', 
		'\x38', '\x2', '\x2', '\x746', '\x749', '\a', '`', '\x2', '\x2', '\x747', 
		'\x749', '\a', '`', '\x2', '\x2', '\x748', '\x740', '\x3', '\x2', '\x2', 
		'\x2', '\x748', '\x741', '\x3', '\x2', '\x2', '\x2', '\x748', '\x742', 
		'\x3', '\x2', '\x2', '\x2', '\x748', '\x743', '\x3', '\x2', '\x2', '\x2', 
		'\x748', '\x745', '\x3', '\x2', '\x2', '\x2', '\x748', '\x747', '\x3', 
		'\x2', '\x2', '\x2', '\x749', '\x121', '\x3', '\x2', '\x2', '\x2', '\x74A', 
		'\x74C', '\x5', '\x160', '\xB1', '\x2', '\x74B', '\x74A', '\x3', '\x2', 
		'\x2', '\x2', '\x74B', '\x74C', '\x3', '\x2', '\x2', '\x2', '\x74C', '\x74D', 
		'\x3', '\x2', '\x2', '\x2', '\x74D', '\x74E', '\a', 'L', '\x2', '\x2', 
		'\x74E', '\x74F', '\x5', '\x142', '\xA2', '\x2', '\x74F', '\x750', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x750', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x751', '\x753', '\x5', '\x160', '\xB1', '\x2', '\x752', '\x751', '\x3', 
		'\x2', '\x2', '\x2', '\x752', '\x753', '\x3', '\x2', '\x2', '\x2', '\x753', 
		'\x755', '\x3', '\x2', '\x2', '\x2', '\x754', '\x756', '\x5', '\x12A', 
		'\x96', '\x2', '\x755', '\x754', '\x3', '\x2', '\x2', '\x2', '\x755', 
		'\x756', '\x3', '\x2', '\x2', '\x2', '\x756', '\x761', '\x3', '\x2', '\x2', 
		'\x2', '\x757', '\x758', '\a', '\x33', '\x2', '\x2', '\x758', '\x75A', 
		'\x5', '\x12C', '\x97', '\x2', '\x759', '\x75B', '\x5', '\x128', '\x95', 
		'\x2', '\x75A', '\x759', '\x3', '\x2', '\x2', '\x2', '\x75A', '\x75B', 
		'\x3', '\x2', '\x2', '\x2', '\x75B', '\x762', '\x3', '\x2', '\x2', '\x2', 
		'\x75C', '\x75D', '\a', 'X', '\x2', '\x2', '\x75D', '\x75F', '\x5', '\x12C', 
		'\x97', '\x2', '\x75E', '\x760', '\x5', '\x126', '\x94', '\x2', '\x75F', 
		'\x75E', '\x3', '\x2', '\x2', '\x2', '\x75F', '\x760', '\x3', '\x2', '\x2', 
		'\x2', '\x760', '\x762', '\x3', '\x2', '\x2', '\x2', '\x761', '\x757', 
		'\x3', '\x2', '\x2', '\x2', '\x761', '\x75C', '\x3', '\x2', '\x2', '\x2', 
		'\x762', '\x125', '\x3', '\x2', '\x2', '\x2', '\x763', '\x765', '\x5', 
		'\x160', '\xB1', '\x2', '\x764', '\x763', '\x3', '\x2', '\x2', '\x2', 
		'\x764', '\x765', '\x3', '\x2', '\x2', '\x2', '\x765', '\x767', '\x3', 
		'\x2', '\x2', '\x2', '\x766', '\x768', '\x5', '\x12A', '\x96', '\x2', 
		'\x767', '\x766', '\x3', '\x2', '\x2', '\x2', '\x767', '\x768', '\x3', 
		'\x2', '\x2', '\x2', '\x768', '\x769', '\x3', '\x2', '\x2', '\x2', '\x769', 
		'\x76A', '\a', '\x33', '\x2', '\x2', '\x76A', '\x76B', '\x5', '\x12C', 
		'\x97', '\x2', '\x76B', '\x127', '\x3', '\x2', '\x2', '\x2', '\x76C', 
		'\x76E', '\x5', '\x160', '\xB1', '\x2', '\x76D', '\x76C', '\x3', '\x2', 
		'\x2', '\x2', '\x76D', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x76E', '\x770', 
		'\x3', '\x2', '\x2', '\x2', '\x76F', '\x771', '\x5', '\x12A', '\x96', 
		'\x2', '\x770', '\x76F', '\x3', '\x2', '\x2', '\x2', '\x770', '\x771', 
		'\x3', '\x2', '\x2', '\x2', '\x771', '\x772', '\x3', '\x2', '\x2', '\x2', 
		'\x772', '\x773', '\a', 'X', '\x2', '\x2', '\x773', '\x774', '\x5', '\x12C', 
		'\x97', '\x2', '\x774', '\x129', '\x3', '\x2', '\x2', '\x2', '\x775', 
		'\x77D', '\a', 'O', '\x2', '\x2', '\x776', '\x77D', '\a', ';', '\x2', 
		'\x2', '\x777', '\x77D', '\a', 'N', '\x2', '\x2', '\x778', '\x779', '\a', 
		'O', '\x2', '\x2', '\x779', '\x77D', '\a', ';', '\x2', '\x2', '\x77A', 
		'\x77B', '\a', ';', '\x2', '\x2', '\x77B', '\x77D', '\a', 'O', '\x2', 
		'\x2', '\x77C', '\x775', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x776', 
		'\x3', '\x2', '\x2', '\x2', '\x77C', '\x777', '\x3', '\x2', '\x2', '\x2', 
		'\x77C', '\x778', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x77A', '\x3', 
		'\x2', '\x2', '\x2', '\x77D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x77E', 
		'\x781', '\x5', '\xAC', 'W', '\x2', '\x77F', '\x781', '\a', '\x88', '\x2', 
		'\x2', '\x780', '\x77E', '\x3', '\x2', '\x2', '\x2', '\x780', '\x77F', 
		'\x3', '\x2', '\x2', '\x2', '\x781', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x782', '\x784', '\x5', '\x160', '\xB1', '\x2', '\x783', '\x782', '\x3', 
		'\x2', '\x2', '\x2', '\x783', '\x784', '\x3', '\x2', '\x2', '\x2', '\x784', 
		'\x78D', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', '\a', '\f', '\x2', 
		'\x2', '\x786', '\x787', '\x5', '\xAC', 'W', '\x2', '\x787', '\x788', 
		'\x5', '\x132', '\x9A', '\x2', '\x788', '\x78E', '\x3', '\x2', '\x2', 
		'\x2', '\x789', '\x78A', '\a', 'S', '\x2', '\x2', '\x78A', '\x78B', '\x5', 
		'\xAC', 'W', '\x2', '\x78B', '\x78C', '\x5', '\x130', '\x99', '\x2', '\x78C', 
		'\x78E', '\x3', '\x2', '\x2', '\x2', '\x78D', '\x785', '\x3', '\x2', '\x2', 
		'\x2', '\x78D', '\x789', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x78F', '\x791', '\x5', '\x160', '\xB1', 
		'\x2', '\x790', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x790', '\x791', 
		'\x3', '\x2', '\x2', '\x2', '\x791', '\x792', '\x3', '\x2', '\x2', '\x2', 
		'\x792', '\x793', '\a', '\f', '\x2', '\x2', '\x793', '\x794', '\x5', '\xAC', 
		'W', '\x2', '\x794', '\x131', '\x3', '\x2', '\x2', '\x2', '\x795', '\x797', 
		'\x5', '\x160', '\xB1', '\x2', '\x796', '\x795', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x797', '\x3', '\x2', '\x2', '\x2', '\x797', '\x798', 
		'\x3', '\x2', '\x2', '\x2', '\x798', '\x799', '\a', 'S', '\x2', '\x2', 
		'\x799', '\x79A', '\x5', '\xAC', 'W', '\x2', '\x79A', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x79B', '\x7B2', '\a', '\x89', '\x2', '\x2', '\x79C', 
		'\x7B2', '\a', '\x8A', '\x2', '\x2', '\x79D', '\x7B2', '\a', '\x91', '\x2', 
		'\x2', '\x79E', '\x7B2', '\a', '\x92', '\x2', '\x2', '\x79F', '\x7B2', 
		'\a', '\x99', '\x2', '\x2', '\x7A0', '\x7B2', '\a', '\x9A', '\x2', '\x2', 
		'\x7A1', '\x7B2', '\a', '\x62', '\x2', '\x2', '\x7A2', '\x7B2', '\a', 
		',', '\x2', '\x2', '\x7A3', '\x7B2', '\a', '\x8B', '\x2', '\x2', '\x7A4', 
		'\x7B2', '\a', '\x8C', '\x2', '\x2', '\x7A5', '\x7B2', '\a', '\x8D', '\x2', 
		'\x2', '\x7A6', '\x7B2', '\a', '\x8E', '\x2', '\x2', '\x7A7', '\x7B2', 
		'\a', '\x8F', '\x2', '\x2', '\x7A8', '\x7B2', '\a', '\x90', '\x2', '\x2', 
		'\x7A9', '\x7B2', '\a', '\xAA', '\x2', '\x2', '\x7AA', '\x7B2', '\x5', 
		'\x17A', '\xBE', '\x2', '\x7AB', '\x7B2', '\a', '\x9E', '\x2', '\x2', 
		'\x7AC', '\x7B2', '\a', '\x9F', '\x2', '\x2', '\x7AD', '\x7B2', '\a', 
		'\x95', '\x2', '\x2', '\x7AE', '\x7B2', '\a', '\x94', '\x2', '\x2', '\x7AF', 
		'\x7B2', '\a', '\xA1', '\x2', '\x2', '\x7B0', '\x7B2', '\a', '\xA0', '\x2', 
		'\x2', '\x7B1', '\x79B', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x79C', 
		'\x3', '\x2', '\x2', '\x2', '\x7B1', '\x79D', '\x3', '\x2', '\x2', '\x2', 
		'\x7B1', '\x79E', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x79F', '\x3', 
		'\x2', '\x2', '\x2', '\x7B1', '\x7A0', '\x3', '\x2', '\x2', '\x2', '\x7B1', 
		'\x7A1', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7A2', '\x3', '\x2', '\x2', 
		'\x2', '\x7B1', '\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7A4', 
		'\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7A5', '\x3', '\x2', '\x2', '\x2', 
		'\x7B1', '\x7A6', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7A7', '\x3', 
		'\x2', '\x2', '\x2', '\x7B1', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7B1', 
		'\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7AA', '\x3', '\x2', '\x2', 
		'\x2', '\x7B1', '\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7AC', 
		'\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7AD', '\x3', '\x2', '\x2', '\x2', 
		'\x7B1', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7AF', '\x3', 
		'\x2', '\x2', '\x2', '\x7B1', '\x7B0', '\x3', '\x2', '\x2', '\x2', '\x7B2', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7B4', '\t', '\r', '\x2', 
		'\x2', '\x7B4', '\x7B5', '\a', 'H', '\x2', '\x2', '\x7B5', '\x7B6', '\x5', 
		'\x6', '\x4', '\x2', '\x7B6', '\x7B7', '\a', '\x83', '\x2', '\x2', '\x7B7', 
		'\x7B8', '\x5', '\x1AE', '\xD8', '\x2', '\x7B8', '\x7B9', '\a', '\x84', 
		'\x2', '\x2', '\x7B9', '\x137', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7BB', 
		'\a', '\x87', '\x2', '\x2', '\x7BB', '\x7BC', '\t', '\xE', '\x2', '\x2', 
		'\x7BC', '\x7BE', '\a', '\x83', '\x2', '\x2', '\x7BD', '\x7BF', '\x5', 
		'\x1A', '\xE', '\x2', '\x7BE', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7BE', 
		'\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C0', '\x3', '\x2', '\x2', 
		'\x2', '\x7C0', '\x7C1', '\a', '\x84', '\x2', '\x2', '\x7C1', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x7C2', '\x7C5', '\x5', '\xAC', 'W', '\x2', 
		'\x7C3', '\x7C5', '\a', '\x88', '\x2', '\x2', '\x7C4', '\x7C2', '\x3', 
		'\x2', '\x2', '\x2', '\x7C4', '\x7C3', '\x3', '\x2', '\x2', '\x2', '\x7C5', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7C7', '\a', '\x87', '\x2', 
		'\x2', '\x7C7', '\x7C8', '\x5', '\xEE', 'x', '\x2', '\x7C8', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CD', '\a', '\x7F', '\x2', '\x2', 
		'\x7CA', '\x7CC', '\x5', '\x140', '\xA1', '\x2', '\x7CB', '\x7CA', '\x3', 
		'\x2', '\x2', '\x2', '\x7CC', '\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7CD', 
		'\x7CB', '\x3', '\x2', '\x2', '\x2', '\x7CD', '\x7CE', '\x3', '\x2', '\x2', 
		'\x2', '\x7CE', '\x7D0', '\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7CD', 
		'\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7D1', '\a', '\x80', '\x2', '\x2', 
		'\x7D1', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D4', '\x5', 
		'\x160', '\xB1', '\x2', '\x7D3', '\x7D2', '\x3', '\x2', '\x2', '\x2', 
		'\x7D3', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7D6', '\x3', 
		'\x2', '\x2', '\x2', '\x7D5', '\x7D7', '\x5', '\x102', '\x82', '\x2', 
		'\x7D6', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D7', '\x3', 
		'\x2', '\x2', '\x2', '\x7D7', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7D8', 
		'\x7E3', '\x5', '\x106', '\x84', '\x2', '\x7D9', '\x7DA', '\a', '.', '\x2', 
		'\x2', '\x7DA', '\x7DC', '\x5', '\x6', '\x4', '\x2', '\x7DB', '\x7DD', 
		'\x5', '\x174', '\xBB', '\x2', '\x7DC', '\x7DB', '\x3', '\x2', '\x2', 
		'\x2', '\x7DD', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DC', 
		'\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DF', '\x3', '\x2', '\x2', '\x2', 
		'\x7DF', '\x7E0', '\x3', '\x2', '\x2', '\x2', '\x7E0', '\x7E1', '\a', 
		'\x88', '\x2', '\x2', '\x7E1', '\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E2', 
		'\x7D8', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7D9', '\x3', '\x2', '\x2', 
		'\x2', '\x7E3', '\x141', '\x3', '\x2', '\x2', '\x2', '\x7E4', '\x7EC', 
		'\x5', '\b', '\x5', '\x2', '\x7E5', '\x7E7', '\t', '\xF', '\x2', '\x2', 
		'\x7E6', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7EA', '\x3', 
		'\x2', '\x2', '\x2', '\x7E8', '\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E8', 
		'\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EB', '\x3', '\x2', '\x2', 
		'\x2', '\x7EA', '\x7E8', '\x3', '\x2', '\x2', '\x2', '\x7EB', '\x7ED', 
		'\x5', '\x144', '\xA3', '\x2', '\x7EC', '\x7E8', '\x3', '\x2', '\x2', 
		'\x2', '\x7ED', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EC', 
		'\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\x3', '\x2', '\x2', '\x2', 
		'\x7EF', '\x143', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F4', '\a', 
		'\x81', '\x2', '\x2', '\x7F1', '\x7F3', '\a', '\x86', '\x2', '\x2', '\x7F2', 
		'\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F6', '\x3', '\x2', '\x2', 
		'\x2', '\x7F4', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', 
		'\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F7', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F8', '\a', 
		'\x82', '\x2', '\x2', '\x7F8', '\x145', '\x3', '\x2', '\x2', '\x2', '\x7F9', 
		'\x805', '\a', '\x7F', '\x2', '\x2', '\x7FA', '\x7FF', '\x5', '\x112', 
		'\x8A', '\x2', '\x7FB', '\x7FC', '\a', '\x86', '\x2', '\x2', '\x7FC', 
		'\x7FE', '\x5', '\x112', '\x8A', '\x2', '\x7FD', '\x7FB', '\x3', '\x2', 
		'\x2', '\x2', '\x7FE', '\x801', '\x3', '\x2', '\x2', '\x2', '\x7FF', '\x7FD', 
		'\x3', '\x2', '\x2', '\x2', '\x7FF', '\x800', '\x3', '\x2', '\x2', '\x2', 
		'\x800', '\x803', '\x3', '\x2', '\x2', '\x2', '\x801', '\x7FF', '\x3', 
		'\x2', '\x2', '\x2', '\x802', '\x804', '\a', '\x86', '\x2', '\x2', '\x803', 
		'\x802', '\x3', '\x2', '\x2', '\x2', '\x803', '\x804', '\x3', '\x2', '\x2', 
		'\x2', '\x804', '\x806', '\x3', '\x2', '\x2', '\x2', '\x805', '\x7FA', 
		'\x3', '\x2', '\x2', '\x2', '\x805', '\x806', '\x3', '\x2', '\x2', '\x2', 
		'\x806', '\x807', '\x3', '\x2', '\x2', '\x2', '\x807', '\x808', '\a', 
		'\x80', '\x2', '\x2', '\x808', '\x147', '\x3', '\x2', '\x2', '\x2', '\x809', 
		'\x80A', '\a', '\x94', '\x2', '\x2', '\x80A', '\x80F', '\x5', '\x14A', 
		'\xA6', '\x2', '\x80B', '\x80C', '\a', '\x86', '\x2', '\x2', '\x80C', 
		'\x80E', '\x5', '\x14A', '\xA6', '\x2', '\x80D', '\x80B', '\x3', '\x2', 
		'\x2', '\x2', '\x80E', '\x811', '\x3', '\x2', '\x2', '\x2', '\x80F', '\x80D', 
		'\x3', '\x2', '\x2', '\x2', '\x80F', '\x810', '\x3', '\x2', '\x2', '\x2', 
		'\x810', '\x812', '\x3', '\x2', '\x2', '\x2', '\x811', '\x80F', '\x3', 
		'\x2', '\x2', '\x2', '\x812', '\x813', '\a', '\x95', '\x2', '\x2', '\x813', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x814', '\x816', '\x5', '\x160', 
		'\xB1', '\x2', '\x815', '\x814', '\x3', '\x2', '\x2', '\x2', '\x815', 
		'\x816', '\x3', '\x2', '\x2', '\x2', '\x816', '\x818', '\x3', '\x2', '\x2', 
		'\x2', '\x817', '\x819', '\x5', '\x14C', '\xA7', '\x2', '\x818', '\x817', 
		'\x3', '\x2', '\x2', '\x2', '\x818', '\x819', '\x3', '\x2', '\x2', '\x2', 
		'\x819', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x81B', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x81B', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x81C', '\x81D', '\t', '\x10', '\x2', '\x2', '\x81D', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x81E', '\x81F', '\a', '\x87', '\x2', '\x2', '\x81F', 
		'\x820', '\x5', '\xEE', 'x', '\x2', '\x820', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x821', '\x825', '\a', '\x7F', '\x2', '\x2', '\x822', '\x824', 
		'\x5', '\x152', '\xAA', '\x2', '\x823', '\x822', '\x3', '\x2', '\x2', 
		'\x2', '\x824', '\x827', '\x3', '\x2', '\x2', '\x2', '\x825', '\x823', 
		'\x3', '\x2', '\x2', '\x2', '\x825', '\x826', '\x3', '\x2', '\x2', '\x2', 
		'\x826', '\x828', '\x3', '\x2', '\x2', '\x2', '\x827', '\x825', '\x3', 
		'\x2', '\x2', '\x2', '\x828', '\x829', '\a', '\x80', '\x2', '\x2', '\x829', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82C', '\x5', '\x160', 
		'\xB1', '\x2', '\x82B', '\x82A', '\x3', '\x2', '\x2', '\x2', '\x82B', 
		'\x82C', '\x3', '\x2', '\x2', '\x2', '\x82C', '\x82E', '\x3', '\x2', '\x2', 
		'\x2', '\x82D', '\x82F', '\a', '\x44', '\x2', '\x2', '\x82E', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x82E', '\x82F', '\x3', '\x2', '\x2', '\x2', 
		'\x82F', '\x86F', '\x3', '\x2', '\x2', '\x2', '\x830', '\x832', '\a', 
		'i', '\x2', '\x2', '\x831', '\x830', '\x3', '\x2', '\x2', '\x2', '\x831', 
		'\x832', '\x3', '\x2', '\x2', '\x2', '\x832', '\x838', '\x3', '\x2', '\x2', 
		'\x2', '\x833', '\x839', '\a', 'R', '\x2', '\x2', '\x834', '\x835', '\a', 
		'R', '\x2', '\x2', '\x835', '\x839', '\a', 'Q', '\x2', '\x2', '\x836', 
		'\x837', '\a', 'Q', '\x2', '\x2', '\x837', '\x839', '\a', 'R', '\x2', 
		'\x2', '\x838', '\x833', '\x3', '\x2', '\x2', '\x2', '\x838', '\x834', 
		'\x3', '\x2', '\x2', '\x2', '\x838', '\x836', '\x3', '\x2', '\x2', '\x2', 
		'\x838', '\x839', '\x3', '\x2', '\x2', '\x2', '\x839', '\x83A', '\x3', 
		'\x2', '\x2', '\x2', '\x83A', '\x856', '\x5', '\x6', '\x4', '\x2', '\x83B', 
		'\x83D', '\x5', '\x1B4', '\xDB', '\x2', '\x83C', '\x83E', '\x5', '\xE8', 
		'u', '\x2', '\x83D', '\x83C', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x83E', 
		'\x3', '\x2', '\x2', '\x2', '\x83E', '\x83F', '\x3', '\x2', '\x2', '\x2', 
		'\x83F', '\x841', '\a', '\x83', '\x2', '\x2', '\x840', '\x842', '\x5', 
		'\x11A', '\x8E', '\x2', '\x841', '\x840', '\x3', '\x2', '\x2', '\x2', 
		'\x841', '\x842', '\x3', '\x2', '\x2', '\x2', '\x842', '\x843', '\x3', 
		'\x2', '\x2', '\x2', '\x843', '\x845', '\a', '\x84', '\x2', '\x2', '\x844', 
		'\x846', '\x5', '\xF0', 'y', '\x2', '\x845', '\x844', '\x3', '\x2', '\x2', 
		'\x2', '\x845', '\x846', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', 
		'\x3', '\x2', '\x2', '\x2', '\x847', '\x848', '\a', '\x88', '\x2', '\x2', 
		'\x848', '\x857', '\x3', '\x2', '\x2', '\x2', '\x849', '\x84A', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x84A', '\x84B', '\a', '\x7F', '\x2', '\x2', 
		'\x84B', '\x84C', '\x5', '\x154', '\xAB', '\x2', '\x84C', '\x84D', '\a', 
		'\x80', '\x2', '\x2', '\x84D', '\x857', '\x3', '\x2', '\x2', '\x2', '\x84E', 
		'\x84F', '\a', '`', '\x2', '\x2', '\x84F', '\x850', '\a', '\x81', '\x2', 
		'\x2', '\x850', '\x851', '\x5', '\x11A', '\x8E', '\x2', '\x851', '\x852', 
		'\a', '\x82', '\x2', '\x2', '\x852', '\x853', '\a', '\x7F', '\x2', '\x2', 
		'\x853', '\x854', '\x5', '\x154', '\xAB', '\x2', '\x854', '\x855', '\a', 
		'\x80', '\x2', '\x2', '\x855', '\x857', '\x3', '\x2', '\x2', '\x2', '\x856', 
		'\x83B', '\x3', '\x2', '\x2', '\x2', '\x856', '\x849', '\x3', '\x2', '\x2', 
		'\x2', '\x856', '\x84E', '\x3', '\x2', '\x2', '\x2', '\x857', '\x870', 
		'\x3', '\x2', '\x2', '\x2', '\x858', '\x85A', '\a', 'i', '\x2', '\x2', 
		'\x859', '\x858', '\x3', '\x2', '\x2', '\x2', '\x859', '\x85A', '\x3', 
		'\x2', '\x2', '\x2', '\x85A', '\x85B', '\x3', '\x2', '\x2', '\x2', '\x85B', 
		'\x85C', '\a', 'n', '\x2', '\x2', '\x85C', '\x85E', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x85D', '\x85F', '\x5', '\xE8', 'u', '\x2', '\x85E', '\x85D', 
		'\x3', '\x2', '\x2', '\x2', '\x85E', '\x85F', '\x3', '\x2', '\x2', '\x2', 
		'\x85F', '\x860', '\x3', '\x2', '\x2', '\x2', '\x860', '\x862', '\a', 
		'\x83', '\x2', '\x2', '\x861', '\x863', '\x5', '\x11A', '\x8E', '\x2', 
		'\x862', '\x861', '\x3', '\x2', '\x2', '\x2', '\x862', '\x863', '\x3', 
		'\x2', '\x2', '\x2', '\x863', '\x864', '\x3', '\x2', '\x2', '\x2', '\x864', 
		'\x866', '\a', '\x84', '\x2', '\x2', '\x865', '\x867', '\x5', '\xF0', 
		'y', '\x2', '\x866', '\x865', '\x3', '\x2', '\x2', '\x2', '\x866', '\x867', 
		'\x3', '\x2', '\x2', '\x2', '\x867', '\x868', '\x3', '\x2', '\x2', '\x2', 
		'\x868', '\x869', '\a', '\x88', '\x2', '\x2', '\x869', '\x870', '\x3', 
		'\x2', '\x2', '\x2', '\x86A', '\x86B', '\a', ')', '\x2', '\x2', '\x86B', 
		'\x86C', '\x5', '\x6', '\x4', '\x2', '\x86C', '\x86D', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x86D', '\x86E', '\a', '\x88', '\x2', '\x2', '\x86E', 
		'\x870', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x831', '\x3', '\x2', '\x2', 
		'\x2', '\x86F', '\x859', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x86A', 
		'\x3', '\x2', '\x2', '\x2', '\x870', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x871', '\x873', '\x5', '\x160', '\xB1', '\x2', '\x872', '\x871', '\x3', 
		'\x2', '\x2', '\x2', '\x872', '\x873', '\x3', '\x2', '\x2', '\x2', '\x873', 
		'\x886', '\x3', '\x2', '\x2', '\x2', '\x874', '\x875', '\a', '\x33', '\x2', 
		'\x2', '\x875', '\x87B', '\a', '\x88', '\x2', '\x2', '\x876', '\x878', 
		'\x5', '\x160', '\xB1', '\x2', '\x877', '\x876', '\x3', '\x2', '\x2', 
		'\x2', '\x877', '\x878', '\x3', '\x2', '\x2', '\x2', '\x878', '\x879', 
		'\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', '\a', 'X', '\x2', '\x2', 
		'\x87A', '\x87C', '\a', '\x88', '\x2', '\x2', '\x87B', '\x877', '\x3', 
		'\x2', '\x2', '\x2', '\x87B', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x87C', 
		'\x887', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x87E', '\a', 'X', '\x2', 
		'\x2', '\x87E', '\x884', '\a', '\x88', '\x2', '\x2', '\x87F', '\x881', 
		'\x5', '\x160', '\xB1', '\x2', '\x880', '\x87F', '\x3', '\x2', '\x2', 
		'\x2', '\x880', '\x881', '\x3', '\x2', '\x2', '\x2', '\x881', '\x882', 
		'\x3', '\x2', '\x2', '\x2', '\x882', '\x883', '\a', '\x33', '\x2', '\x2', 
		'\x883', '\x885', '\a', '\x88', '\x2', '\x2', '\x884', '\x880', '\x3', 
		'\x2', '\x2', '\x2', '\x884', '\x885', '\x3', '\x2', '\x2', '\x2', '\x885', 
		'\x887', '\x3', '\x2', '\x2', '\x2', '\x886', '\x874', '\x3', '\x2', '\x2', 
		'\x2', '\x886', '\x87D', '\x3', '\x2', '\x2', '\x2', '\x887', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x888', '\x889', '\a', '\x87', '\x2', '\x2', 
		'\x889', '\x88A', '\x5', '\x6', '\x4', '\x2', '\x88A', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x88B', '\x897', '\a', '\x7F', '\x2', '\x2', '\x88C', 
		'\x891', '\x5', '\x15A', '\xAE', '\x2', '\x88D', '\x88E', '\a', '\x86', 
		'\x2', '\x2', '\x88E', '\x890', '\x5', '\x15A', '\xAE', '\x2', '\x88F', 
		'\x88D', '\x3', '\x2', '\x2', '\x2', '\x890', '\x893', '\x3', '\x2', '\x2', 
		'\x2', '\x891', '\x88F', '\x3', '\x2', '\x2', '\x2', '\x891', '\x892', 
		'\x3', '\x2', '\x2', '\x2', '\x892', '\x895', '\x3', '\x2', '\x2', '\x2', 
		'\x893', '\x891', '\x3', '\x2', '\x2', '\x2', '\x894', '\x896', '\a', 
		'\x86', '\x2', '\x2', '\x895', '\x894', '\x3', '\x2', '\x2', '\x2', '\x895', 
		'\x896', '\x3', '\x2', '\x2', '\x2', '\x896', '\x898', '\x3', '\x2', '\x2', 
		'\x2', '\x897', '\x88C', '\x3', '\x2', '\x2', '\x2', '\x897', '\x898', 
		'\x3', '\x2', '\x2', '\x2', '\x898', '\x899', '\x3', '\x2', '\x2', '\x2', 
		'\x899', '\x89A', '\a', '\x80', '\x2', '\x2', '\x89A', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x89B', '\x89D', '\x5', '\x160', '\xB1', '\x2', 
		'\x89C', '\x89B', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89D', '\x3', 
		'\x2', '\x2', '\x2', '\x89D', '\x89E', '\x3', '\x2', '\x2', '\x2', '\x89E', 
		'\x8A1', '\x5', '\x1B4', '\xDB', '\x2', '\x89F', '\x8A0', '\a', '\x93', 
		'\x2', '\x2', '\x8A0', '\x8A2', '\x5', '\x1E', '\x10', '\x2', '\x8A1', 
		'\x89F', '\x3', '\x2', '\x2', '\x2', '\x8A1', '\x8A2', '\x3', '\x2', '\x2', 
		'\x2', '\x8A2', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x8A3', '\x8A4', 
		'\a', '\x81', '\x2', '\x2', '\x8A4', '\x8A5', '\x5', '\x15E', '\xB0', 
		'\x2', '\x8A5', '\x8A6', '\a', '\x87', '\x2', '\x2', '\x8A6', '\x8A8', 
		'\x5', '\x166', '\xB4', '\x2', '\x8A7', '\x8A9', '\a', '\x86', '\x2', 
		'\x2', '\x8A8', '\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8A8', '\x8A9', 
		'\x3', '\x2', '\x2', '\x2', '\x8A9', '\x8AA', '\x3', '\x2', '\x2', '\x2', 
		'\x8AA', '\x8AB', '\a', '\x82', '\x2', '\x2', '\x8AB', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x8AC', '\x8AF', '\x5', '\x18E', '\xC8', '\x2', 
		'\x8AD', '\x8AF', '\x5', '\x1B4', '\xDB', '\x2', '\x8AE', '\x8AC', '\x3', 
		'\x2', '\x2', '\x2', '\x8AE', '\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8AF', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8B2', '\x5', '\x162', 
		'\xB2', '\x2', '\x8B1', '\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8B2', 
		'\x8B3', '\x3', '\x2', '\x2', '\x2', '\x8B3', '\x8B1', '\x3', '\x2', '\x2', 
		'\x2', '\x8B3', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x8B4', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x8B5', '\x8B9', '\a', '\x81', '\x2', '\x2', 
		'\x8B6', '\x8B7', '\x5', '\x164', '\xB3', '\x2', '\x8B7', '\x8B8', '\a', 
		'\x87', '\x2', '\x2', '\x8B8', '\x8BA', '\x3', '\x2', '\x2', '\x2', '\x8B9', 
		'\x8B6', '\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8BA', '\x3', '\x2', '\x2', 
		'\x2', '\x8BA', '\x8BB', '\x3', '\x2', '\x2', '\x2', '\x8BB', '\x8BD', 
		'\x5', '\x166', '\xB4', '\x2', '\x8BC', '\x8BE', '\a', '\x86', '\x2', 
		'\x2', '\x8BD', '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x8BD', '\x8BE', 
		'\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8BF', '\x3', '\x2', '\x2', '\x2', 
		'\x8BF', '\x8C0', '\a', '\x82', '\x2', '\x2', '\x8C0', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x8C1', '\x8C4', '\x5', '\x18E', '\xC8', '\x2', 
		'\x8C2', '\x8C4', '\x5', '\x1B4', '\xDB', '\x2', '\x8C3', '\x8C1', '\x3', 
		'\x2', '\x2', '\x2', '\x8C3', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8C4', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x8C5', '\x8CA', '\x5', '\x168', 
		'\xB5', '\x2', '\x8C6', '\x8C7', '\a', '\x86', '\x2', '\x2', '\x8C7', 
		'\x8C9', '\x5', '\x168', '\xB5', '\x2', '\x8C8', '\x8C6', '\x3', '\x2', 
		'\x2', '\x2', '\x8C9', '\x8CC', '\x3', '\x2', '\x2', '\x2', '\x8CA', '\x8C8', 
		'\x3', '\x2', '\x2', '\x2', '\x8CA', '\x8CB', '\x3', '\x2', '\x2', '\x2', 
		'\x8CB', '\x167', '\x3', '\x2', '\x2', '\x2', '\x8CC', '\x8CA', '\x3', 
		'\x2', '\x2', '\x2', '\x8CD', '\x8DA', '\x5', '\x4', '\x3', '\x2', '\x8CE', 
		'\x8D7', '\a', '\x83', '\x2', '\x2', '\x8CF', '\x8D4', '\x5', '\x16A', 
		'\xB6', '\x2', '\x8D0', '\x8D1', '\a', '\x86', '\x2', '\x2', '\x8D1', 
		'\x8D3', '\x5', '\x16A', '\xB6', '\x2', '\x8D2', '\x8D0', '\x3', '\x2', 
		'\x2', '\x2', '\x8D3', '\x8D6', '\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D2', 
		'\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', 
		'\x8D5', '\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D4', '\x3', 
		'\x2', '\x2', '\x2', '\x8D7', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x8D7', 
		'\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8D9', '\x3', '\x2', '\x2', 
		'\x2', '\x8D9', '\x8DB', '\a', '\x84', '\x2', '\x2', '\x8DA', '\x8CE', 
		'\x3', '\x2', '\x2', '\x2', '\x8DA', '\x8DB', '\x3', '\x2', '\x2', '\x2', 
		'\x8DB', '\x169', '\x3', '\x2', '\x2', '\x2', '\x8DC', '\x8DD', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x8DD', '\x8DE', '\a', '\x87', '\x2', '\x2', 
		'\x8DE', '\x8E0', '\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8DC', '\x3', 
		'\x2', '\x2', '\x2', '\x8DF', '\x8E0', '\x3', '\x2', '\x2', '\x2', '\x8E0', 
		'\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8E2', '\x5', '\x1E', 
		'\x10', '\x2', '\x8E2', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x8E3', 
		'\x8E6', '\x5', '\xE', '\b', '\x2', '\x8E4', '\x8E6', '\x5', '\x16', '\f', 
		'\x2', '\x8E5', '\x8E3', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8E4', 
		'\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8EB', '\x3', '\x2', '\x2', '\x2', 
		'\x8E7', '\x8EA', '\x5', '\x144', '\xA3', '\x2', '\x8E8', '\x8EA', '\a', 
		'\x96', '\x2', '\x2', '\x8E9', '\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8E9', 
		'\x8E8', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8ED', '\x3', '\x2', '\x2', 
		'\x2', '\x8EB', '\x8E9', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', 
		'\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8EE', '\x3', '\x2', '\x2', '\x2', 
		'\x8ED', '\x8EB', '\x3', '\x2', '\x2', '\x2', '\x8EE', '\x8EF', '\a', 
		'\x8B', '\x2', '\x2', '\x8EF', '\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F0', 
		'\x8F1', '\a', 'n', '\x2', '\x2', '\x8F1', '\x8F3', '\a', '\x8B', '\x2', 
		'\x2', '\x8F2', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8F2', '\x8F0', 
		'\x3', '\x2', '\x2', '\x2', '\x8F3', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x8F4', '\x8F9', '\x5', '\x170', '\xB9', '\x2', '\x8F5', '\x8F6', '\a', 
		'\x86', '\x2', '\x2', '\x8F6', '\x8F8', '\x5', '\x170', '\xB9', '\x2', 
		'\x8F7', '\x8F5', '\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8FB', '\x3', 
		'\x2', '\x2', '\x2', '\x8F9', '\x8F7', '\x3', '\x2', '\x2', '\x2', '\x8F9', 
		'\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x8FB', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FD', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x8FD', '\x8FE', '\a', '\x93', '\x2', 
		'\x2', '\x8FE', '\x8FF', '\x5', '\x172', '\xBA', '\x2', '\x8FF', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x900', '\x902', '\a', '\x8E', '\x2', '\x2', 
		'\x901', '\x900', '\x3', '\x2', '\x2', '\x2', '\x901', '\x902', '\x3', 
		'\x2', '\x2', '\x2', '\x902', '\x903', '\x3', '\x2', '\x2', '\x2', '\x903', 
		'\x906', '\x5', '\x1E', '\x10', '\x2', '\x904', '\x906', '\x5', '\x176', 
		'\xBC', '\x2', '\x905', '\x901', '\x3', '\x2', '\x2', '\x2', '\x905', 
		'\x904', '\x3', '\x2', '\x2', '\x2', '\x906', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x907', '\x908', '\x5', '\x1B4', '\xDB', '\x2', '\x908', '\x909', 
		'\a', '\x81', '\x2', '\x2', '\x909', '\x90A', '\x5', '\x1E', '\x10', '\x2', 
		'\x90A', '\x90B', '\a', '\x82', '\x2', '\x2', '\x90B', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x90C', '\x90D', '\a', '[', '\x2', '\x2', '\x90D', 
		'\x90E', '\x5', '\x6', '\x4', '\x2', '\x90E', '\x90F', '\a', '\x81', '\x2', 
		'\x2', '\x90F', '\x910', '\x5', '\x1E', '\x10', '\x2', '\x910', '\x911', 
		'\a', '\x82', '\x2', '\x2', '\x911', '\x92A', '\x3', '\x2', '\x2', '\x2', 
		'\x912', '\x914', '\a', '[', '\x2', '\x2', '\x913', '\x915', '\x5', '\x6', 
		'\x4', '\x2', '\x914', '\x913', '\x3', '\x2', '\x2', '\x2', '\x914', '\x915', 
		'\x3', '\x2', '\x2', '\x2', '\x915', '\x916', '\x3', '\x2', '\x2', '\x2', 
		'\x916', '\x918', '\a', '\x81', '\x2', '\x2', '\x917', '\x919', '\x5', 
		'\x1E', '\x10', '\x2', '\x918', '\x917', '\x3', '\x2', '\x2', '\x2', '\x918', 
		'\x919', '\x3', '\x2', '\x2', '\x2', '\x919', '\x91A', '\x3', '\x2', '\x2', 
		'\x2', '\x91A', '\x91B', '\a', '\x82', '\x2', '\x2', '\x91B', '\x91C', 
		'\a', '\x7F', '\x2', '\x2', '\x91C', '\x921', '\x5', '\x1E', '\x10', '\x2', 
		'\x91D', '\x91E', '\a', '\x86', '\x2', '\x2', '\x91E', '\x920', '\x5', 
		'\x1E', '\x10', '\x2', '\x91F', '\x91D', '\x3', '\x2', '\x2', '\x2', '\x920', 
		'\x923', '\x3', '\x2', '\x2', '\x2', '\x921', '\x91F', '\x3', '\x2', '\x2', 
		'\x2', '\x921', '\x922', '\x3', '\x2', '\x2', '\x2', '\x922', '\x925', 
		'\x3', '\x2', '\x2', '\x2', '\x923', '\x921', '\x3', '\x2', '\x2', '\x2', 
		'\x924', '\x926', '\a', '\x86', '\x2', '\x2', '\x925', '\x924', '\x3', 
		'\x2', '\x2', '\x2', '\x925', '\x926', '\x3', '\x2', '\x2', '\x2', '\x926', 
		'\x927', '\x3', '\x2', '\x2', '\x2', '\x927', '\x928', '\a', '\x80', '\x2', 
		'\x2', '\x928', '\x92A', '\x3', '\x2', '\x2', '\x2', '\x929', '\x90C', 
		'\x3', '\x2', '\x2', '\x2', '\x929', '\x912', '\x3', '\x2', '\x2', '\x2', 
		'\x92A', '\x177', '\x3', '\x2', '\x2', '\x2', '\x92B', '\x92C', '\a', 
		'\x93', '\x2', '\x2', '\x92C', '\x92D', '\a', '\x95', '\x2', '\x2', '\x92D', 
		'\x92E', '\x6', '\xBD', '\x3', '\x3', '\x92E', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '\x92F', '\x930', '\a', '\x95', '\x2', '\x2', '\x930', '\x931', 
		'\a', '\x95', '\x2', '\x2', '\x931', '\x932', '\x6', '\xBE', '\x4', '\x3', 
		'\x932', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x933', '\x934', '\a', 
		'\x95', '\x2', '\x2', '\x934', '\x935', '\a', '\xA1', '\x2', '\x2', '\x935', 
		'\x936', '\x6', '\xBF', '\x5', '\x3', '\x936', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '\x937', '\x940', '\x5', '\x180', '\xC1', '\x2', '\x938', 
		'\x940', '\x5', '\x182', '\xC2', '\x2', '\x939', '\x940', '\a', 'v', '\x2', 
		'\x2', '\x93A', '\x940', '\a', 'w', '\x2', '\x2', '\x93B', '\x940', '\a', 
		'x', '\x2', '\x2', '\x93C', '\x940', '\a', 'y', '\x2', '\x2', '\x93D', 
		'\x940', '\a', 'z', '\x2', '\x2', '\x93E', '\x940', '\a', '\x45', '\x2', 
		'\x2', '\x93F', '\x937', '\x3', '\x2', '\x2', '\x2', '\x93F', '\x938', 
		'\x3', '\x2', '\x2', '\x2', '\x93F', '\x939', '\x3', '\x2', '\x2', '\x2', 
		'\x93F', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x93F', '\x93B', '\x3', 
		'\x2', '\x2', '\x2', '\x93F', '\x93C', '\x3', '\x2', '\x2', '\x2', '\x93F', 
		'\x93D', '\x3', '\x2', '\x2', '\x2', '\x93F', '\x93E', '\x3', '\x2', '\x2', 
		'\x2', '\x940', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', 
		'\t', '\x11', '\x2', '\x2', '\x942', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x943', '\x948', '\x5', '\x184', '\xC3', '\x2', '\x944', '\x948', '\x5', 
		'\x186', '\xC4', '\x2', '\x945', '\x948', '\a', '{', '\x2', '\x2', '\x946', 
		'\x948', '\a', '|', '\x2', '\x2', '\x947', '\x943', '\x3', '\x2', '\x2', 
		'\x2', '\x947', '\x944', '\x3', '\x2', '\x2', '\x2', '\x947', '\x945', 
		'\x3', '\x2', '\x2', '\x2', '\x947', '\x946', '\x3', '\x2', '\x2', '\x2', 
		'\x948', '\x183', '\x3', '\x2', '\x2', '\x2', '\x949', '\x94D', '\a', 
		'}', '\x2', '\x2', '\x94A', '\x94C', '\x5', '\x188', '\xC5', '\x2', '\x94B', 
		'\x94A', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x94F', '\x3', '\x2', '\x2', 
		'\x2', '\x94D', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94D', '\x94E', 
		'\x3', '\x2', '\x2', '\x2', '\x94E', '\x950', '\x3', '\x2', '\x2', '\x2', 
		'\x94F', '\x94D', '\x3', '\x2', '\x2', '\x2', '\x950', '\x951', '\a', 
		'\xB2', '\x2', '\x2', '\x951', '\x185', '\x3', '\x2', '\x2', '\x2', '\x952', 
		'\x956', '\a', '~', '\x2', '\x2', '\x953', '\x955', '\x5', '\x18A', '\xC6', 
		'\x2', '\x954', '\x953', '\x3', '\x2', '\x2', '\x2', '\x955', '\x958', 
		'\x3', '\x2', '\x2', '\x2', '\x956', '\x954', '\x3', '\x2', '\x2', '\x2', 
		'\x956', '\x957', '\x3', '\x2', '\x2', '\x2', '\x957', '\x959', '\x3', 
		'\x2', '\x2', '\x2', '\x958', '\x956', '\x3', '\x2', '\x2', '\x2', '\x959', 
		'\x95A', '\a', '\xB2', '\x2', '\x2', '\x95A', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x95B', '\x960', '\x5', '\x18C', '\xC7', '\x2', '\x95C', '\x960', 
		'\a', '\xAE', '\x2', '\x2', '\x95D', '\x960', '\a', '\xB0', '\x2', '\x2', 
		'\x95E', '\x960', '\a', '\xB3', '\x2', '\x2', '\x95F', '\x95B', '\x3', 
		'\x2', '\x2', '\x2', '\x95F', '\x95C', '\x3', '\x2', '\x2', '\x2', '\x95F', 
		'\x95D', '\x3', '\x2', '\x2', '\x2', '\x95F', '\x95E', '\x3', '\x2', '\x2', 
		'\x2', '\x960', '\x189', '\x3', '\x2', '\x2', '\x2', '\x961', '\x966', 
		'\x5', '\x18C', '\xC7', '\x2', '\x962', '\x966', '\a', '\xAE', '\x2', 
		'\x2', '\x963', '\x966', '\a', '\xB1', '\x2', '\x2', '\x964', '\x966', 
		'\a', '\xB4', '\x2', '\x2', '\x965', '\x961', '\x3', '\x2', '\x2', '\x2', 
		'\x965', '\x962', '\x3', '\x2', '\x2', '\x2', '\x965', '\x963', '\x3', 
		'\x2', '\x2', '\x2', '\x965', '\x964', '\x3', '\x2', '\x2', '\x2', '\x966', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x967', '\x96C', '\x5', '\x1E', 
		'\x10', '\x2', '\x968', '\x969', '\a', '\x86', '\x2', '\x2', '\x969', 
		'\x96B', '\x5', '\x1E', '\x10', '\x2', '\x96A', '\x968', '\x3', '\x2', 
		'\x2', '\x2', '\x96B', '\x96E', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x96A', 
		'\x3', '\x2', '\x2', '\x2', '\x96C', '\x96D', '\x3', '\x2', '\x2', '\x2', 
		'\x96D', '\x975', '\x3', '\x2', '\x2', '\x2', '\x96E', '\x96C', '\x3', 
		'\x2', '\x2', '\x2', '\x96F', '\x971', '\a', '\x87', '\x2', '\x2', '\x970', 
		'\x972', '\a', '\xB6', '\x2', '\x2', '\x971', '\x970', '\x3', '\x2', '\x2', 
		'\x2', '\x972', '\x973', '\x3', '\x2', '\x2', '\x2', '\x973', '\x971', 
		'\x3', '\x2', '\x2', '\x2', '\x973', '\x974', '\x3', '\x2', '\x2', '\x2', 
		'\x974', '\x976', '\x3', '\x2', '\x2', '\x2', '\x975', '\x96F', '\x3', 
		'\x2', '\x2', '\x2', '\x975', '\x976', '\x3', '\x2', '\x2', '\x2', '\x976', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x977', '\x978', '\t', '\x12', '\x2', 
		'\x2', '\x978', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x979', '\x97A', 
		'\a', '\x1C', '\x2', '\x2', '\x97A', '\x97C', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x97B', '\x97D', '\x5', '\xE8', 'u', '\x2', '\x97C', '\x97B', 
		'\x3', '\x2', '\x2', '\x2', '\x97C', '\x97D', '\x3', '\x2', '\x2', '\x2', 
		'\x97D', '\x97F', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x980', '\x5', 
		'\xEC', 'w', '\x2', '\x97F', '\x97E', '\x3', '\x2', '\x2', '\x2', '\x97F', 
		'\x980', '\x3', '\x2', '\x2', '\x2', '\x980', '\x982', '\x3', '\x2', '\x2', 
		'\x2', '\x981', '\x983', '\x5', '\xF0', 'y', '\x2', '\x982', '\x981', 
		'\x3', '\x2', '\x2', '\x2', '\x982', '\x983', '\x3', '\x2', '\x2', '\x2', 
		'\x983', '\x984', '\x3', '\x2', '\x2', '\x2', '\x984', '\x986', '\x5', 
		'\xFC', '\x7F', '\x2', '\x985', '\x987', '\a', '\x88', '\x2', '\x2', '\x986', 
		'\x985', '\x3', '\x2', '\x2', '\x2', '\x986', '\x987', '\x3', '\x2', '\x2', 
		'\x2', '\x987', '\x191', '\x3', '\x2', '\x2', '\x2', '\x988', '\x98A', 
		'\t', '\x13', '\x2', '\x2', '\x989', '\x988', '\x3', '\x2', '\x2', '\x2', 
		'\x989', '\x98A', '\x3', '\x2', '\x2', '\x2', '\x98A', '\x98B', '\x3', 
		'\x2', '\x2', '\x2', '\x98B', '\x98C', '\a', '^', '\x2', '\x2', '\x98C', 
		'\x98E', '\x5', '\x1B4', '\xDB', '\x2', '\x98D', '\x98F', '\x5', '\xE8', 
		'u', '\x2', '\x98E', '\x98D', '\x3', '\x2', '\x2', '\x2', '\x98E', '\x98F', 
		'\x3', '\x2', '\x2', '\x2', '\x98F', '\x991', '\x3', '\x2', '\x2', '\x2', 
		'\x990', '\x992', '\x5', '\x13C', '\x9F', '\x2', '\x991', '\x990', '\x3', 
		'\x2', '\x2', '\x2', '\x991', '\x992', '\x3', '\x2', '\x2', '\x2', '\x992', 
		'\x994', '\x3', '\x2', '\x2', '\x2', '\x993', '\x995', '\x5', '\xF0', 
		'y', '\x2', '\x994', '\x993', '\x3', '\x2', '\x2', '\x2', '\x994', '\x995', 
		'\x3', '\x2', '\x2', '\x2', '\x995', '\x996', '\x3', '\x2', '\x2', '\x2', 
		'\x996', '\x998', '\x5', '\x13E', '\xA0', '\x2', '\x997', '\x999', '\a', 
		'\x88', '\x2', '\x2', '\x998', '\x997', '\x3', '\x2', '\x2', '\x2', '\x998', 
		'\x999', '\x3', '\x2', '\x2', '\x2', '\x999', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x99A', '\x99B', '\a', ':', '\x2', '\x2', '\x99B', '\x99D', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x99C', '\x99E', '\x5', '\x148', '\xA5', '\x2', 
		'\x99D', '\x99C', '\x3', '\x2', '\x2', '\x2', '\x99D', '\x99E', '\x3', 
		'\x2', '\x2', '\x2', '\x99E', '\x9A0', '\x3', '\x2', '\x2', '\x2', '\x99F', 
		'\x9A1', '\x5', '\x14E', '\xA8', '\x2', '\x9A0', '\x99F', '\x3', '\x2', 
		'\x2', '\x2', '\x9A0', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9A1', '\x9A3', 
		'\x3', '\x2', '\x2', '\x2', '\x9A2', '\x9A4', '\x5', '\xF0', 'y', '\x2', 
		'\x9A3', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A4', '\x3', 
		'\x2', '\x2', '\x2', '\x9A4', '\x9A5', '\x3', '\x2', '\x2', '\x2', '\x9A5', 
		'\x9A7', '\x5', '\xFC', '\x7F', '\x2', '\x9A6', '\x9A8', '\a', '\x88', 
		'\x2', '\x2', '\x9A7', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A7', '\x9A8', 
		'\x3', '\x2', '\x2', '\x2', '\x9A8', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x9A9', '\x9AA', '\a', '\'', '\x2', '\x2', '\x9AA', '\x9AC', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x9AB', '\x9AD', '\x5', '\x156', '\xAC', '\x2', '\x9AC', 
		'\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9AC', '\x9AD', '\x3', '\x2', '\x2', 
		'\x2', '\x9AD', '\x9AE', '\x3', '\x2', '\x2', '\x2', '\x9AE', '\x9B0', 
		'\x5', '\x158', '\xAD', '\x2', '\x9AF', '\x9B1', '\a', '\x88', '\x2', 
		'\x2', '\x9B0', '\x9AF', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9B1', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x9B2', '\x9B3', '\a', '!', '\x2', '\x2', '\x9B3', '\x9B4', '\x5', '\x114', 
		'\x8B', '\x2', '\x9B4', '\x9B6', '\x5', '\x1B4', '\xDB', '\x2', '\x9B5', 
		'\x9B7', '\x5', '\x148', '\xA5', '\x2', '\x9B6', '\x9B5', '\x3', '\x2', 
		'\x2', '\x2', '\x9B6', '\x9B7', '\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B8', 
		'\x3', '\x2', '\x2', '\x2', '\x9B8', '\x9BA', '\a', '\x83', '\x2', '\x2', 
		'\x9B9', '\x9BB', '\x5', '\x11A', '\x8E', '\x2', '\x9BA', '\x9B9', '\x3', 
		'\x2', '\x2', '\x2', '\x9BA', '\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9BB', 
		'\x9BC', '\x3', '\x2', '\x2', '\x2', '\x9BC', '\x9BE', '\a', '\x84', '\x2', 
		'\x2', '\x9BD', '\x9BF', '\x5', '\xF0', 'y', '\x2', '\x9BE', '\x9BD', 
		'\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9BF', '\x3', '\x2', '\x2', '\x2', 
		'\x9BF', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\x9C0', '\x9C1', '\a', 
		'\x88', '\x2', '\x2', '\x9C1', '\x199', '\x3', '\x2', '\x2', '\x2', '\x9C2', 
		'\x9C3', '\a', ')', '\x2', '\x2', '\x9C3', '\x9CC', '\x5', '\x6', '\x4', 
		'\x2', '\x9C4', '\x9C5', '\x5', '\x10E', '\x88', '\x2', '\x9C5', '\x9C6', 
		'\a', '\x88', '\x2', '\x2', '\x9C6', '\x9CD', '\x3', '\x2', '\x2', '\x2', 
		'\x9C7', '\x9C8', '\x5', '\x116', '\x8C', '\x2', '\x9C8', '\x9C9', '\a', 
		'\x7F', '\x2', '\x2', '\x9C9', '\x9CA', '\x5', '\x12E', '\x98', '\x2', 
		'\x9CA', '\x9CB', '\a', '\x80', '\x2', '\x2', '\x9CB', '\x9CD', '\x3', 
		'\x2', '\x2', '\x2', '\x9CC', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9CC', 
		'\x9C7', '\x3', '\x2', '\x2', '\x2', '\x9CD', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x9CE', '\x9CF', '\x5', '\x10E', '\x88', '\x2', '\x9CF', '\x9D0', 
		'\a', '\x88', '\x2', '\x2', '\x9D0', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x9D1', '\x9DF', '\x5', '\x116', '\x8C', '\x2', '\x9D2', '\x9D3', '\a', 
		'\x7F', '\x2', '\x2', '\x9D3', '\x9D4', '\x5', '\x124', '\x93', '\x2', 
		'\x9D4', '\x9D9', '\a', '\x80', '\x2', '\x2', '\x9D5', '\x9D6', '\a', 
		'\x93', '\x2', '\x2', '\x9D6', '\x9D7', '\x5', '\x112', '\x8A', '\x2', 
		'\x9D7', '\x9D8', '\a', '\x88', '\x2', '\x2', '\x9D8', '\x9DA', '\x3', 
		'\x2', '\x2', '\x2', '\x9D9', '\x9D5', '\x3', '\x2', '\x2', '\x2', '\x9D9', 
		'\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9DA', '\x9E0', '\x3', '\x2', '\x2', 
		'\x2', '\x9DB', '\x9DC', '\x5', '\x178', '\xBD', '\x2', '\x9DC', '\x9DD', 
		'\x5', 'L', '\'', '\x2', '\x9DD', '\x9DE', '\a', '\x88', '\x2', '\x2', 
		'\x9DE', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9D2', '\x3', 
		'\x2', '\x2', '\x2', '\x9DF', '\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9E0', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E2', '\a', '\x1D', '\x2', 
		'\x2', '\x9E2', '\x9E3', '\x5', '\x6', '\x4', '\x2', '\x9E3', '\x9E4', 
		'\x5', '\x10A', '\x86', '\x2', '\x9E4', '\x9E5', '\a', '\x88', '\x2', 
		'\x2', '\x9E5', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x9E6', '\x9E7', 
		'\a', '`', '\x2', '\x2', '\x9E7', '\x9E8', '\a', '\x81', '\x2', '\x2', 
		'\x9E8', '\x9E9', '\x5', '\x11A', '\x8E', '\x2', '\x9E9', '\x9F2', '\a', 
		'\x82', '\x2', '\x2', '\x9EA', '\x9EB', '\a', '\x7F', '\x2', '\x2', '\x9EB', 
		'\x9EC', '\x5', '\x124', '\x93', '\x2', '\x9EC', '\x9ED', '\a', '\x80', 
		'\x2', '\x2', '\x9ED', '\x9F3', '\x3', '\x2', '\x2', '\x2', '\x9EE', '\x9EF', 
		'\x5', '\x178', '\xBD', '\x2', '\x9EF', '\x9F0', '\x5', 'L', '\'', '\x2', 
		'\x9F0', '\x9F1', '\a', '\x88', '\x2', '\x2', '\x9F1', '\x9F3', '\x3', 
		'\x2', '\x2', '\x2', '\x9F2', '\x9EA', '\x3', '\x2', '\x2', '\x2', '\x9F2', 
		'\x9EE', '\x3', '\x2', '\x2', '\x2', '\x9F3', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\x9F4', '\x9F5', '\a', '\x92', '\x2', '\x2', '\x9F5', '\x9F6', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x9F6', '\x9F7', '\a', '\x83', '\x2', 
		'\x2', '\x9F7', '\x9F8', '\a', '\x84', '\x2', '\x2', '\x9F8', '\x9F9', 
		'\x5', '\x13A', '\x9E', '\x2', '\x9F9', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x9FA', '\x9FB', '\x5', '\x1B4', '\xDB', '\x2', '\x9FB', '\x9FD', 
		'\a', '\x83', '\x2', '\x2', '\x9FC', '\x9FE', '\x5', '\x11A', '\x8E', 
		'\x2', '\x9FD', '\x9FC', '\x3', '\x2', '\x2', '\x2', '\x9FD', '\x9FE', 
		'\x3', '\x2', '\x2', '\x2', '\x9FE', '\x9FF', '\x3', '\x2', '\x2', '\x2', 
		'\x9FF', '\xA01', '\a', '\x84', '\x2', '\x2', '\xA00', '\xA02', '\x5', 
		'\x138', '\x9D', '\x2', '\xA01', '\xA00', '\x3', '\x2', '\x2', '\x2', 
		'\xA01', '\xA02', '\x3', '\x2', '\x2', '\x2', '\xA02', '\xA03', '\x3', 
		'\x2', '\x2', '\x2', '\xA03', '\xA04', '\x5', '\x13A', '\x9E', '\x2', 
		'\xA04', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA07', '\x5', 
		'\x1AA', '\xD6', '\x2', '\xA06', '\xA08', '\x5', '\xE8', 'u', '\x2', '\xA07', 
		'\xA06', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', '\x3', '\x2', '\x2', 
		'\x2', '\xA08', '\xA09', '\x3', '\x2', '\x2', '\x2', '\xA09', '\xA0B', 
		'\a', '\x83', '\x2', '\x2', '\xA0A', '\xA0C', '\x5', '\x11A', '\x8E', 
		'\x2', '\xA0B', '\xA0A', '\x3', '\x2', '\x2', '\x2', '\xA0B', '\xA0C', 
		'\x3', '\x2', '\x2', '\x2', '\xA0C', '\xA0D', '\x3', '\x2', '\x2', '\x2', 
		'\xA0D', '\xA0F', '\a', '\x84', '\x2', '\x2', '\xA0E', '\xA10', '\x5', 
		'\xF0', 'y', '\x2', '\xA0F', '\xA0E', '\x3', '\x2', '\x2', '\x2', '\xA0F', 
		'\xA10', '\x3', '\x2', '\x2', '\x2', '\xA10', '\xA16', '\x3', '\x2', '\x2', 
		'\x2', '\xA11', '\xA17', '\x5', '\x118', '\x8D', '\x2', '\xA12', '\xA13', 
		'\x5', '\x178', '\xBD', '\x2', '\xA13', '\xA14', '\x5', 'L', '\'', '\x2', 
		'\xA14', '\xA15', '\a', '\x88', '\x2', '\x2', '\xA15', '\xA17', '\x3', 
		'\x2', '\x2', '\x2', '\xA16', '\xA11', '\x3', '\x2', '\x2', '\x2', '\xA16', 
		'\xA12', '\x3', '\x2', '\x2', '\x2', '\xA17', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\xA18', '\xA1E', '\x5', '\x1B4', '\xDB', '\x2', '\xA19', '\xA1A', 
		'\x5', '\x1B4', '\xDB', '\x2', '\xA1A', '\xA1B', '\a', '\x97', '\x2', 
		'\x2', '\xA1B', '\xA1C', '\x5', '\x1B4', '\xDB', '\x2', '\xA1C', '\xA1E', 
		'\x3', '\x2', '\x2', '\x2', '\xA1D', '\xA18', '\x3', '\x2', '\x2', '\x2', 
		'\xA1D', '\xA19', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA26', '\x3', 
		'\x2', '\x2', '\x2', '\xA1F', '\xA21', '\x5', '\x18', '\r', '\x2', '\xA20', 
		'\xA1F', '\x3', '\x2', '\x2', '\x2', '\xA20', '\xA21', '\x3', '\x2', '\x2', 
		'\x2', '\xA21', '\xA22', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA23', 
		'\a', '\x85', '\x2', '\x2', '\xA23', '\xA25', '\x5', '\x1B4', '\xDB', 
		'\x2', '\xA24', '\xA20', '\x3', '\x2', '\x2', '\x2', '\xA25', '\xA28', 
		'\x3', '\x2', '\x2', '\x2', '\xA26', '\xA24', '\x3', '\x2', '\x2', '\x2', 
		'\xA26', '\xA27', '\x3', '\x2', '\x2', '\x2', '\xA27', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\xA28', '\xA26', '\x3', '\x2', '\x2', '\x2', '\xA29', 
		'\xA2A', '\a', 'H', '\x2', '\x2', '\xA2A', '\xA2B', '\x5', '\x134', '\x9B', 
		'\x2', '\xA2B', '\xA2D', '\a', '\x83', '\x2', '\x2', '\xA2C', '\xA2E', 
		'\a', '\x38', '\x2', '\x2', '\xA2D', '\xA2C', '\x3', '\x2', '\x2', '\x2', 
		'\xA2D', '\xA2E', '\x3', '\x2', '\x2', '\x2', '\xA2E', '\xA2F', '\x3', 
		'\x2', '\x2', '\x2', '\xA2F', '\xA35', '\x5', '\x1AE', '\xD8', '\x2', 
		'\xA30', '\xA32', '\a', '\x86', '\x2', '\x2', '\xA31', '\xA33', '\a', 
		'\x38', '\x2', '\x2', '\xA32', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA32', 
		'\xA33', '\x3', '\x2', '\x2', '\x2', '\xA33', '\xA34', '\x3', '\x2', '\x2', 
		'\x2', '\xA34', '\xA36', '\x5', '\x1AE', '\xD8', '\x2', '\xA35', '\xA30', 
		'\x3', '\x2', '\x2', '\x2', '\xA35', '\xA36', '\x3', '\x2', '\x2', '\x2', 
		'\xA36', '\xA37', '\x3', '\x2', '\x2', '\x2', '\xA37', '\xA3D', '\a', 
		'\x84', '\x2', '\x2', '\xA38', '\xA3E', '\x5', '\x13A', '\x9E', '\x2', 
		'\xA39', '\xA3A', '\x5', '\x178', '\xBD', '\x2', '\xA3A', '\xA3B', '\x5', 
		'L', '\'', '\x2', '\xA3B', '\xA3C', '\a', '\x88', '\x2', '\x2', '\xA3C', 
		'\xA3E', '\x3', '\x2', '\x2', '\x2', '\xA3D', '\xA38', '\x3', '\x2', '\x2', 
		'\x2', '\xA3D', '\xA39', '\x3', '\x2', '\x2', '\x2', '\xA3E', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA40', '\x5', '\x6', '\x4', '\x2', 
		'\xA40', '\xA43', '\x5', '\x1B4', '\xDB', '\x2', '\xA41', '\xA42', '\a', 
		'\x93', '\x2', '\x2', '\xA42', '\xA44', '\x5', '\x1E', '\x10', '\x2', 
		'\xA43', '\xA41', '\x3', '\x2', '\x2', '\x2', '\xA43', '\xA44', '\x3', 
		'\x2', '\x2', '\x2', '\xA44', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\xA45', 
		'\xA47', '\a', '\x83', '\x2', '\x2', '\xA46', '\xA48', '\x5', '\x1A', 
		'\xE', '\x2', '\xA47', '\xA46', '\x3', '\x2', '\x2', '\x2', '\xA47', '\xA48', 
		'\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', '\x3', '\x2', '\x2', '\x2', 
		'\xA49', '\xA4A', '\a', '\x84', '\x2', '\x2', '\xA4A', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\xA4B', '\xA4D', '\a', '\x83', '\x2', '\x2', '\xA4C', 
		'\xA4E', '\x5', '\x1A', '\xE', '\x2', '\xA4D', '\xA4C', '\x3', '\x2', 
		'\x2', '\x2', '\xA4D', '\xA4E', '\x3', '\x2', '\x2', '\x2', '\xA4E', '\xA4F', 
		'\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA51', '\a', '\x84', '\x2', '\x2', 
		'\xA50', '\xA52', '\x5', 'Z', '.', '\x2', '\xA51', '\xA50', '\x3', '\x2', 
		'\x2', '\x2', '\xA51', '\xA52', '\x3', '\x2', '\x2', '\x2', '\xA52', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\xA53', '\xA54', '\t', '\x14', '\x2', '\x2', 
		'\xA54', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x1B7', '\x1BA', 
		'\x1BD', '\x1C2', '\x1C6', '\x1CC', '\x1CF', '\x1D4', '\x1D8', '\x1DF', 
		'\x1E1', '\x1E9', '\x1F1', '\x1F7', '\x1FB', '\x200', '\x20A', '\x212', 
		'\x21C', '\x222', '\x225', '\x229', '\x231', '\x236', '\x240', '\x24D', 
		'\x255', '\x25B', '\x25D', '\x264', '\x26C', '\x274', '\x27C', '\x284', 
		'\x28C', '\x296', '\x298', '\x29E', '\x2A3', '\x2AB', '\x2B3', '\x2BB', 
		'\x2BD', '\x2C0', '\x2C7', '\x2CC', '\x2D3', '\x2D7', '\x2D9', '\x2F5', 
		'\x2F9', '\x2FE', '\x302', '\x30A', '\x30D', '\x312', '\x316', '\x31A', 
		'\x320', '\x32E', '\x334', '\x340', '\x344', '\x349', '\x34D', '\x353', 
		'\x35B', '\x364', '\x376', '\x379', '\x37E', '\x381', '\x390', '\x396', 
		'\x39A', '\x3A0', '\x3A5', '\x3A8', '\x3B0', '\x3B8', '\x3C3', '\x3C8', 
		'\x3CD', '\x3CF', '\x3D8', '\x3E0', '\x3E7', '\x3EF', '\x3F3', '\x3FC', 
		'\x401', '\x403', '\x40C', '\x414', '\x418', '\x41D', '\x41F', '\x424', 
		'\x428', '\x42F', '\x437', '\x439', '\x43D', '\x440', '\x443', '\x44B', 
		'\x455', '\x466', '\x46D', '\x471', '\x47B', '\x480', '\x487', '\x490', 
		'\x495', '\x49C', '\x4A8', '\x4B3', '\x4BB', '\x4C0', '\x4C9', '\x4D2', 
		'\x4DB', '\x4E1', '\x4E6', '\x4EA', '\x4EE', '\x4F2', '\x4F6', '\x4FD', 
		'\x505', '\x512', '\x51C', '\x532', '\x536', '\x53A', '\x53F', '\x553', 
		'\x558', '\x55D', '\x564', '\x567', '\x57D', '\x589', '\x58D', '\x595', 
		'\x59F', '\x5A6', '\x5AA', '\x5AF', '\x5B2', '\x5B7', '\x5BF', '\x5C4', 
		'\x5CB', '\x5D1', '\x5D9', '\x5E1', '\x5E4', '\x5EB', '\x5F2', '\x5F6', 
		'\x5F9', '\x5FF', '\x603', '\x609', '\x617', '\x61D', '\x624', '\x629', 
		'\x62C', '\x62F', '\x636', '\x640', '\x651', '\x656', '\x65A', '\x65D', 
		'\x660', '\x667', '\x66D', '\x675', '\x67B', '\x685', '\x68D', '\x693', 
		'\x69E', '\x6A2', '\x6A4', '\x6A9', '\x6AD', '\x6B4', '\x6BD', '\x6C4', 
		'\x6C7', '\x6CA', '\x6CE', '\x6D3', '\x6E0', '\x6EA', '\x6F1', '\x6FD', 
		'\x704', '\x710', '\x716', '\x71A', '\x71E', '\x724', '\x72A', '\x72C', 
		'\x733', '\x737', '\x73A', '\x73E', '\x748', '\x74B', '\x752', '\x755', 
		'\x75A', '\x75F', '\x761', '\x764', '\x767', '\x76D', '\x770', '\x77C', 
		'\x780', '\x783', '\x78D', '\x790', '\x796', '\x7B1', '\x7BE', '\x7C4', 
		'\x7CD', '\x7D3', '\x7D6', '\x7DE', '\x7E2', '\x7E8', '\x7EE', '\x7F4', 
		'\x7FF', '\x803', '\x805', '\x80F', '\x815', '\x818', '\x825', '\x82B', 
		'\x82E', '\x831', '\x838', '\x83D', '\x841', '\x845', '\x856', '\x859', 
		'\x85E', '\x862', '\x866', '\x86F', '\x872', '\x877', '\x87B', '\x880', 
		'\x884', '\x886', '\x891', '\x895', '\x897', '\x89C', '\x8A1', '\x8A8', 
		'\x8AE', '\x8B3', '\x8B9', '\x8BD', '\x8C3', '\x8CA', '\x8D4', '\x8D7', 
		'\x8DA', '\x8DF', '\x8E5', '\x8E9', '\x8EB', '\x8F2', '\x8F9', '\x901', 
		'\x905', '\x914', '\x918', '\x921', '\x925', '\x929', '\x93F', '\x947', 
		'\x94D', '\x956', '\x95F', '\x965', '\x96C', '\x973', '\x975', '\x97C', 
		'\x97F', '\x982', '\x986', '\x989', '\x98E', '\x991', '\x994', '\x998', 
		'\x99D', '\x9A0', '\x9A3', '\x9A7', '\x9AC', '\x9B0', '\x9B6', '\x9BA', 
		'\x9BE', '\x9CC', '\x9D9', '\x9DF', '\x9F2', '\x9FD', '\xA01', '\xA07', 
		'\xA0B', '\xA0F', '\xA16', '\xA1D', '\xA20', '\xA26', '\xA2D', '\xA32', 
		'\xA35', '\xA3D', '\xA43', '\xA47', '\xA4D', '\xA51',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
